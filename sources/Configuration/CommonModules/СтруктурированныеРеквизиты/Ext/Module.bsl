////////////////////////////////////////////////////////////////////////////////
// Подсистема "Стандартные подсистемы ИТГ. Структурированные реквизиты".
// ОбщийМодуль.СтруктурированныеРеквизиты.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта.

// Обработчик для события формы ПриСозданииНаСервере.
// Вызывается из модуля формы, использующей подсистему.
//
// Параметры:
//  Форма            - УправляемаяФорма  - Форма использующая структурированные реквизиты.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	РеквизитыФормы = Новый Структура;
	МассивРеквизитовФормы = Форма.ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
		РеквизитыФормы.Вставить(РеквизитФормы.Имя, РеквизитФормы);
	КонецЦикла;
	
	Если РеквизитыФормы.Свойство("Объект") Тогда
		
		ОсновнойРеквизитФормы = РеквизитыФормы.Объект;
	
		МетаданныеРеквизита = Метаданные.НайтиПоТипу(ОсновнойРеквизитФормы.ТипЗначения.Типы()[0]);
		РеквизитыДляХраненияСтруктурированныхДанных = Новый Массив;
		ИменаРеквизитовДляХраненияСтруктурированныхДанных = Новый Массив;
		Для Каждого МетаданныеРеквизитаОсновногоРеквизитаФормы Из МетаданныеРеквизита.Реквизиты Цикл
			// TODO: выделить детектор в отдельный предикат в подсистеме
			Если Метаданные.ОпределяемыеТипы.Содержит(МетаданныеРеквизитаОсновногоРеквизитаФормы) Тогда
				ИмяРеквизита = МетаданныеРеквизитаОсновногоРеквизитаФормы.Имя + "Данные";
				РеквизитДляХраненияСтруктурированныхДанных = Новый РеквизитФормы(
					ИмяРеквизита, Новый ОписаниеТипов(), , , Истина);
				РеквизитыДляХраненияСтруктурированныхДанных.Добавить(РеквизитДляХраненияСтруктурированныхДанных);
				ИменаРеквизитовДляХраненияСтруктурированныхДанных.Добавить(ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
		
		// TODO: временно, пока детектор не подготовил
		ИмяРеквизита = "Реквизит1ТипаЧисло" + "Данные";
		РеквизитДляХраненияСтруктурированныхДанных = Новый РеквизитФормы(
			ИмяРеквизита, Новый ОписаниеТипов(), , , Истина);
		РеквизитыДляХраненияСтруктурированныхДанных.Добавить(РеквизитДляХраненияСтруктурированныхДанных);
		ИменаРеквизитовДляХраненияСтруктурированныхДанных.Добавить(ИмяРеквизита);
		
		СоздаваемыеРеквизитыФормы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(РеквизитыДляХраненияСтруктурированныхДанных);
		СоздаваемыеРеквизитыФормы.Добавить( 
			Новый РеквизитФормы("ИменаРеквизитовДляХраненияСтруктурированныхДанных", Новый ОписаниеТипов(), , , Ложь));
		Форма.ИзменитьРеквизиты(СоздаваемыеРеквизитыФормы);
		Форма["ИменаРеквизитовДляХраненияСтруктурированныхДанных"] =
			Новый Структура("Имена", ИменаРеквизитовДляХраненияСтруктурированныхДанных);
		
		Для Каждого РеквизитДляХраненияСтруктурированныхДанных Из РеквизитыДляХраненияСтруктурированныхДанных Цикл
			Если Форма.Параметры.Ключ.Пустая() Тогда
				Если ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
					Форма[РеквизитДляХраненияСтруктурированныхДанных.Имя] =
						Форма.Параметры.ЗначениеКопирования[РеквизитДляХраненияСтруктурированныхДанных.Имя].Получить();
				Иначе
					// TODO: определять правильную подсистему и вызывать правильный "конструктор"
					Форма[РеквизитДляХраненияСтруктурированныхДанных.Имя] = ЧислаКлиентСервер.СтруктураЧисла();
				КонецЕсли;
			Иначе
				Форма[РеквизитДляХраненияСтруктурированныхДанных.Имя] =
					Форма.Объект.Ссылка[РеквизитДляХраненияСтруктурированныхДанных.Имя].Получить();
			КонецЕсли; 
			// TODO: Не требуется. Представление и так должно быть консистентным
			// Форма.Объект.Реквизит1ТипаЧисло = ЧислаКлиентСервер.ПолучитьПредставлениеЧисла(Форма.Реквизит1ТипаЧислоДанные);
		КонецЦикла;
		
		// TODO: программно добавлять реквизит с соответствием имён элементов формы и структур,
		// описывающих необходимые взаимосвязи с реквизитами, чтобы исключить лишние серверные вызовы
		// перед редактирование и после редактирования реквизитов
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере.
// Вызывается из модуля формы объекта, содержащего структурированные реквизиты.
//
// Параметры:
//  Форма			 - УправляемаяФорма	 - Форма объекта, содержащего структурированные реквизиты.
//  Отказ			 - см. ПередЗаписьюНаСервере
//  ТекущийОбъект	 - Произвольный      - Объект, содержащий структурированные реквизиты.
//  ПараметрыЗаписи	 - см. ПередЗаписьюНаСервере
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Для Каждого ИмяРеквизитаДляХраненияСтруктурированныхДанных Из Форма["ИменаРеквизитовДляХраненияСтруктурированныхДанных"].Имена Цикл
		ТекущийОбъект[ИмяРеквизитаДляХраненияСтруктурированныхДанных] =
			Новый ХранилищеЗначения(Форма[ИмяРеквизитаДляХраненияСтруктурированныхДанных]);
	КонецЦикла;
	
	//ТекущийОбъект.Реквизит1ТипаЧислоДанные = Новый ХранилищеЗначения(Форма.Реквизит1ТипаЧислоДанные);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает идентификатор подсистемы в в справочнике объектов
// метаданных.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		"Подсистема.СтандартныеПодсистемыИТГ.Подсистема.СтруктурированныеРеквизиты");
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти