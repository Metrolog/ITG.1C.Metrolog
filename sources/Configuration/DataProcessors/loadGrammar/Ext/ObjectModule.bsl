

#region ЧтениеТаблицАвтомата

Функция ПрочитатьГрамматикуИзТекста(ТекстГрамматики) экспорт
	Фабрика =  ПолучитьСхему();
	попытка 
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстГрамматики);
		объект = Фабрика.ПрочитатьXML(ЧтениеXML,Фабрика.Тип("GoldParser","Grammar"));
	исключение
		Сообщить("Ошибка чтения грамматики "+Символы.ПС+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураГраматики = новый Структура;
	СтруктураГраматики.Вставить("ОписаниеДействий",ПрочитатьОписанияДействий(объект.Actions));
	СтруктураГраматики.Вставить("ТипыСимволов",ПрочитатьТипыСимволов(объект.SymbolKinds));
	СтруктураГраматики.Вставить("Параметры",ПрочитатьПараметры(объект.Parameters));
	СтруктураГраматики.Вставить("Символы",ПрочитатьСимволы(объект.SymbolTable));
	СтруктураГраматики.Вставить("Правила",ПрочитатьПравила(объект.RuleTable));
	СтруктураГраматики.Вставить("ТаблицаСимволов",ПрочитатьТаблицуСимволов(объект.CharSetTable));
	СтруктураГраматики.Вставить("Сканер",ПрочитатьСканер(объект.DFATable));
	СтруктураГраматики.Вставить("Переходы",ПрочитатьПереходы(объект.LALRTable));
	Возврат СтруктураГраматики;
КонецФункции

Функция ПрочитатьГрамматику(ИмяФайла) экспорт
	Фабрика =  ПолучитьСхему();
	попытка 
		ЧтениеXML = новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		объект = Фабрика.ПрочитатьXML(ЧтениеXML,Фабрика.Тип("GoldParser","Grammar"));
	исключение
		Сообщить("Ошибка чтения грамматики '"+ИмяФайла+"'"+Символы.ПС+ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураГраматики = новый Структура;
	СтруктураГраматики.Вставить("ОписаниеДействий",ПрочитатьОписанияДействий(объект.Actions));
	СтруктураГраматики.Вставить("ТипыСимволов",ПрочитатьТипыСимволов(объект.SymbolKinds));
	СтруктураГраматики.Вставить("Параметры",ПрочитатьПараметры(объект.Parameters));
	СтруктураГраматики.Вставить("Символы",ПрочитатьСимволы(объект.SymbolTable));
	СтруктураГраматики.Вставить("Правила",ПрочитатьПравила(объект.RuleTable));
	СтруктураГраматики.Вставить("ТаблицаСимволов",ПрочитатьТаблицуСимволов(объект.CharSetTable));
	СтруктураГраматики.Вставить("Сканер",ПрочитатьСканер(объект.DFATable));
	СтруктураГраматики.Вставить("Переходы",ПрочитатьПереходы(объект.LALRTable));
	Возврат СтруктураГраматики;
КонецФункции



Функция ПолучитьСхему()
	Пути = новый Массив();
	
	ИмяФайлаСхемы	= ПолучитьИмяВременногоФайла("удалить");
	СхемаИсходная	= ПолучитьМакет("xsd_GoldParser");
	ЗаписьСхемы		= новый ЗаписьТекста(имяФайлаСхемы,КодировкаТекста.UTF8);
	ЗаписьСхемы.Записать(СхемаИсходная.ПолучитьТекст());
	ЗаписьСхемы.Закрыть();
	Пути.Добавить(ИмяФайлаСхемы);
	
	
	Фабрика = СоздатьФабрикуXDTO(Пути);
	Возврат Фабрика;
КонецФункции
Функция ПрочитатьОписанияДействий(Источник)
	Действия = новый Соответствие;
	для каждого действие из Источник.Action цикл
		Действия[действие.id] = действие.value;
	КонецЦикла;
	Возврат действия;
КонецФункции
Функция ПрочитатьТипыСимволов(Источник)
	СимволыСоответствие = новый Соответствие;
	для каждого ОписаниеСимвол из Источник.Kind  цикл
		СимволыСоответствие[ОписаниеСимвол.id] = ОписаниеСимвол.value;
	КонецЦикла;
	Возврат СимволыСоответствие;
КонецФункции
Функция ПрочитатьПараметры(Источник)
	Параметры = новый Соответствие;
	для каждого параметр из Источник.Parameter  цикл
		Параметры.Вставить(параметр.name,параметр.value);
	КонецЦикла;
	Возврат Параметры;
КонецФункции
Функция ПрочитатьСимволы(Источник)
	СимволыСоответствие = новый Соответствие;
	для каждого ОписаниеСимвол из Источник.Symbol   цикл
		СимволыСоответствие[ОписаниеСимвол.id] = новый Структура("Имя,Значение,id,Тип,индекс,Описание,Исключаемый",
		ОписаниеСимвол.value,ОписаниеСимвол.value,
		ОписаниеСимвол.id,ОписаниеСимвол.kind,
		ОписаниеСимвол.index,ОписаниеСимвол.description,ОписаниеСимвол.name<>ОписаниеСимвол.value and ОписаниеСимвол.kind = 1);
	КонецЦикла;
	Возврат СимволыСоответствие;
КонецФункции
Функция ПрочитатьПравила(Источник)
	Правила = новый Соответствие;
	для каждого ОписаниеСимвол из Источник.Rule  цикл
		СтруктураПравила = новый Структура("Имя,Значение,Индекс,ИндексНетерминал,КоличествоСимволов,Описание",
		ОписаниеСимвол.name,ОписаниеСимвол.value,
		ОписаниеСимвол.index,ОписаниеСимвол.NonterminalIndex,
		ОписаниеСимвол.SymbolCount,ОписаниеСимвол.description);
		массивСимволов = новый массив;
		Если СтруктураПравила.КоличествоСимволов > 0 Тогда
			для каждого символ из ОписаниеСимвол.Symbol цикл
				массивСимволов.Добавить(символ.SymbolIndex);
			КонецЦикла;
		КонецЕсли; 
		СтруктураПравила.Вставить("Символы",массивСимволов);
		Правила[СтруктураПравила.Индекс] = СтруктураПравила;
	КонецЦикла;
	Возврат Правила;
КонецФункции
Функция ПрочитатьТаблицуСимволов(Источник)
	ТаблицаСимволов = новый Соответствие;
	для каждого ОписаниеСимвол из Источник.CharSet  цикл
		СтруктураПравила = новый Структура("Индекс,КоличествоСимволов",ОписаниеСимвол.index,ОписаниеСимвол.charCount);
		массивСимволов = новый массив;
		Если СтруктураПравила.КоличествоСимволов > 0 Тогда
			для каждого символ из ОписаниеСимвол.Chars цикл
				массивСимволов.Добавить(символ.unicodeIndex);
			КонецЦикла;
		КонецЕсли; 
		СтруктураПравила.Вставить("Коды",массивСимволов);
		ТаблицаСимволов[СтруктураПравила.Индекс] = СтруктураПравила;
	КонецЦикла;
	Возврат ТаблицаСимволов;
КонецФункции
Функция ПрочитатьСканер(Источник)
	ТаблицаСимволов = новый Соответствие;
	старт = Источник.initialState;
	для каждого ОписаниеСимвол из Источник.DFAState  цикл
		СтруктураПравила = новый Структура("Индекс,КоличествоСимволов,ИндексСимвола",ОписаниеСимвол.index,ОписаниеСимвол.edgeCount,ОписаниеСимвол.acceptIndex);
		массивСимволов = новый массив;
		Если СтруктураПравила.КоличествоСимволов > 0 Тогда
			для каждого символ из ОписаниеСимвол.DFAEdge  цикл
				массивСимволов.Добавить(новый Структура("ИндексТаблицыСимволов,СледующееСостояние",символ.charSetIndex,символ.target));
			КонецЦикла;
		КонецЕсли; 
		СтруктураПравила.Вставить("Коды",массивСимволов);
		ТаблицаСимволов[СтруктураПравила.Индекс] = СтруктураПравила;
	КонецЦикла;
	Возврат новый Структура("Старт,Таблица",старт,ТаблицаСимволов);
КонецФункции
Функция ПрочитатьПереходы(Источник)
	ТаблицаСимволов = новый Соответствие;
	старт = Источник.initialState;
	для каждого ОписаниеСимвол из Источник.LALRState  цикл
		СтруктураПравила = новый Структура("Индекс,КоличествоСимволов",ОписаниеСимвол.index,ОписаниеСимвол.actionCount);
		массивСимволов = новый массив;
		Если СтруктураПравила.КоличествоСимволов > 0 Тогда
			для каждого символ из ОписаниеСимвол.LALRAction  цикл
				массивСимволов.Добавить(новый Структура("Действие,Индекс,Значение",символ.action,символ.symbolIndex,символ.value));
			КонецЦикла;
		КонецЕсли; 
		СтруктураПравила.Вставить("Коды",массивСимволов);
		ТаблицаСимволов[СтруктураПравила.Индекс] = СтруктураПравила;
	КонецЦикла;
	Возврат новый Структура("Старт,Таблица",старт,ТаблицаСимволов);
КонецФункции



#endregion


