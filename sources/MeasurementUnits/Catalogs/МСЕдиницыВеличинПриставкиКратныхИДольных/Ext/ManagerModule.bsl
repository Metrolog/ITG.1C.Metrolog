#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих
//  естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	
	// Результат.Добавить("Код");
	Результат.Добавить("Основание");
	Результат.Добавить("Порядок");
	
	Возврат Результат;
	
КонецФункции

// Возвращает элемент справочника по основанию степени и показателю.
//
// Параметры:
//  ПоказательСтепени	- Строка, Число		- Показатель степени
//  ОснованиеСтепени    - Строка, Число		- Основание степени
// 
// Возвращаемое значение:
//   Ссылка             - элемент справочника
//   Неопределено       - в случае, искомый элемент не найден.
//
Функция НайтиПоПоказателю(Знач ПоказательСтепени, Знач ОснованиеСтепени = 10) Экспорт
	Возврат НайтиПоКоду(ПолучитьКод(ПоказательСтепени, ОснованиеСтепени));
КонецФункции

// Создаёт либо обновляет поставляемый элемент справочника при обновлении ИБ.
//
// Параметры:
//  Основание           		- Число		- Основание степени
//  Показатель					- Число		- Показатель степени
//  Наименование 				- Строка    - Наименование приставки
//  НаименованиеРус 			- Строка    - Приставка для наименования единиц величин русская
//  ОбозначениеРус 				- Строка    - Обозначение приставки русское
//  НаименованиеМн 				- Строка    - Приставка для наименования единиц величин международная
//  ОбозначениеМн 				- Строка    - Обозначение приставки международное
//  НаименованиеРусISO_80000_1 	- Строка    - Приставка для наименования единиц величин русская по ISO 80000-1
//  ОбозначениеРусISO_80000_1 	- Строка    - Обозначение приставки русское по ISO 80000-1
//  НаименованиеМнISO_80000_1 	- Строка    - Приставка для наименования единиц величин международная по ISO 80000-1
//  ОбозначениеМнISO_80000_1 	- Строка    - Обозначение приставки международное по ISO 80000-1
// 
Процедура ЗаполнитьПредопределённый(Знач Основание, Знач Порядок, Знач Наименование,
	Знач НаименованиеРус, Знач ОбозначениеРус,
	Знач НаименованиеМн, Знач ОбозначениеМн,
	Знач НаименованиеРусISO_80000_1 = Неопределено, Знач ОбозначениеРусISO_80000_1 = Неопределено,
	Знач НаименованиеМнISO_80000_1 = Неопределено, Знач ОбозначениеМнISO_80000_1 = Неопределено) Экспорт
	
	Перем ТребуетсяЗапись;
		
	Параметры = Новый ФиксированнаяСтруктура(
		"Основание,Порядок,Наименование," +
		"НаименованиеРус,ОбозначениеРус," +
		"НаименованиеМн,ОбозначениеМн," +
		"НаименованиеРусISO_80000_1,ОбозначениеРусISO_80000_1," +
		"НаименованиеМнISO_80000_1,ОбозначениеМнISO_80000_1",
		Основание, Порядок, Наименование,
		НаименованиеРус, ОбозначениеРус,
		НаименованиеМн, ОбозначениеМн,
		?(НаименованиеРусISO_80000_1 <> Неопределено, НаименованиеРусISO_80000_1, НаименованиеРус),
			?(ОбозначениеРусISO_80000_1 <> Неопределено, ОбозначениеРусISO_80000_1, ОбозначениеРус),
		?(НаименованиеМнISO_80000_1 <> Неопределено, НаименованиеМнISO_80000_1, НаименованиеМн),
			?(ОбозначениеМнISO_80000_1 <> Неопределено, ОбозначениеМнISO_80000_1, ОбозначениеМн)
	);

	Приставка = НайтиПоПоказателю(Порядок, Основание);
	
	Если Приставка <> ПустаяСсылка() Тогда
		
		ТребуетсяЗапись = Ложь;
		
		Для Каждого Реквизит из Параметры цикл
			ТребуетсяЗапись = НЕ (Реквизит.Значение = Приставка[Реквизит.Ключ]);
			Если ТребуетсяЗапись Тогда
                Прервать;
	        КонецЕсли;
	    КонецЦикла;

		Если НЕ ТребуетсяЗапись Тогда
			Возврат;
		Иначе
			ПриставкаОбъект = Приставка.ПолучитьОбъект();
		КонецЕсли;
		
	Иначе
		
		ПриставкаОбъект = СоздатьЭлемент();
		
	КонецЕсли;
	
	ПриставкаОбъект.Заполнить(Параметры);
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПриставкаОбъект, , Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой ЗапретРедактированияРеквизитовОбъектов.

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Перем БлокируемыеРеквизиты;
	БлокируемыеРеквизиты = Новый Массив;
	
	БлокируемыеРеквизиты.Добавить("Код");
	
	Для Каждого ВариантОбозначения Из Метаданные.Перечисления.МСЕдиницыВеличинОбозначения.ЗначенияПеречисления Цикл
		БлокируемыеРеквизиты.Добавить("Наименование" + ВариантОбозначения.Имя);
		БлокируемыеРеквизиты.Добавить("Обозначение" + ВариантОбозначения.Имя);
	КонецЦикла;

	Возврат БлокируемыеРеквизиты;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь; 
	
	Поля.Добавить("Основание");
    Поля.Добавить("Порядок");
	
	Для Каждого ВариантОбозначения Из Метаданные.Перечисления.МСЕдиницыВеличинОбозначения.ЗначенияПеречисления Цикл
		Поля.Добавить("Наименование" + ВариантОбозначения.Имя);
	КонецЦикла;

КонецПроцедуры 

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;

	Если Данные.Порядок = 0 Тогда
		Представление = "";
	Иначе
	    Представление = Данные[МСЕдиницыВеличинКлиентСерверПовтИсп.ПолучитьРеквизитНаименования()] + " (" + Данные.Основание + РаботаСоСтрокамиЮникодКлиентСервер.ПолучитьСтрокуИзПоказателяСтепени(Данные.Порядок) + ")";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразует переданные основание и показатель степени (число) в значение кода для справочника.
//
// Параметры:
//  ПоказательСтепени	 - Строка, Число	 - Показатель степени
//  ОснованиеСтепени     - Строка, Число     - Основание степени
// 
// Возвращаемое значение:
//   Число - значение кода для справочника
//
Функция ПолучитьКод(Знач ПоказательСтепени, Знач ОснованиеСтепени = 10) Экспорт
	Перем Результат;
	Перем ПоказательСтепениЧисло;
	Перем ОснованиеСтепениЧисло;
	ПоказательСтепениЧисло = Число(ПоказательСтепени);
	ОснованиеСтепениЧисло = Число(ОснованиеСтепени);
	Результат = (ПоказательСтепениЧисло + 100)*100 + ОснованиеСтепениЧисло;
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецЕсли