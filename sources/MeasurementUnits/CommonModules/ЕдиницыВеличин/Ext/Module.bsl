////////////////////////////////////////////////////////////////////////////////
// Подсистема "Метрологическая служба. Единицы величин".
// ОбщийМодуль.ЕдиницыВеличин.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интеграция с Библиотекой стандартных подсистем (БСП).
// Подсистема "Базовая функциональность".

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы ЗапретРедактированияРеквизитовОбъектов.

// См. комментарий к одноименной процедуре в общем модуле ЗапретРедактированияРеквизитовОбъектовПереопределяемый.
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.ПриставкиЕдиницВеличин.ПолноеИмя(), "");
	Объекты.Вставить(Метаданные.Справочники.ЕдиницыВеличин.ПолноеИмя(), "");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой ГрупповоеИзменениеОбъектов.

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
//
// Параметры:
//   Объекты - Соответствие - в качестве ключа указать полное имя объекта метаданных,
//                            подключенного к подсистеме "Групповое изменение объектов". 
//                            Дополнительно в значении могут быть перечислены имена экспортных функций:
//                            "РеквизитыНеРедактируемыеВГрупповойОбработке",
//                            "РеквизитыРедактируемыеВГрупповойОбработке".
//                            Каждое имя должно начинаться с новой строки.
//                            Если указано "*", значит в модуле менеджера определены обе функции.
//
// Пример: 
//   Объекты.Вставить(Метаданные.Документы.ЗаказПокупателя.ПолноеИмя(), "*"); // определены обе функции.
//   Объекты.Вставить(Метаданные.БизнесПроцессы.ЗаданиеСРолевойАдресацией.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
//   Объекты.Вставить(Метаданные.Справочники.Партнеры.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке
//		|РеквизитыНеРедактируемыеВГрупповойОбработке");
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.ВариантыОбозначенийЕдиницВеличин.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПриставкиЕдиницВеличин.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ЕдиницыВеличин.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает идентификатор подсистемы в в справочнике объектов
// метаданных.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		"Подсистема.МетрологическаяСлужба.Подсистема.ЕдиницыВеличин");
	
КонецФункции

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ВариантыОбозначенийЕдиницВеличин);
	Типы.Добавить(Метаданные.Справочники.ПриставкиЕдиницВеличин);
	
КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив - заполняется метаданными.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ВариантыОбозначенийЕдиницВеличин);
	Типы.Добавить(Метаданные.Справочники.ПриставкиЕдиницВеличин);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Поиск и удаление дублей".

// Определить объекты, в модулях менеджеров которых предусмотрена возможность параметризации 
//   алгоритма поиска дублей с помощью экспортных процедур ПараметрыПоискаДублей, ПриПоискеДублей 
//   и ВозможностьЗаменыЭлементов.
//
// Параметры:
//   Объекты - Соответствие - Объекты, в модулях менеджеров которых размещены экспортные процедуры.
//       ** Ключ     - Строка - Полное имя объекта метаданных, подключенного к подсистеме "Поиск и удаление дублей".
//       ** Значение - Строка - Имена экспортных процедур, определенных в модуле менеджера.
//           Могут быть перечислены:
//           "ПараметрыПоискаДублей",
//           "ПриПоискеДублей",
//           "ВозможностьЗаменыЭлементов".
//           Каждое имя должно начинаться с новой строки.
//           Если указана пустая строка, значит в модуле менеджера определены все процедуры.
//
// Примеры:
//
//  1. Определены все процедуры.
//	Объекты.Вставить(Метаданные.Документы.ЗаказПокупателя.ПолноеИмя(), "");
//
//  2. Определены процедуры ПараметрыПоискаДублей и ПриПоискеДублей.
//	Объекты.Вставить(Метаданные.БизнесПроцессы.ЗаданиеСРолевойАдресацией.ПолноеИмя(), "ПараметрыПоискаДублей
//		|ПриПоискеДублей");
//
Процедура ПриОпределенииОбъектовСПоискомДублей(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.ПриставкиЕдиницВеличин.ПолноеИмя(),
		"ПараметрыПоискаДублей
		|ПриПоискеДублей"
	);
	Объекты.Вставить(Метаданные.Справочники.ЕдиницыВеличин.ПолноеИмя(),
		"ПараметрыПоискаДублей
		|ПриПоискеДублей"
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриЗаписиВариантаОбозначенийЕдиницыВеличин(Источник, Отказ) Экспорт

	// TODO: инкапсулировать вычисление имён констакт
	Для Каждого ВариантОбозначения Из ЕдиницыВеличинКлиентСерверПовтИсп.ПолучитьВариантыОбозначенийЕдиницВеличин() Цикл
		Константы["МСЕдиницыВеличинИспользоватьОбозначенияПриставок" + ВариантОбозначения.Код].Установить(
			Константы["МСЕдиницыВеличинИспользоватьОбозначения" + ВариантОбозначения.Код].Получить()
			И (Константы["ОбозначенияПриставокЕдиницВеличин"].Получить() = Перечисления.ОбозначенияПриставокЕдиницВеличин.ПоПостановлениюПравительстваРФ879)
		);
		Константы["МСЕдиницыВеличинИспользоватьОбозначенияПриставок" + ВариантОбозначения.Код + "ISO_80000_1"].Установить(
			Константы["МСЕдиницыВеличинИспользоватьОбозначения" + ВариантОбозначения.Код].Получить()
			И (Константы["ОбозначенияПриставокЕдиницВеличин"].Получить() = Перечисления.ОбозначенияПриставокЕдиницВеличин.ПоISO_80000_1)
		);
	КонецЦикла;
	
	Отказ = Ложь;
	
КонецПроцедуры

Процедура ПередЗаписьюУдалитьЛишниеПробелыВНаименованииИОбозначении(Источник, Отказ) Экспорт
	
	Перем РеквизитНаименование;
	Перем РеквизитОбозначение;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВариантОбозначения Из ЕдиницыВеличинКлиентСерверПовтИсп.ПолучитьВариантыОбозначенийЕдиницВеличин() Цикл
		РеквизитНаименование = ЕдиницыВеличинКлиентСерверПовтИсп.ПолучитьРеквизитНаименования(ВариантОбозначения);
		Источник[РеквизитНаименование] = СокрЛП(Источник[РеквизитНаименование]);
		РеквизитОбозначение = ЕдиницыВеличинКлиентСерверПовтИсп.ПолучитьРеквизитОбозначения(ВариантОбозначения);
		Источник[РеквизитОбозначение] = СокрЛП(Источник[РеквизитОбозначение]);
	КонецЦикла;
	
	Отказ = Ложь;
	
КонецПроцедуры

#КонецОбласти