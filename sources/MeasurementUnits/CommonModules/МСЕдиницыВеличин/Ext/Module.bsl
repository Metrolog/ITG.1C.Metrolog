////////////////////////////////////////////////////////////////////////////////
// Подсистема "Метрологическая служба. Единицы величин".
// ОбщийМодуль.МСЕдиницыВеличин.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интеграция с Библиотекой стандартных подсистем (БСП).
// Подсистема "Базовая функциональность".

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает идентификатор подсистемы в в справочнике объектов
// метаданных.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		"Подсистема.МетрологическаяСлужба.Подсистема.ЕдиницыВеличин");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура =
		"МСЕдиницыВеличин.ОбновлениеИнформационнойБазы_НачальноеЗаполнение";
	Обработчик.ОбщиеДанные 		   = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.0.9";
	Обработчик.Процедура =
		"МСЕдиницыВеличин.ОбновлениеИнформационнойБазы_Заполнение_1_0_0_9";
	Обработчик.ОбщиеДанные 		   = Истина;
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("17217ab6-af6b-4767-b216-365524ff777b");
	Обработчик.Комментарий =
		НСтр("ru = 'Проверка и восстановление единиц величин. Рекомендуется воздержаться от их редактирования до завершения обработки.'");

КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_НачальноеЗаполнение() Экспорт
	
	ОбновлениеИнформационнойБазы_Заполнение_1_0_0_9();

КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_Заполнение_1_0_0_9() Экспорт
	
	ЗаполнитьПредопределённый("иотта",   "И",  24);
	ЗаполнитьПредопределённый("зетта",   "З",  21);
	ЗаполнитьПредопределённый("экса",    "Э",  18);
	ЗаполнитьПредопределённый("пета",    "П",  15);
	ЗаполнитьПредопределённый("тера",    "Т",  12);
	ЗаполнитьПредопределённый("гига",    "Г",  9);
	ЗаполнитьПредопределённый("мега",    "М",  6);
	ЗаполнитьПредопределённый("кило",    "к",  3);
	ЗаполнитьПредопределённый("гекто",   "г",  2);
	ЗаполнитьПредопределённый("дека",    "да", 1);
	ЗаполнитьПредопределённый("деци",    "д",  -1);
	ЗаполнитьПредопределённый("санти",   "с",  -2);
	ЗаполнитьПредопределённый("милли",   "м",  -3);
	ЗаполнитьПредопределённый("микро",   "мк", -6);
	ЗаполнитьПредопределённый("нано",    "н",  -9);
	ЗаполнитьПредопределённый("пико",    "п",  -12);
	ЗаполнитьПредопределённый("фемто",   "ф",  -15);
	ЗаполнитьПредопределённый("атто",    "а",  -18);
	ЗаполнитьПредопределённый("зепто",   "з",  -21);
	ЗаполнитьПредопределённый("иокто",   "и",  -24);

КонецПроцедуры

Процедура ЗаполнитьПредопределённый(Наименование, Обозначение, Порядок)
	
	Приставка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.МСЕдиницыВеличинПриставкиКратныхИДольных." + Наименование);
	Если Приставка <> Неопределено Тогда
		Если 
			(Приставка.Порядок = Порядок)
			И (Приставка.Обозначение = Обозначение)
			И (Приставка.Код = Наименование)
			И (Приставка.Наименование = Наименование)
		Тогда
			Возврат;
		Иначе
			ПриставкаОбъект = Приставка.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ПриставкаОбъект = Справочники.МСЕдиницыВеличинПриставкиКратныхИДольных.СоздатьЭлемент();
	КонецЕсли;
	
	ПриставкаОбъект.Код = Наименование;
	ПриставкаОбъект.Наименование = Наименование;
	ПриставкаОбъект.Обозначение = Обозначение;
	ПриставкаОбъект.Порядок = Порядок;

	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПриставкаОбъект);
	
КонецПроцедуры

#КонецОбласти
