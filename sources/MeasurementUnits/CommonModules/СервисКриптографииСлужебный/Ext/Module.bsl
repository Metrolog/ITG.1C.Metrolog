////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис криптографии (служебный)".
//  
////////////////////////////////////////////////////////////////////////////////


#Область СлужебныйПрограммныйИнтерфейс

Функция Зашифровать(Данные, Получатели, ТипШифрования, ПараметрыШифрования) Экспорт
	
	ЗашифроватьПроверкаВходящихПараметров(Данные, Получатели, ТипШифрования, ПараметрыШифрования);
	
	Если ТипЗнч(Получатели) <> Тип("Массив") Тогда
		СписокПолучателей = Новый Массив;
		СписокПолучателей.Добавить(Получатели);
	Иначе
		СписокПолучателей = Получатели;
	КонецЕсли;
	
	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();
		
		МассивСертификатовТип = СервисКриптографииПрокси.ФабрикаXDTO.Тип(ПространствоИмен(), "Certificates");
		МассивСертификатов = СервисКриптографииПрокси.ФабрикаXDTO.Создать(МассивСертификатовТип);
		
		Для Каждого СертификатПолучателя Из СписокПолучателей Цикл
			Если ТипЗнч(СертификатПолучателя) = Тип("ДвоичныеДанные") Тогда
				МассивСертификатов.Certificate.Добавить(ХранилищеСертификатов.СертификатВКодировкеDER(СертификатПолучателя));
			ИначеЕсли (ТипЗнч(СертификатПолучателя) = Тип("Структура")
				ИЛИ  ТипЗнч(СертификатПолучателя) = Тип("ФиксированнаяСтруктура"))
				И СертификатПолучателя.Свойство("Сертификат") Тогда
				МассивСертификатов.Certificate.Добавить(ХранилищеСертификатов.СертификатВКодировкеDER(СертификатПолучателя.Сертификат));
			Иначе
				СертификатПолучателя = ХранилищеСертификатов.НайтиСертификат(СертификатПолучателя);
				МассивСертификатов.Certificate.Добавить(СертификатПолучателя.Сертификат);
			КонецЕсли;			
		КонецЦикла;
		
		ВернутьКакАдрес = Ложь;
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			ВернутьКакАдрес = Истина;
			Данные = ПолучитьИзВременногоХранилища(Данные);
		КонецЕсли;
		
		Результат = СервисКриптографииПрокси.Encrypt(МассивСертификатов, Данные);
		
		Если ВернутьКакАдрес Тогда
			Результат = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
		КонецЕсли;
		
		Возврат Результат;
	Исключение
		Параметры = Новый Структура("Получатели,Данные,ТипШифрования,ПараметрыШифрования",
									Получатели, Данные, ТипШифрования, ПараметрыШифрования);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияШифрование(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
		
КонецФункции

Функция Расшифровать(ЗашифрованныеДанные, Сертификат, ТипШифрования, ПараметрыШифрования) Экспорт

	РасшифроватьПроверкаВходящихПараметров(ЗашифрованныеДанные, ТипШифрования, ПараметрыШифрования);
	
	МаркерБезопасности = ПараметрыСеанса.МаркерыБезопасности.Получить(Сертификат.Идентификатор);
	
	Если Не ЗначениеЗаполнено(МаркерБезопасности) Тогда
		Возврат Новый Структура("КодВозврата, Идентификатор", "ТребуетсяАутентификация", Сертификат.Идентификатор);
	КонецЕсли;
		
	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();

		ВернутьКакАдрес = Ложь;
		Если ТипЗнч(ЗашифрованныеДанные) = Тип("Строка") Тогда
			ВернутьКакАдрес = Истина;
			ЗашифрованныеДанные = ПолучитьИзВременногоХранилища(ЗашифрованныеДанные);
		КонецЕсли;
		
		Результат = СервисКриптографииПрокси.Decrypt(МаркерБезопасности, ЗашифрованныеДанные);
		
		Если ЗначениеЗаполнено(Результат.Data) Тогда
			Результат = Результат.Data;
			Если ВернутьКакАдрес Тогда
				Результат = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
			КонецЕсли;
		Иначе
			ВызватьИсключение(НСтр("ru = 'Не удалось выполнить расшифровку сообщения'"));
		КонецЕсли;
		
		Возврат Результат;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если СтрНайти(ТекстИсключения, "Invalid SecurityToken") Тогда
			Возврат Новый Структура("КодВозврата, Идентификатор", "ТребуетсяАутентификация", Сертификат.Идентификатор);
		КонецЕсли;
		
		Параметры = Новый Структура("ЗашифрованныеДанные,Сертификат,ТипШифрования,ПараметрыШифрования",
									ЗашифрованныеДанные, Сертификат, ТипШифрования, ПараметрыШифрования);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияРасшифровка(), ИнформацияОбОшибке, Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция Подписать(Данные, Подписант, ТипПодписи, ПараметрыПодписания) Экспорт 
	
	ПодписатьПроверкаВходящихПараметров(Данные, Подписант, ТипПодписи, ПараметрыПодписания);
	
	Сертификат = Неопределено;
	Если ТипЗнч(Подписант) = Тип("ДвоичныеДанные") Тогда
		Сертификат = СервисКриптографии.ПолучитьСвойстваСертификата(Подписант);
	ИначеЕсли (ТипЗнч(Подписант) = Тип("Структура")
		ИЛИ  ТипЗнч(Подписант) = Тип("ФиксированнаяСтруктура"))
		И Подписант.Свойство("Сертификат") Тогда
		Сертификат = СервисКриптографии.ПолучитьСвойстваСертификата(Подписант.Сертификат);
	Иначе
		Сертификат = ХранилищеСертификатов.НайтиСертификат(Подписант);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сертификат) Тогда
		ВызватьИсключение(НСтр("ru = 'Сертификат подписанта не найден в хранилище сертификатов.'"));
	КонецЕсли;
	
	МаркерБезопасности = ПараметрыСеанса.МаркерыБезопасности.Получить(Сертификат.Идентификатор);
	
	Если Не ЗначениеЗаполнено(МаркерБезопасности) Тогда
		Возврат Новый Структура("КодВозврата, Идентификатор", "ТребуетсяАутентификация", Сертификат.Идентификатор);
	КонецЕсли;
		
	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();
		
		Если ЗначениеЗаполнено(ПараметрыПодписания) И ПараметрыПодписания.Свойство("ОтсоединеннаяПодпись") Тогда
			ОтсоединеннаяПодпись = ПараметрыПодписания.ОтсоединеннаяПодпись;
		Иначе
			ОтсоединеннаяПодпись = Истина;
		КонецЕсли;
		
		ВернутьКакАдрес = Ложь;
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			ВернутьКакАдрес = Истина;
			Данные = ПолучитьИзВременногоХранилища(Данные);
		КонецЕсли;
		
		Если ТипПодписи = "CMS" Тогда //PKCS7
			Результат = СервисКриптографииПрокси.Sign(МаркерБезопасности, Данные, Не ОтсоединеннаяПодпись);
		ИначеЕсли ТипПодписи = "GOST3410" Тогда 
			Результат = СервисКриптографииПрокси.SignGost3410(МаркерБезопасности, Данные);
		КонецЕсли;
						
		Если ВернутьКакАдрес Тогда
			Результат = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
		КонецЕсли;
		
		Возврат Результат;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если СтрНайти(ТекстИсключения, "Invalid SecurityToken") Тогда
			Возврат Новый Структура("КодВозврата, Идентификатор", "ТребуетсяАутентификация", Сертификат.Идентификатор);
		КонецЕсли;
		
		Параметры = Новый Структура("Данные,Подписант,ТипПодписи,ПараметрыПодписания",
									Данные, Подписант, ТипПодписи, ПараметрыПодписания);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПодписание(), ИнформацияОбОшибке, Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПроверитьПодпись(Подпись, Данные, ТипПодписи, ПараметрыПодписания) Экспорт
	
	ПроверитьПодписьПроверкаВходящихПараметров(Подпись, Данные, ТипПодписи, ПараметрыПодписания);
	
	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();
		
		Если ТипЗнч(Подпись) = Тип("Строка") Тогда
			Подпись = ПолучитьИзВременногоХранилища(Подпись);
		КонецЕсли;
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Данные = ПолучитьИзВременногоХранилища(Данные);
		КонецЕсли;
		
		Если ТипПодписи = "CMS" Тогда //PKCS7
			Сертификат = "";
		ИначеЕсли ТипПодписи = "GOST3410" Тогда 
			ПараметрыПодписания.Свойство("Сертификат", Сертификат);			
		КонецЕсли;
		
		Результат = СервисКриптографииПрокси.CheckSignature(Подпись, Данные, Сертификат);
				
		Возврат Результат;
	Исключение
		Параметры = Новый Структура("Подпись, Данные, ТипПодписи, ПараметрыПодписания",
									Подпись, Данные, ТипПодписи, ПараметрыПодписания);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПроверкаПодписи(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПроверитьСертификат(Сертификат) Экспорт
	
	ПроверитьСертификатПроверкаВходящихПараметров(Сертификат);
	
	Сертификат = ХранилищеСертификатов.СертификатВКодировкеDER(Сертификат);

	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();
		
		Результат = СервисКриптографииПрокси.CheckCertificate(Сертификат);
		
		Возврат Результат;
	Исключение
		Параметры = Новый Структура("Сертификат", Сертификат);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияПроверкаСертификата(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСвойстваСертификата(Сертификат) Экспорт
	
	ПолучитьСвойстваСертификатаПроверкаВходящихПараметров(Сертификат);
	
	СертификатВКодировкеDER = ХранилищеСертификатов.СертификатВКодировкеDER(Сертификат);
	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();
		
		CertificateProperties = СервисКриптографииПрокси.GetCertificateProperties(СертификатВКодировкеDER);
		
		Свойства = Новый Структура;
		Свойства.Вставить("Версия"                   , СтрШаблон("V%1", CertificateProperties.Version + 1));
		Свойства.Вставить("ДатаНачала"               , CertificateProperties.ValidFrom);
		Свойства.Вставить("ДатаОкончания"            , CertificateProperties.ValidTo);
		Свойства.Вставить("Издатель"                 , ПреобразоватьOID(CertificateProperties.Issuer));
		Свойства.Вставить("ИспользоватьДляПодписи"   , CertificateProperties.UseToSign);
		Свойства.Вставить("ИспользоватьДляШифрования", CertificateProperties.UseToEncrypt);
		Свойства.Вставить("ОткрытыйКлюч"             , CertificateProperties.PublicKey);
		Свойства.Вставить("Отпечаток"                , CertificateProperties.Thumbprint);
		Свойства.Вставить("РасширенныеСвойства"      , РасширенныеСвойстваСертификата(CertificateProperties.Extensions));
		Свойства.Вставить("СерийныйНомер"            , CertificateProperties.SerialNumber);
		Свойства.Вставить("Субъект"                  , ПреобразоватьOID(CertificateProperties.Subject));
		Свойства.Вставить("Наименование"             , НаименованиеСертификата(CertificateProperties.Subject));
		Свойства.Вставить("Сертификат"               , СертификатВКодировкеDER);
		Свойства.Вставить("Идентификатор"            , ВычислитьИдентификаторСертификатаXDTO(CertificateProperties));
	
		Возврат Новый ФиксированнаяСтруктура(Свойства);
	Исключение
		Параметры = Новый Структура("Сертификат", Сертификат);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияСвойстваСертификата(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСпособыДоставкиПаролей(ИдентификаторСертификата) Экспорт
	
	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();
		
		СпособыДоставкиПаролей = Новый Структура("Телефон,ЭлектроннаяПочта", "", "");
		
		Результат = СервисКриптографииПрокси.GetAuthParams(ИдентификаторСертификата);
		
		Для Каждого ItemAuthParams Из Результат.Auth Цикл
			Если ItemAuthParams.Type = "phone" Тогда
				СпособыДоставкиПаролей.Телефон = ItemAuthParams.Value;
			ИначеЕсли ItemAuthParams.Type = "email" Тогда
				СпособыДоставкиПаролей.ЭлектроннаяПочта = ItemAuthParams.Value;
			КонецЕсли;
		КонецЦикла;
		
		Возврат СпособыДоставкиПаролей;
	Исключение
		Параметры = Новый Структура("ИдентификаторСертификата",
									ИдентификаторСертификата);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияАутентификация(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьВременныйПароль(Идентификатор, ПовторнаяОтправка = Ложь, Тип = "phone") Экспорт
	
	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();
		
		Возврат СервисКриптографииПрокси.GetPassword(Идентификатор, ПовторнаяОтправка, Тип);
	Исключение
		Параметры = Новый Структура("Идентификатор,ПовторнаяОтправка,Тип",
									Идентификатор, ПовторнаяОтправка, Тип);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияАутентификация(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСвойстваКриптосообщения(Криптосообщение, ТолькоКлючевыеСвойства = Ложь) Экспорт
	
	ПолучитьСвойстваКриптосообщенияПроверкаВходящихПараметров(Криптосообщение);
	
	Если ТипЗнч(Криптосообщение) = Тип("Строка") Тогда
		КриптосообщениеДвоичныеДанные = ПолучитьИзВременногоХранилища(Криптосообщение);
	Иначе
		КриптосообщениеДвоичныеДанные = Криптосообщение;
	КонецЕсли;
	
	СвойстваКриптосообщения = Новый Структура;
	СвойстваКриптосообщения.Вставить("Размер", КриптосообщениеДвоичныеДанные.Размер());
	СвойстваКриптосообщения.Вставить("Тип", "unknown");
	
	Попытка
		КриптосервисПрокси = СервисКриптографииПрокси();	
		
		Properties = КриптосервисПрокси.GetCryptoMessageProperties(КриптосообщениеДвоичныеДанные);	

		СвойстваКриптосообщения.Вставить("Тип", Properties.ContentType);	
			
		Получатели = ПолучитьСвойстваСертификатовИзXDTO(Properties.RecipientInfos);
		СвойстваКриптосообщения.Вставить("Получатели", Новый ФиксированныйМассив(Получатели));
		
		Подписанты = ПолучитьСвойстваСертификатовИзXDTO(Properties.SignerInfos);
		СвойстваКриптосообщения.Вставить("Подписанты", Новый ФиксированныйМассив(Подписанты));			
		
		Если Не ТолькоКлючевыеСвойства Тогда
			СвойстваКриптосообщения.Вставить("Сертификаты", Новый Массив);
			Для Каждого Certificate Из Properties.Certificates Цикл
				СвойстваКриптосообщения.Сертификаты.Добавить(Certificate);		
			КонецЦикла;
			СвойстваКриптосообщения.Сертификаты = Новый ФиксированныйМассив(СвойстваКриптосообщения.Сертификаты);
			
			СвойстваКриптосообщения.Вставить("Содержимое", Properties.Content);
		КонецЕсли;
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияСвойстваКриптосообщения(), ИнформацияОбОшибке(), СвойстваКриптосообщения);
	КонецПопытки;
		
	Возврат Новый ФиксированнаяСтруктура(СвойстваКриптосообщения);
	
КонецФункции

Функция ВычислитьИдентификаторСертификата(СерийныйНомер, Издатель) Экспорт
	
	СоответствиеИмяOID = СоответствиеИмяOID();
	Для Каждого Элемент Из Издатель Цикл
		Если СоответствиеИмяOID.Получить(Элемент.Представление) <> Неопределено Тогда
			Элемент.Представление = СоответствиеИмяOID.Получить(Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторСертификата(СерийныйНомер, Издатель);
	
КонецФункции

Функция ПолучитьСеансовыйКлюч(Идентификатор, ВременныйПароль) Экспорт
	
	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();
		
		Результат = Истина;
		
		МаркерБезопасности = СервисКриптографииПрокси.GetSecurityToken(Идентификатор, ВременныйПароль);
		
		МаркерыБезопасности = Новый Соответствие;
		Для Каждого ЭлементСоответствия Из ПараметрыСеанса.МаркерыБезопасности Цикл
			МаркерыБезопасности.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		
		МаркерыБезопасности[Идентификатор] = МаркерБезопасности;
		
		ПараметрыСеанса.МаркерыБезопасности = Новый ФиксированноеСоответствие(МаркерыБезопасности);		
		
		Возврат Результат;
	Исключение
		Параметры = Новый Структура("Идентификатор,ВременныйПароль,Тип",
									Идентификатор, ?(СтрДлина(ВременныйПароль) = 6, 999999, ВременныйПароль));
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияАутентификация(), ИнформацияОбОшибке(), Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСертификатыИзПодписи(Подпись) Экспорт
		
	ПолучитьСертификатыИзПодписиПроверкаВходящихПараметров(Подпись);
	
	Если ТипЗнч(Подпись) = Тип("Строка") Тогда
		ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(Подпись);
	Иначе
		ПодписьДвоичныеДанные = Подпись;
	КонецЕсли;
	
	СвойстваКриптосообщения = ПолучитьСвойстваКриптосообщения(ПодписьДвоичныеДанные);
	Если СвойстваКриптосообщения.Тип = "signedData" Тогда
		Возврат СвойстваКриптосообщения.Сертификаты;	
	Иначе
		ВызватьИсключение(НСтр("ru = 'Параметр <Подпись> не является файлом подписи'"));
	КонецЕсли;	
		
КонецФункции

Функция ХешированиеДанных(Данные, АлгоритмХеширования) Экспорт 
	
	ХешированиеДанныхПроверкаВходящихПараметров(Данные, АлгоритмХеширования);
	
	Попытка
		СервисКриптографииПрокси = СервисКриптографииПрокси();
		
		Если ТипЗнч(Данные) = Тип("Строка") Тогда
			Данные = ПолучитьИзВременногоХранилища(Данные);
		КонецЕсли;
		
		Результат = СервисКриптографииПрокси.HashData(Данные);
		
		Возврат Результат;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	
		Параметры = Новый Структура("Данные", Данные);
		ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытияХеширование(), ИнформацияОбОшибке, Параметры);
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция СервисКриптографииПрокси() 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Прокси = ОбщегоНазначения.WSПрокси(
		АдресWSDL(Константы.АдресКриптосервиса.Получить()),
		ПространствоИмен(),
		"CryptoService",
		СтрШаблон("CryptoService_%1", ВерсияПрограммногоИнтерфейса()),
		Неопределено,
		Неопределено,
		30);
		
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Прокси;		
	
КонецФункции

Функция АдресWSDL(URI) Экспорт
	
	Адрес = СтрЗаменить(СокрЛП(URI), "?wsdl", ""); 
	
	Возврат СтрШаблон("%1/%2?wsdl", Адрес, ВерсияПрограммногоИнтерфейса());
	
КонецФункции

Функция ВерсияПрограммногоИнтерфейса()
	
	Возврат "v2.1";
	
КонецФункции

Функция ПространствоИмен()
	
	Возврат "1c.services";
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытия, ИнформацияОбОшибке, Параметры)
	
	Комментарий = КомментарийПоИсключению(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Параметры);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Функция КомментарийПоИсключению(ПредставлениеОшибки, Параметры)
	
	ШаблонЗаписи = 
	"Параметры:
	|%1
	|
	|ПредставлениеОшибки:
	|%2";
	
	Возврат СтрШаблон(ШаблонЗаписи, СериализоватьЗначение(Параметры), СокрЛП(ПредставлениеОшибки));
		
КонецФункции

Функция СериализоватьЗначение(Значение)
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из Значение Цикл		
			Если ТипЗнч(КлючЗначение.Значение) = Тип("ДвоичныеДанные") Тогда
				Значение[КлючЗначение.Ключ] = КлючЗначение.Значение.Размер();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	
	Возврат Запись.Закрыть();
	
КонецФункции

#Область ПроверкаВходныхПараметров

Процедура ЗашифроватьПроверкаВходящихПараметров(Данные, Получатели, ТипШифрования, ПараметрыШифрования)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Зашифровать", 
		"Данные",
		Данные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Зашифровать", 
		"Получатели",
		Получатели, 
		Новый ОписаниеТипов("ДвоичныеДанные, Структура, ФиксированнаяСтруктура, Массив, ФиксированныйМассив"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Зашифровать", 
		"ТипШифрования",
		ТипШифрования, 
		Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипШифрования = "CMS",
		НСтр("ru = 'Недопустимое значение параметра ТипШифрования (неизвестный тип шифрования)'"), 
		"СервисКриптографии.Зашифровать");
	
	Если ЗначениеЗаполнено(ПараметрыШифрования) Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.Зашифровать", 
			"ПараметрыШифрования",
			ПараметрыШифрования, 
			Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура"));
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Данные),
			НСтр("ru = 'Недопустимое значение параметра Данные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.Зашифровать");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПроверкаВходящихПараметров(Данные, Подписант, ТипПодписи, ПараметрыПодписания)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Подписать", 
		"Данные",
		Данные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Подписать", 
		"Подписант",
		Подписант, 
		Новый ОписаниеТипов("ДвоичныеДанные, Структура, ФиксированнаяСтруктура"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Подписать", 
		"ТипПодписи",
		ТипПодписи, 
		Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипПодписи = "CMS" ИЛИ ТипПодписи = "GOST3410",
		НСтр("ru = 'Недопустимое значение параметра ТипПодписи (неизвестный тип подписи)'"), 
		"СервисКриптографии.Подписать");
	
	Если ЗначениеЗаполнено(ПараметрыПодписания) Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.Подписать", 
			"ПараметрыПодписания",
			ПараметрыПодписания, 
			Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура"));
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Данные),
			НСтр("ru = 'Недопустимое значение параметра Данные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.Подписать");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьСвойстваКриптосообщенияПроверкаВходящихПараметров(Криптосообщение)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПолучитьСвойстваКриптосообщения", 
		"Криптосообщение",
		Криптосообщение, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	Если ТипЗнч(Криптосообщение) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Криптосообщение),
			НСтр("ru = 'Недопустимое значение параметра Криптосообщение (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ПолучитьСвойстваКриптосообщения");
	КонецЕсли;
		
КонецПроцедуры

Процедура РасшифроватьПроверкаВходящихПараметров(ЗашифрованныеДанные, ТипШифрования, ПараметрыШифрования)
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Расшифровать", 
		"ЗашифрованныеДанные",
		ЗашифрованныеДанные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.Расшифровать", 
		"ТипШифрования",
		ТипШифрования, 
		Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипШифрования = "CMS",
		НСтр("ru = 'Недопустимое значение параметра ТипШифрования (неизвестный тип шифрования)'"), 
		"СервисКриптографии.Расшифровать");
	
	Если ЗначениеЗаполнено(ПараметрыШифрования) Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.Расшифровать", 
			"ПараметрыШифрования",
			ПараметрыШифрования, 
			Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура"));
	КонецЕсли;
	
	Если ТипЗнч(ЗашифрованныеДанные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(ЗашифрованныеДанные),
			НСтр("ru = 'Недопустимое значение параметра ЗашифрованныеДанные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.Расшифровать");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьПодписьПроверкаВходящихПараметров(Подпись, Данные, ТипПодписи, ПараметрыПодписания)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПроверитьПодпись", 
		"Подпись",
		Подпись, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	Если ЗначениеЗаполнено(ПараметрыПодписания) Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.ПроверитьПодпись", 
			"ПараметрыПодписания",
			ПараметрыПодписания, 
			Новый ОписаниеТипов("Структура, ФиксированнаяСтруктура"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыПодписания)
		ИЛИ Не ПараметрыПодписания.Свойство("ОтсоединеннаяПодпись")
		ИЛИ Не ПараметрыПодписания.ОтсоединеннаяПодпись Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"СервисКриптографии.ПроверитьПодпись", 
			"Данные",
			Данные, 
			Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПроверитьПодпись", 
		"ТипПодписи",
		ТипПодписи, 
		Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипПодписи = "CMS" ИЛИ ТипПодписи = "GOST3410",
		НСтр("ru = 'Недопустимое значение параметра ТипПодписи (неизвестный тип подписи)'"), 
		"СервисКриптографии.ПроверитьПодпись");
	
	Если ТипЗнч(Подпись) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Подпись),
			НСтр("ru = 'Недопустимое значение параметра Подпись (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ПроверитьПодпись");
	КонецЕсли;
		
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Данные),
			НСтр("ru = 'Недопустимое значение параметра Данные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ПроверитьПодпись");
	КонецЕсли;
	
	Если ТипПодписи = "GOST3410" Тогда 
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЗначениеЗаполнено(ПараметрыПодписания) И ПараметрыПодписания.Свойство("Сертификат"),
			НСтр("ru = 'Для проверки подписи по ГОСТ Р 34.10-94 необходимо указание сертификата'"), 
			"СервисКриптографии.ПроверитьПодпись");
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьСертификатПроверкаВходящихПараметров(Сертификат)
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПроверитьСертификат", 
		"Сертификат",
		Сертификат, 
		Новый ОписаниеТипов("ДвоичныеДанные"));
		
КонецПроцедуры

Процедура ПолучитьСвойстваСертификатаПроверкаВходящихПараметров(Сертификат)
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПолучитьСвойстваСертификата", 
		"Сертификат",
		Сертификат, 
		Новый ОписаниеТипов("ДвоичныеДанные"));
		
КонецПроцедуры

Процедура ПолучитьСертификатыИзПодписиПроверкаВходящихПараметров(Подпись)
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ПолучитьСертификатыИзПодписи", 
		"Подпись",
		Подпись, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	Если ТипЗнч(Подпись) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Подпись),
			НСтр("ru = 'Недопустимое значение параметра Подпись (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ПолучитьСертификатыИзПодписи");
	КонецЕсли;
		
КонецПроцедуры

Процедура ХешированиеДанныхПроверкаВходящихПараметров(Данные, АлгоритмХеширования)

	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"СервисКриптографии.ХешированиеДанных", 
		"Данные",
		Данные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЭтоАдресВременногоХранилища(Данные),
			НСтр("ru = 'Недопустимое значение параметра Данные (указан адрес, который не является адресом временного хранилища)'"), 
			"СервисКриптографии.ХешированиеДанных");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		АлгоритмХеширования = "GOST R 34.11-94",
		НСтр("ru = 'Недопустимое значение параметра АлгоритмХеширования (неизвестный алгоритм хеширования)'"), 
		"СервисКриптографии.ХешированиеДанных");
	
КонецПроцедуры

#КонецОбласти

Функция ПреобразоватьOID(СписокOID)
	
	Свойства = Новый Структура;
	Для Каждого RDN Из СписокOID Цикл
		Свойства.Вставить(ПолучитьИмяПоOID(RDN.OID), RDN.Value);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

Функция РасширенныеСвойстваСертификата(СписокOID)
	
	EKU = Новый Массив;
	Для Каждого OID Из СписокOID Цикл
		Имя = ПолучитьИмяПоOID(OID, "");
		Если ЗначениеЗаполнено(Имя) Тогда
			EKU.Добавить(СтрШаблон("%1 (%2)", Имя, OID));
		Иначе
			EKU.Добавить(OID);
		КонецЕсли;
	КонецЦикла;

	EKU = Новый ФиксированныйМассив(EKU);
	
	Возврат Новый ФиксированнаяСтруктура(Новый Структура("EKU", EKU));
	
КонецФункции

Функция ПолучитьИмяПоOID(OID, ИмяПоУмолчанию = Неопределено)
	
	Имя = СоответствиеOIDИмя().Получить(OID);
	Если Имя = Неопределено Тогда
		Если ИмяПоУмолчанию <> Неопределено Тогда
			Имя = ИмяПоУмолчанию;
		Иначе
			Имя = "_" + СтрЗаменить(OID, ".", "_");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

Функция СоответствиеOIDИмя()
	
	СоответствиеOID = Новый Соответствие;
	СоответствиеOID.Вставить("2.5.4.3", "CN"); // commonName
	СоответствиеOID.Вставить("2.5.4.6", "C"); // countryName
	СоответствиеOID.Вставить("2.5.4.8", "ST"); // stateOrProvinceName
	СоответствиеOID.Вставить("2.5.4.7", "L"); // localityName
	СоответствиеOID.Вставить("2.5.4.9", "STREET"); // streetAddress
	СоответствиеOID.Вставить("2.5.4.10", "O"); // organizationName
	СоответствиеOID.Вставить("2.5.4.11", "OU"); // organizationUnitName
	СоответствиеOID.Вставить("2.5.4.12", "T"); // title
	СоответствиеOID.Вставить("1.2.643.100.1", "OGRN"); // ОГРН
	СоответствиеOID.Вставить("1.2.643.100.5", "OGRNIP"); // ОГРНИП
	СоответствиеOID.Вставить("1.2.643.100.3", "SNILS"); // СНИЛС
	СоответствиеOID.Вставить("1.2.643.3.131.1.1", "INN"); // ИНН
	СоответствиеOID.Вставить("1.2.840.113549.1.9.1", "E"); // emailAddress	
	СоответствиеOID.Вставить("2.5.4.4", "SN"); // surname
	СоответствиеOID.Вставить("2.5.4.42", "GN"); // givenName
	
	Возврат СоответствиеOID;
	
КонецФункции

Функция СоответствиеИмяOID()
	
	СоответствиеOID = Новый Соответствие;
	СоответствиеOID.Вставить("CN", "2.5.4.3"); // commonName
	СоответствиеOID.Вставить("C", "2.5.4.6"); // countryName
	СоответствиеOID.Вставить("ST", "2.5.4.8"); // stateOrProvinceName
	СоответствиеOID.Вставить("L", "2.5.4.7"); // localityName
	СоответствиеOID.Вставить("STREET", "2.5.4.9"); // streetAddress
	СоответствиеOID.Вставить("O", "2.5.4.10"); // organizationName
	СоответствиеOID.Вставить("OU", "2.5.4.11"); // organizationUnitName
	СоответствиеOID.Вставить("T", "2.5.4.12"); // title
	СоответствиеOID.Вставить("OGRN", "1.2.643.100.1"); // ОГРН
	СоответствиеOID.Вставить("OGRNIP", "1.2.643.100.5"); // ОГРНИП
	СоответствиеOID.Вставить("SNILS", "1.2.643.100.3"); // СНИЛС
	СоответствиеOID.Вставить("INN", "1.2.643.3.131.1.1"); // ИНН
	СоответствиеOID.Вставить("E", "1.2.840.113549.1.9.1"); // emailAddress	
	СоответствиеOID.Вставить("SN", "2.5.4.4"); // surname
	СоответствиеOID.Вставить("GN", "2.5.4.42"); // givenName
	
	Возврат СоответствиеOID;
	
КонецФункции

Функция ВычислитьИдентификаторСертификатаXDTO(CertificateProperties)
	
	Свойства = Новый СписокЗначений;
	Для Каждого RDN Из CertificateProperties.Issuer Цикл
		Свойства.Добавить(RDN.Value, RDN.OID);
	КонецЦикла;
	
	Возврат ИдентификаторСертификата(CertificateProperties.SerialNumber, Свойства)
	
КонецФункции

Функция ИдентификаторСертификата(СерийныйНомер, СписокOID)
	
	Ключи = СтрРазделить("2.5.4.3,2.5.4.4,2.5.4.6,2.5.4.7,2.5.4.8,2.5.4.10,2.5.4.11,2.5.4.12,2.5.4.42,1.2.840.113549.1.9.1", ",");
	Свойства = Новый СписокЗначений;
	Для Каждого Элемент Из СписокOID Цикл
		Если Ключи.Найти(Элемент.Представление) <> Неопределено Тогда
			Свойства.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	СерийныйНомерСтрока = НРег(СтрЗаменить(СерийныйНомер, " ", ""));
	
	Свойства.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	МассивЗначений = Свойства.ВыгрузитьЗначения();
	
	МассивЗначений.Добавить(СерийныйНомерСтрока);
	
	ИздательИСерийныйНомер = СтрСоединить(МассивЗначений, "#");
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ИздательИСерийныйНомер);
	
	Возврат НРег(СтрЗаменить(Хеширование.ХешСумма, " ", ""));	
	
КонецФункции

Функция НаименованиеСертификата(СписокOID)
	
	Для Каждого ЭлементOID Из СписокOID Цикл
		Если ЭлементOID.OID = "2.5.4.3" Тогда
			Возврат ЭлементOID.Value;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСвойстваСертификатовИзXDTO(SerialAndIssuerCollection)
	
	Сертификаты = Новый Массив;
	
	Для Каждого Item Из SerialAndIssuerCollection Цикл
		Если Item.Свойства().Получить("SerialAndIssuer") <> Неопределено Тогда
			SerialAndIssuer = Item.SerialAndIssuer;
			Идентификатор = Item.CertificateID;
		Иначе
			SerialAndIssuer = Item;
		КонецЕсли;
		Сертификат = Новый Структура;
		Сертификат.Вставить("СерийныйНомер", SerialAndIssuer.SerialNumber);
		Сертификат.Вставить("Издатель", ПреобразоватьOID(SerialAndIssuer.Issuer));
		
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			Сертификат.Вставить("Идентификатор", Идентификатор);
		КонецЕсли;
		
		Сертификаты.Добавить(Сертификат);
	КонецЦикла;
	
	Возврат Сертификаты;

КонецФункции

#Область ИменаСобытий

Функция ИмяСобытияШифрование()
	
	Возврат НСтр("ru = 'Сервис криптографии.Шифрование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияСвойстваСертификата()
	
	Возврат НСтр("ru = 'Сервис криптографии.Свойства сертификата'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияСвойстваКриптосообщения()
	
	Возврат НСтр("ru = 'Сервис криптографии.Свойства криптосообщения'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияАутентификация()
	
	Возврат НСтр("ru = 'Сервис криптографии.Аутентификация'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияПроверкаПодписи()
	
	Возврат НСтр("ru = 'Сервис криптографии.Проверка подписи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияПроверкаСертификата()
	
	Возврат НСтр("ru = 'Сервис криптографии.Проверка сертификата'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияРасшифровка()
	
	Возврат НСтр("ru = 'Сервис криптографии.Расшифровка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияХеширование()
	
	Возврат НСтр("ru = 'Сервис криптографии.Хеширование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияПодписание()
	
	Возврат НСтр("ru = 'Сервис криптографии.Подписание'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти