#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ПроверяемаяПодсистема, КаталогВыгрузки, СоответствиеТерминов, ДеревоПодсистем,
	СоответствиеОбъектов, ДопустимыеМетаданные, ИсправлятьОшибки, ЗагружаемыеФайлы;

#Область ПрограммныйИнтерфейс

// Выполняет проверку внедрения. Заполняет табличную часть ТаблицаПроверки.
//
// Параметры:
//   КаталогВыгрузкиКонфигурации - Строка - Каталог выгрузки конфигурации в XML файлы.
//   ПараметрыПроверки - Структура со свойствами:
//      * РасширениеФайлаПроверки  - Строка - Возможные значения "xml" и "txt". При указании расширения результат
//                                            проверки записывается во временный файл с указанным расширением.
//      * ПолныйПутьКФайлуПроверки - Строка - Полное имя файла проверки с расширением.
//      * РезультатСтрокой         - Булево - Функция возвращает текст ошибок в виде строки. Вид строки зависит от расширения.
//      * ИсправлятьОшибки         - Булево - Признак необходимости исправления части ошибок автоматически.
//
// ВозвращаемоеЗначение:
//   Строка - Если заполнен входящий параметр ПараметрыПроверки, то возвращается имя файла проверки или текст ошибок.
//
Функция ПроверитьВнедрение(КаталогВыгрузкиКонфигурации = "", ПараметрыПроверки = Неопределено) Экспорт
	
	ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиКонфигурации);
	
	ЗаполнитьДанныеДляПроверки(ПараметрыПроверки);
	
	ПроверяемыеПодсистемы = Новый Массив;
	ПриОпределенииПроверяемыхПодсистем(ПроверяемыеПодсистемы);
	
	Для Каждого Подсистема Из ПроверяемыеПодсистемы Цикл
		ПроверяемаяПодсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(Подсистема);
		Если ПроверяемаяПодсистема <> Неопределено Тогда
			ШаблонИмени = "Подключаемый_[ИмяПодсистемы]_ПроверитьВнедрение()";
			ИмяПроцедуры = СтрЗаменить(ШаблонИмени, "[ИмяПодсистемы]", Подсистема);
			Попытка
				Выполнить(ИмяПроцедуры);
			Исключение
				ДобавитьОшибку(ПроверяемаяПодсистема, НСтр("ru = 'Проверка внедрения подсистемы не выполнена:'"), ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(КаталогВыгрузкиКонфигурации) Тогда
		ЗагрузитьКонфигурациюИзXML();
		УдалитьФайлы(КаталогВыгрузки);
	КонецЕсли;
	
	Возврат РезультатПроверки(ПараметрыПроверки);
	
КонецФункции

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - см. возвращаемое значение
//       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   Форма - УправляемаяФорма, Неопределено - Форма отчета.
//   СвойстваНастройки - Структура - Описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов -
//           Тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений -
//           Объекты, которые будут предложены пользователю в списке выбора.
//           Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос -
//           Возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево -
//           Когда Истина, то выбор пользователя будет ограничен значениями,
//           указанными в ЗначенияДляВыбора (его конечным состоянием).
//
// См. также:
//   ОтчетыПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	ИмяПоля = Строка(СвойстваНастройки.ПолеКД);
	Если ИмяПоля = "ПодсистемаБСП" Тогда
		СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
		СвойстваНастройки.ЗначенияДляВыбора.Очистить();
		ИменаПодсистем = Новый Массив;
		ПриОпределенииПроверяемыхПодсистем(ИменаПодсистем);
		Для Каждого Имя Из ИменаПодсистем Цикл
			Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(Имя);
			СвойстваНастройки.ЗначенияДляВыбора.Добавить(Подсистема.Представление());
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриОпределенииПроверяемыхПодсистем(ПроверяемыеПодсистемы)
	
	ПроверяемыеПодсистемы.Добавить("БизнесПроцессыИЗадачи");
	ПроверяемыеПодсистемы.Добавить("ВариантыОтчетов");
	ПроверяемыеПодсистемы.Добавить("ВерсионированиеОбъектов");
	ПроверяемыеПодсистемы.Добавить("ДатыЗапретаИзменения");
	ПроверяемыеПодсистемы.Добавить("ДополнительныеОтчетыИОбработки");
	ПроверяемыеПодсистемы.Добавить("ЗаметкиПользователя");
	ПроверяемыеПодсистемы.Добавить("ЗаполнениеОбъектов");
	ПроверяемыеПодсистемы.Добавить("ЗапретРедактированияРеквизитовОбъектов");
	ПроверяемыеПодсистемы.Добавить("КонтактнаяИнформация");
	ПроверяемыеПодсистемы.Добавить("НапоминанияПользователя");
	ПроверяемыеПодсистемы.Добавить("НастройкаПорядкаЭлементов");
	ПроверяемыеПодсистемы.Добавить("ОбменДанными");
	ПроверяемыеПодсистемы.Добавить("ОбновлениеВерсииИБ");
	ПроверяемыеПодсистемы.Добавить("Печать");
	ПроверяемыеПодсистемы.Добавить("Пользователи");
	ПроверяемыеПодсистемы.Добавить("ПрефиксацияОбъектов");
	ПроверяемыеПодсистемы.Добавить("ПрисоединенныеФайлы");
	ПроверяемыеПодсистемы.Добавить("РаботаВМоделиСервиса");
	ПроверяемыеПодсистемы.Добавить("РассылкаОтчетов");
	ПроверяемыеПодсистемы.Добавить("Свойства");
	ПроверяемыеПодсистемы.Добавить("СтруктураПодчиненности");
	ПроверяемыеПодсистемы.Добавить("УправлениеДоступом");
	ПроверяемыеПодсистемы.Добавить("ШаблоныСообщений");
	
КонецПроцедуры

Процедура Подключаемый_БизнесПроцессыИЗадачи_ПроверитьВнедрение()
	
	// Проверка предметов заданий
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("БизнесПроцессы.Задание.ВводитсяНаОсновании",,, "Задача.ЗадачаИсполнителя"));
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметЗадачи.Тип"));
	СравнитьТипы(МассивИсточников);
	
	// Проверка наличия вставок кода в модулях менеджеров бизнес процессов.
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("Функция ФормаВыполненияЗадачи(");
	ПроверяемыеВызовы.Добавить("Процедура ПриПеренаправленииЗадачи(");
	ПроверяемыеВызовы.Добавить("Процедура ОбработкаВыполненияПоУмолчанию(");
	
	ПроверитьНаличиеВставкиКода("ОпределяемыеТипы.БизнесПроцесс.Тип", "МодульМенеджера", ПроверяемыеВызовы);
	
	// Проверка наличия предопределенного элемента ОтветственныйЗаКонтрольИсполнения в справочнике РолиИсполнителей.
	ПроверитьНаличиеПредопределенногоЭлемента("Справочники.РолиИсполнителей", "ОтветственныйЗаКонтрольИсполнения");
	
	// Проверка наличия предопределенного элемента ВсеОбъектыАдресации в ПВХ ОбъектыАдресацииЗадач.
	ПроверитьНаличиеПредопределенногоЭлемента("ПланыВидовХарактеристик.ОбъектыАдресацииЗадач", "ВсеОбъектыАдресации");
	
	// Проверка соответствия типов предопределенного объекта ВсеОбъектыАдресации и типов других объектов адресации.
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Тип"));
	
	МассивМетаданных = Новый Массив;
	Для Каждого Тип Из ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации.ТипЗначения.Типы() Цикл
		МассивМетаданных.Добавить(Метаданные.НайтиПоТипу(Тип));
	КонецЦикла;
	МассивИсточников.Добавить(СоставТипа("ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации",
		МассивМетаданных));
	
	МетаданныеОбъектовАдресации = Метаданные.ПланыВидовХарактеристик.ОбъектыАдресацииЗадач;
	ПредопределенныеОбъектыАдресации = МетаданныеОбъектовАдресации.ПолучитьИменаПредопределенных();
	МассивПредопределенных = Новый Массив;
	Для Каждого ИмяПредопределенногоЭлемента Из ПредопределенныеОбъектыАдресации Цикл
		Если ИмяПредопределенногоЭлемента = "ВсеОбъектыАдресации" Тогда
			Продолжить;
		КонецЕсли;
		ПредопределенныйЭлемент = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач[ИмяПредопределенногоЭлемента];
		Для Каждого Тип Из ПредопределенныйЭлемент.ТипЗначения.Типы() Цикл
			МассивПредопределенных.Добавить(Метаданные.НайтиПоТипу(Тип));
		КонецЦикла;
	КонецЦикла;
	
	Если МассивМетаданных.Количество() <> 1 И МассивПредопределенных.Количество() <> 0 Тогда
		// Если используется более одного объекта авторизации.
		МассивИсточников.Добавить(СоставТипа(НСтр("ru = 'Типы предопределенных объектов адресации'"), МассивПредопределенных));
	КонецЕсли;
	
	СравнитьТипы(МассивИсточников);
	
	// Если есть хотя бы один объект адресации, то должна быть роль, в которой используются объекты адресации.
	Если МассивМетаданных.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РолиИсполнителей.Наименование
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Предопределенный = ИСТИНА
		|	И РолиИсполнителей.ИспользуетсяСОбъектамиАдресации = ИСТИНА
		|	И РолиИсполнителей.ТипыОсновногоОбъектаАдресации <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации)";
		
		ВыборкаРолей = Запрос.Выполнить();
		Если ВыборкаРолей.Пустой() Тогда
			ДобавитьОшибку(Метаданные.Справочники.РолиИсполнителей, НСтр("ru = 'Отсутствуют роли, использующие объекты адресации'"),
				НСтр("ru = 'В конфигурации имеются объекты адресации задач, но нет ни одной роли, которая бы их использовала
				|(реквизит ИспользуетсяСОбъектамиАдресации).'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ВариантыОтчетов_ПроверитьВнедрение()
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	
	Кэш = Новый Структура("ФлажокОсновнойФормы, ФлажокФормыНастроек");
	ДеревоВариантов = МодульВариантыОтчетов.ДеревоПредопределенных("Внутренний");
	
	Для Каждого СтрокаОтчет Из ДеревоВариантов.Строки Цикл
		
		Если СтрокаОтчет.Объект = Неопределено Тогда
			ОтчетМенеджер = Отчеты[СтрокаОтчет.Метаданные.Имя];
			Попытка
				СтрокаОтчет.Объект = ОтчетМенеджер.Создать();
			Исключение
				ДобавитьОшибку(
					СтрокаОтчет.Метаданные,
					НСтр("ru = 'Не удалось создать отчет'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		ВариантыОтчетов_ПроверитьПодключениеКФормамОтчета(Кэш, СтрокаОтчет);
		
		ВариантыОтчетов_ПроверитьИспользованиеУстаревшихСвойств(Кэш, СтрокаОтчет);
		
		Для Каждого СтрокаВариант Из СтрокаОтчет.Строки Цикл
			МодульВариантыОтчетов.ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет);
			ВариантыОтчетов_ПроверитьНастройкиДляПоиска(Кэш, СтрокаОтчет, СтрокаВариант);
		КонецЦикла;
		
	КонецЦикла;
	
	// Для платформы (очистка коллекции вручную для освобождение памяти от цикличных ссылок).
	ДеревоВариантов.Колонки.Очистить();
	ДеревоВариантов.Строки.Очистить();
	
	ВариантыОтчетов_ПроверитьРазмещениеОтчетовВКомандномИнтерфейсе();
	
КонецПроцедуры

Процедура Подключаемый_ВерсионированиеОбъектов_ПроверитьВнедрение()
	
	// Сравнение состава типов
	СоставВерсионируемыеДанные = СоставТипа("ОпределяемыеТипы.ВерсионируемыеДанные.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных");
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставВерсионируемыеДанные);
	
	СоставПодписок = Новый Массив;
	СоставПодписок.Добавить(СоставТипа("ОпределяемыеТипы.ВерсионируемыеДанныеОбъект.Тип",, "ВсеКромеДокументов", "Справочник.ИдентификаторыОбъектовМетаданных"));
	СоставПодписок.Добавить(СоставПодписокПоОбработчику("ВерсионированиеОбъектовСобытия.ЗаписатьВерсиюДокумента", "Документы"));
	МассивИсточников.Добавить(ОбъединитьТипы(СоставПодписок));
	СравнитьТипы(МассивИсточников);
	
	// Проверка наличия вставок кода.
	ПроверитьНаличиеВставкиКода(СоставВерсионируемыеДанные, "ОсновнаяФормаОбъекта", "ВерсионированиеОбъектов.ПриСозданииНаСервере(");
	
КонецПроцедуры

Процедура Подключаемый_ДатыЗапретаИзменения_ПроверитьВнедрение()
	
	МассивМетаданных = Новый Массив;
	ИменаПредопределенныхДанных = Метаданные.ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПолучитьИменаПредопределенных();
	
	ИсточникиДанных = Новый ТаблицаЗначений;
	ИсточникиДанных.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("ПолеДаты",    Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("Раздел",      Новый ОписаниеТипов("Строка"));
	ИсточникиДанных.Колонки.Добавить("ПолеОбъекта", Новый ОписаниеТипов("Строка"));
	
	ИнтеграцияСтандартныхПодсистем.ПриЗаполненииИсточниковДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияПереопределяемый").ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	КраткоеПредставлениеОшибки = НСтр("ru = 'Некорректно заполнена процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения'");
	
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИсточникДанных.Таблица);
		ОбъектМетаданныхСуществует = Истина;
		Если ОбъектМетаданных = Неопределено Тогда
			ОбъектМетаданныхСуществует = Ложь;
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый, КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения из модуля 
				|ДатыЗапретаИзмененияПереопределяемый указан объект метаданных ""%1"", отсутствующий в конфигурации.'"), ИсточникДанных.Таблица));
		КонецЕсли;
		
		Если ОбъектМетаданныхСуществует Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
		
		// Проверка поля ПолеДаты. Оно всегда должно быть заполнено.
		Если ПустаяСтрока(ИсточникДанных.ПолеДаты) Тогда
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый, КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения из модуля 
				|ДатыЗапретаИзмененияПереопределяемый для объекта ""%1"" не заполнено поле ""ПолеДаты"".'"), ИсточникДанных.Таблица));
		ИначеЕсли ОбъектМетаданныхСуществует Тогда
			ПроверитьПолеЗапретаИзменения(ИсточникДанных, ОбъектМетаданных, "ПолеДаты");
		КонецЕсли;
		
		// Проверка поля ПолеОбъекта. Оно может быть пустым.
		Если Не ПустаяСтрока(ИсточникДанных.ПолеОбъекта) И ОбъектМетаданныхСуществует Тогда
			ПроверитьПолеЗапретаИзменения(ИсточникДанных, ОбъектМетаданных, "ПолеОбъекта");
		КонецЕсли;
		
		// Проверка поля Раздел. Оно может быть пустым, только если не заполнено поле ПолеОбъекта.
		Если ПустаяСтрока(ИсточникДанных.Раздел) И Не ПустаяСтрока(ИсточникДанных.ПолеОбъекта) Тогда
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый, КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения из модуля 
				|ДатыЗапретаИзмененияПереопределяемый для объекта ""%1"" не заполнено поле ""Раздел"" и заполнено поле ""ПолеОбъекта"".
				|Поле ""Раздел"" может быть пустым только при незаполненном поле ""ПолеОбъекта"".'"), ИсточникДанных.Таблица));
		ИначеЕсли Не ПустаяСтрока(ИсточникДанных.Раздел) И ИменаПредопределенныхДанных.Найти(ИсточникДанных.Раздел) = Неопределено Тогда
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый, КраткоеПредставлениеОшибки,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения из модуля 
				|ДатыЗапретаИзмененияПереопределяемый указан раздел ""%1"", отсутствующий в предопределенных
				|элементах ПланВидовХарактеристик.РазделыДатЗапретаИзменения.'"), ИсточникДанных.Раздел));
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка соответствия состава типов
	ИсточникиДанных = СоставТипа("ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения", МассивМетаданных);
	
	СоставПодписокДляСправочников = СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписью", "Справочники");
	
	СоставПодписокДляДокументов = СоставПодписокПоОбработчику(ВариантыВызова(
		"ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента",
		"ЗащитаПерсональныхДанных.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента"), "Документы");
	
	МассивПодписок = Новый Массив;
	МассивПодписок.Добавить(СоставПодписокДляСправочников);
	МассивПодписок.Добавить(СоставПодписокДляДокументов);
	МассивПодписок.Добавить(СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписей", "РегистрыСведений,РегистрыНакопления"));
	МассивПодписок.Добавить(СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраБухгалтерии", "РегистрыБухгалтерии"));
	МассивПодписок.Добавить(СоставПодписокПоОбработчику("ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюНабораЗаписейРегистраРасчета", "РегистрыРасчета"));
	СоставПодписок = ОбъединитьТипы(МассивПодписок);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставПодписок);
	МассивИсточников.Добавить(ИсточникиДанных);
	СравнитьТипы(МассивИсточников);
	
	// Проверка состава типов подписки ПроверитьДатуЗапретаИзмененияПередУдалением.
	
	МассивПодписок = Новый Массив;
	МассивПодписок.Добавить(СоставПодписокДляСправочников);
	МассивПодписок.Добавить(СоставПодписокДляДокументов);
	СоставСсылочныхПодписок = ОбъединитьТипы(МассивПодписок);
	
	СоставПодписокПередУдалением = СоставПодписокПоОбработчику(ВариантыВызова(
		"ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередУдалением",
		"ЗащитаПерсональныхДанных.ПроверитьДатуЗапретаИзмененияПередУдалением"));
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставСсылочныхПодписок);
	МассивИсточников.Добавить(СоставПодписокПередУдалением);
	СравнитьТипы(МассивИсточников);
	
	// Проверка наличия вставок кода.
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта", "ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(",, Ложь);
	
КонецПроцедуры

Процедура Подключаемый_ДополнительныеОтчетыИОбработки_ПроверитьВнедрение()
	
	// Проверка наличия вставок кода.
	ОбъектСДополнительнымиКомандами = СоставТипа("ОпределяемыеТипы.ОбъектСДополнительнымиКомандами.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных");
	СтрокаКода = "ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(";
	
	ПроверитьНаличиеВставкиКода(ОбъектСДополнительнымиКомандами, "ОсновнаяФормаОбъекта", СтрокаКода);
	ПроверитьНаличиеВставкиКода(ОбъектСДополнительнымиКомандами, "ОсновнаяФормаСписка", СтрокаКода);
	
	// Проверка наличия строки вызова в командах.
	ПроверитьВстраиваниеГлобальныхОтчетовОбработок(Истина); // Отчеты
	ПроверитьВстраиваниеГлобальныхОтчетовОбработок(Ложь); // Обработки
	
КонецПроцедуры

Процедура Подключаемый_ЗаметкиПользователя_ПроверитьВнедрение()
	
	// Сравнение состава типов
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметЗаметок.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметЗаметокОбъект.Тип",,, "Справочник.Пользователи"));
	
	СоставПодписок = Новый Массив;
	СоставПодписок.Добавить(СоставПодписокПоОбработчику("ЗаметкиПользователя.УстановитьСтатусИзмененияПометкиУдаленияОбъекта", "ВсеКромеДокументов", "Справочник.Пользователи"));
	СоставПодписок.Добавить(СоставПодписокПоОбработчику("ЗаметкиПользователя.УстановитьСтатусИзмененияПометкиУдаленияДокумента", "Документы"));
	МассивИсточников.Добавить(ОбъединитьТипы(СоставПодписок));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_ЗаполнениеОбъектов_ПроверитьВнедрение()
	ПодключенныеОбъекты = Новый Соответствие;
	
	Состав = Метаданные.Подсистемы.ПодключаемыеОтчетыИОбработки.Состав;
	Для Каждого ОбъектМетаданныхПоставщика Из Состав Цикл
		ПолноеИмяПоставщика = ОбъектМетаданныхПоставщика.ПолноеИмя();
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		Настройки = МодульПодключаемыеКоманды.НастройкиПоставщика(ПолноеИмяПоставщика);
		Если Настройки = Неопределено Или Не Настройки.ДобавитьКомандыЗаполнения Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ЦелевойОбъектМетаданных Из Настройки.Размещение Цикл
			МассивПоставщиков = ПодключенныеОбъекты[ЦелевойОбъектМетаданных];
			Если МассивПоставщиков = Неопределено Тогда
				МассивПоставщиков = Новый Массив;
				ПодключенныеОбъекты.Вставить(ЦелевойОбъектМетаданных, МассивПоставщиков);
			КонецЕсли;
			ПредставлениеПоставщика = ПредставлениеОбъектаМетаданных(ОбъектМетаданныхПоставщика);
			Если МассивПоставщиков.Найти(ПредставлениеПоставщика) = Неопределено Тогда
				МассивПоставщиков.Добавить(ПредставлениеПоставщика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Код_ПриСозданииНаСервере      = "ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);";
	Код_ВыполнитьКоманду          = "ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда,";
	Код_ВыполнитьКомандуНаСервере = "ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст,";
	
	ВидыОбъектовМетаданныхСФормами = "БизнесПроцессы, Документы, ЖурналыДокументов,
		|Задачи, Обработки, Отчеты, Перечисления,
		|ПланыВидовРасчета, ПланыВидовХарактеристик, ПланыОбмена, ПланыСчетов,
		|РегистрыБухгалтерии, РегистрыНакопления, РегистрыРасчета, РегистрыСведений,
		|Справочники, ХранилищаНастроек";
	МассивВидов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(ВидыОбъектовМетаданныхСФормами), ",", Истина, Истина);
	Для Каждого ВидВоМножественномЧисле Из МассивВидов Цикл
		КоллекцияОбъектовМетаданных = Метаданные[ВидВоМножественномЧисле];
		Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданных Цикл
			
			ТекстМодуляМенеджера = ТекстМодуля(ОбъектМетаданных, "МодульМенеджера");
			ТекстПроцедурыДобавитьКомандыЗаполнения = ТекстПроцедуры("ДобавитьКомандыЗаполнения", ТекстМодуляМенеджера);
			ЕстьПроцедураДобавитьКомандыЗаполнения = ТекстПроцедурыДобавитьКомандыЗаполнения <> "";
			ПодключенныеФормы = Новый Массив;
			
			Для Каждого МетаданныеФормы Из ОбъектМетаданных.Формы Цикл // Тип "ОбъектМетаданных: Форма".
				
				ТекстМодуляФормы = ТекстМодуля(ОбъектМетаданных, МетаданныеФормы.Имя);
				
				ТекстПроцедуры_ПриСозданииНаСервере                   = ТекстПроцедуры("ПриСозданииНаСервере",                   ТекстМодуляФормы);
				ТекстПроцедуры_Подключаемый_ВыполнитьКоманду          = ТекстПроцедуры("Подключаемый_ВыполнитьКоманду",          ТекстМодуляФормы);
				ТекстПроцедуры_Подключаемый_ВыполнитьКомандуНаСервере = ТекстПроцедуры("Подключаемый_ВыполнитьКомандуНаСервере", ТекстМодуляФормы);
				
				ЕстьВызов_ПриСозданииНаСервере    = СтрНайти(ТекстПроцедуры_ПриСозданииНаСервере,                   Код_ПриСозданииНаСервере) > 0;
				ЕстьВызов_ВыполнитьКоманду_Клиент = СтрНайти(ТекстПроцедуры_Подключаемый_ВыполнитьКоманду,          Код_ВыполнитьКоманду) > 0;
				ЕстьВызов_ВыполнитьКоманду_Сервер = СтрНайти(ТекстПроцедуры_Подключаемый_ВыполнитьКомандуНаСервере, Код_ВыполнитьКомандуНаСервере) > 0;
				
				ЕстьПроцедура_Подключаемый_ВыполнитьКоманду          = ЗначениеЗаполнено(ТекстПроцедуры_Подключаемый_ВыполнитьКоманду);
				ЕстьПроцедура_Подключаемый_ВыполнитьКомандуНаСервере = ЗначениеЗаполнено(ТекстПроцедуры_Подключаемый_ВыполнитьКомандуНаСервере);
				
				Если ЕстьВызов_ПриСозданииНаСервере
					Или ЕстьВызов_ВыполнитьКоманду_Клиент
					Или ЕстьВызов_ВыполнитьКоманду_Сервер Тогда
					ПодключенныеФормы.Добавить(МетаданныеФормы.Имя);
				КонецЕсли;
				
				// В форме расставлены не все фрагменты кода.
				Если ЕстьВызов_ПриСозданииНаСервере <> ЕстьПроцедура_Подключаемый_ВыполнитьКоманду
					Или ЕстьВызов_ПриСозданииНаСервере <> ЕстьПроцедура_Подключаемый_ВыполнитьКомандуНаСервере Тогда
					Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В форме ""%1"" отсутствуют фрагменты кода'"), МетаданныеФормы.Имя);
					МассивСообщенийПодробно = Новый Массив;
					Если Не ЕстьВызов_ПриСозданииНаСервере Тогда
						Фрагмент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ""%1"" нет вызова ""%2""'"), "ПриСозданииНаСервере", Код_ПриСозданииНаСервере);
						МассивСообщенийПодробно.Добавить(Фрагмент);
					КонецЕсли;
					Если Не ЕстьПроцедура_Подключаемый_ВыполнитьКоманду Или Не ЕстьПроцедура_Подключаемый_ВыполнитьКомандуНаСервере Тогда
						МассивОжидаемыхПроцедур = Новый Массив;
						Если Не ЕстьПроцедура_Подключаемый_ВыполнитьКоманду Тогда
							МассивОжидаемыхПроцедур.Добавить("Подключаемый_ВыполнитьКоманду");
						КонецЕсли;
						Если Не ЕстьПроцедура_Подключаемый_ВыполнитьКомандуНаСервере Тогда
							МассивОжидаемыхПроцедур.Добавить("Подключаемый_ВыполнитьКомандуНаСервере");
						КонецЕсли;
						Фрагмент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле формы нет процедур ""%1""'"), СтрСоединить(МассивОжидаемыхПроцедур, ", "));
						МассивСообщенийПодробно.Добавить(Фрагмент);
					КонецЕсли;
					ДобавитьОшибку(ОбъектМетаданных, Кратко, СтрСоединить(МассивСообщенийПодробно, Символы.ПС));
					Продолжить;
				КонецЕсли;
				
				// Некорректные вставки кода.
				Если ЕстьПроцедура_Подключаемый_ВыполнитьКоманду <> ЕстьВызов_ВыполнитьКоманду_Клиент
					Или ЕстьПроцедура_Подключаемый_ВыполнитьКомандуНаСервере <> ЕстьВызов_ВыполнитьКоманду_Сервер Тогда
					Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В форме ""%1"" фрагменты поставляемого кода не соответствуют документации по внедрению'"),
						МетаданныеФормы.Имя);
					ШаблонПодробно = НСтр("ru = 'В процедуре ""%1"" ожидается вызов вида ""%2"".'");
					МассивСообщенийПодробно = Новый Массив;
					Если ЕстьПроцедура_Подключаемый_ВыполнитьКоманду <> ЕстьВызов_ВыполнитьКоманду_Клиент Тогда
						Фрагмент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонПодробно,
							"Подключаемый_ВыполнитьКоманду",
							"ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, <Объект/Список>);");
						МассивСообщенийПодробно.Добавить(Фрагмент);
					КонецЕсли;
					Если ЕстьПроцедура_Подключаемый_ВыполнитьКомандуНаСервере <> ЕстьВызов_ВыполнитьКоманду_Сервер Тогда
						Фрагмент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодробно,
							"Подключаемый_ВыполнитьКомандуНаСервере",
							"ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, <Объект/Список>, Результат);");
						МассивСообщенийПодробно.Добавить(Фрагмент);
					КонецЕсли;
					ДобавитьОшибку(ОбъектМетаданных, Кратко, СтрСоединить(МассивСообщенийПодробно, Символы.ПС));
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
			// Отсутствие фрагментов кода в модуле менеджера или хотя-бы в одной из форм.
			ЕстьПодключенныеФормы = ПодключенныеФормы.Количество() > 0;
			Если ЕстьПодключенныеФормы И Не ЕстьПроцедураДобавитьКомандыЗаполнения Тогда
				Кратко = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В модуле менеджера отсутствует экспортная процедура ""%1""'"),
					"ДобавитьКомандыЗаполнения");
				Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В модуле менеджера отсутствует экспортная процедура ""%1"", хотя формы ""%2"" подключены к подсистеме ""Заполнение объектов"".'"),
					"ДобавитьКомандыЗаполнения",
					СтрСоединить(ПодключенныеФормы, ", "));
				ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
				Продолжить;
			ИначеЕсли Не ЕстьПодключенныеФормы И ЕстьПроцедураДобавитьКомандыЗаполнения Тогда
				Кратко = НСтр("ru = 'Ни одна из форм не подключена к подсистеме ""Заполнение объектов""'");
				Если ОбъектМетаданных.Формы.Количество() = 0 Тогда
					Подробно = НСтр("ru = 'У объекта нет форм, хотя сам объект подключен к подсистеме ""Заполнение объектов"" (есть процедура в модуле менеджера).'");
				Иначе
					Подробно = НСтр("ru = 'Ни одна из форм объекта не подключена к подсистеме ""Заполнение объектов"", хотя сам объект подключен (есть процедура в модуле менеджера).'");
				КонецЕсли;
				ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
				Продолжить;
			КонецЕсли;
			
			МассивПоставщиков = ПодключенныеОбъекты[ОбъектМетаданных];
			// Команды разработаны к не подключенным объектам.
			Если МассивПоставщиков <> Неопределено И Не ЕстьПроцедураДобавитьКомандыЗаполнения Тогда
				Кратко = НСтр("ru = 'Объект не подключен к подсистеме ""Заполнение объектов""'");
				Если МассивПоставщиков.Количество() = 1 Тогда
					Шаблон = НСтр("ru = '%1 поставляет команды заполнения для объекта метаданных, не подключенного к подсистеме ""Заполнение объектов"".'")
				Иначе
					Шаблон = НСтр("ru = 'Объекты ""%1"" поставляют команды заполнения для объекта метаданных, не подключенного к подсистеме ""Заполнение объектов"".'")
				КонецЕсли;
				Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					СтрСоединить(МассивПоставщиков, ", "));
				ДобавитьОшибку(ОбъектМетаданных, Кратко, Подробно);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура Подключаемый_ЗапретРедактированияРеквизитовОбъектов_ПроверитьВнедрение()
	
	Объекты = Новый Соответствие;
	ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовПереопределяемый").ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты);
	
	МассивМетаданных = Новый Массив;
	Для Каждого Элемент Из Объекты Цикл
		МассивМетаданных.Добавить(Метаданные.НайтиПоПолномуИмени(Элемент.Ключ));
	КонецЦикла;
	
	// Проверяем наличие вызовов в модулях.
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "МодульМенеджера", "Функция ПолучитьБлокируемыеРеквизитыОбъекта");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта",
		"ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(", "Процедура ПриСозданииНаСервере");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта",
		"ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(", "Процедура ПослеЗаписиНаСервере");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта",
		"Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта");
	
КонецПроцедуры

Процедура Подключаемый_КонтактнаяИнформация_ПроверитьВнедрение()
	
	// Проверка владельцев контактной информации.
	МетаданныеВидовКонтактнойИнформации = Метаданные.Справочники.ВидыКонтактнойИнформации;
	
	ТаблицаВидов = Новый ТаблицаЗначений;
	ТаблицаВидов.Колонки.Добавить("ПредопределенныйВид");
	ТаблицаВидов.Колонки.Добавить("МетаданныеВладельца");
	ТаблицаВидов.Колонки.Добавить("ЕстьТабличныеЧасти");
	
	ИменаПредопределенных = МетаданныеВидовКонтактнойИнформации.ПолучитьИменаПредопределенных();
	Для Каждого ИмяПредопределенного Из ИменаПредопределенных Цикл
		ПредопределенныйВид = Справочники.ВидыКонтактнойИнформации[ИмяПредопределенного];
		Если ПредопределенныйВид.ЭтоГруппа Тогда
			Если ЗначениеЗаполнено(ПредопределенныйВид.Родитель) Тогда
				НайденнаяСтрока = ТаблицаВидов.Найти(ПредопределенныйВид.Родитель, "ПредопределенныйВид");
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрока = ТаблицаВидов.Добавить();
					НоваяСтрока.ПредопределенныйВид = ПредопределенныйВид.Родитель;
					НоваяСтрока.ЕстьТабличныеЧасти = Истина;
				Иначе
					НайденнаяСтрока.ЕстьТабличныеЧасти = Истина;
				КонецЕсли;
			Иначе
				Если СтрНачинаетсяС(ИмяПредопределенного, "Справочник") Или СтрНачинаетсяС(ИмяПредопределенного, "Документ") Тогда
					Если СтрНачинаетсяС(ИмяПредопределенного, "Справочник") Тогда
						ДлинаТипа = 11;
						КоллекцияМетаданных = Метаданные.Справочники;
					Иначе
						ДлинаТипа = 9;
						КоллекцияМетаданных = Метаданные.Документы;
					КонецЕсли;
					ИмяВладельца = Сред(ИмяПредопределенного, ДлинаТипа);
					МетаданныеВладельца = КоллекцияМетаданных.Найти(ИмяВладельца);
					Если МетаданныеВладельца = Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для предопределенного вида контактной информации %1 отсутствует объект метаданных %2'"),
							ИмяПредопределенного, ИмяВладельца);
						ДобавитьОшибку(МетаданныеВидовКонтактнойИнформации, НСтр("ru = 'Отсутствует объект метаданных'"), ТекстОшибки);
					Иначе
						НайденнаяСтрока = ТаблицаВидов.Найти(ПредопределенныйВид, "ПредопределенныйВид");
						Если НайденнаяСтрока = Неопределено Тогда
							НоваяСтрока = ТаблицаВидов.Добавить();
							НоваяСтрока.ПредопределенныйВид = ПредопределенныйВид;
							НоваяСтрока.МетаданныеВладельца = МетаданныеВладельца;
							НоваяСтрока.ЕстьТабличныеЧасти = Ложь;
						Иначе
							НайденнаяСтрока.МетаданныеВладельца = МетаданныеВладельца;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя предопределенного вида контактной информации должно начинаться
						|с ""Справочник"" или ""Документ"". Текущее имя ""%1""'"), ИмяПредопределенного);
					ДобавитьОшибку(МетаданныеВидовКонтактнойИнформации, 
						НСтр("ru = 'Некорректное имя предопределенного вида контактной информации'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	МассивВидов = ТаблицаВидов.ВыгрузитьКолонку("МетаданныеВладельца");
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВладелецКонтактнойИнформации.Тип",, "ВсеКромеДокументов"));
	МассивИсточников.Добавить(СоставПодписокПоОбработчику("УправлениеКонтактнойИнформацией.ОбработкаЗаполненияКонтактнойИнформацииДокумента", "Документы"));
	ТипыКонтактнойИнформации = ОбъединитьТипы(МассивИсточников);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипыКонтактнойИнформации);
	МассивТипов.Добавить(СоставТипа(НСтр("ru = 'Предопределенные группы справочника Виды контактной информации'"), МассивВидов));
	СравнитьТипы(МассивТипов);
	
	// Проверка реквизитов табличной части КонтактнаяИнформация.
	ТипыТабличнойЧасти = Новый Структура;
	ТипыТабличнойЧасти.Вставить("Тип",                   Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"));
	ТипыТабличнойЧасти.Вставить("Вид",                   Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ТипыТабличнойЧасти.Вставить("Страна",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));
	ТипыТабличнойЧасти.Вставить("ЗначенияПолей",         Новый ОписаниеТипов("Строка"));
	ТипыТабличнойЧасти.Вставить("Страна",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТипыТабличнойЧасти.Вставить("Регион",                Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТипыТабличнойЧасти.Вставить("Город",                 Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТипыТабличнойЧасти.Вставить("АдресЭП",               Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТипыТабличнойЧасти.Вставить("ДоменноеИмяСервера",    Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТипыТабличнойЧасти.Вставить("НомерТелефона",         Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТипыТабличнойЧасти.Вставить("НомерТелефонаБезКодов", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТипыТабличнойЧасти.Вставить("ВидДляСписка",          Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
	ТипыТабличнойЧасти.Вставить("ИдентификаторСтрокиТабличнойЧасти", Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(7)));
	
	Для Каждого СтрокаВида Из ТаблицаВидов Цикл
		МетаданныеВладельца = СтрокаВида.МетаданныеВладельца;
		ТабличнаяЧастьКонтактнаяИнформация = МетаданныеВладельца.ТабличныеЧасти.Найти("КонтактнаяИнформация");
		Если ТабличнаяЧастьКонтактнаяИнформация = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"", подключенного к подсистеме отсутствует
				|обязательная табличная часть ""КонтактнаяИнформация""'"), МетаданныеВладельца.ПолноеИмя());
			ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Отсутствует табличная часть КонтактнаяИнформация'"), ТекстОшибки);
			Продолжить;
		КонецЕсли;
		Для Каждого ТипТабличнойЧасти Из ТипыТабличнойЧасти Цикл
			ОбязательныйРеквизит = Истина;
			Если ТипТабличнойЧасти.Ключ = "ВидДляСписка" Тогда
				ОбязательныйРеквизит = Ложь;
			ИначеЕсли ТипТабличнойЧасти.Ключ = "ИдентификаторСтрокиТабличнойЧасти" Тогда
				ОбязательныйРеквизит = СтрокаВида.ЕстьТабличныеЧасти;
			КонецЕсли;
			НайденныйРеквизит = ТабличнаяЧастьКонтактнаяИнформация.Реквизиты.Найти(ТипТабличнойЧасти.Ключ);
			Если НайденныйРеквизит = Неопределено Тогда
				Если ОбязательныйРеквизит Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""КонтактнаяИнформация""
						|отсутствует обязательный реквизит ""%2""'"), МетаданныеВладельца.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
					ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Проверка наличия обязательных реквизитов табличной части КонтактнаяИнформация'"), ТекстОшибки);
				КонецЕсли;
			Иначе
				Если НайденныйРеквизит.Тип <> ТипТабличнойЧасти.Значение Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""КонтактнаяИнформация""
						|тип реквизита ""%2"" не соответствует ожидаемому'"), МетаданныеВладельца.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
					ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Некорректные типы реквизитов табличной части КонтактнаяИнформация'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Проверка заполнения характеристик.
		Если ТабличнаяЧастьКонтактнаяИнформация.Реквизиты.Найти("ВидДляСписка") <> Неопределено Тогда
			ХарактеристикиЗаданы = Ложь;
			Для Каждого Характеристика Из МетаданныеВладельца.Характеристики Цикл
				Если Характеристика.ВидыХарактеристик = Метаданные.Справочники.ВидыКонтактнойИнформации Тогда
					ХарактеристикиЗаданы = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не ХарактеристикиЗаданы Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""КонтактнаяИнформация""
					|создан реквизит ""ВидДляСписка"", но не создана характеристика с видом ""ВидыКонтактнойИнформации""'"),
					МетаданныеВладельца.ПолноеИмя());
				ДобавитьОшибку(МетаданныеВладельца, НСтр("ru = 'Некорректно заполнены характеристики'"), ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка наличия вставок кода.
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении", "УправлениеКонтактнойИнформациейКлиент.ПриИзменении"));
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы, "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора", "УправлениеКонтактнойИнформациейКлиент.НачалоВыбора"));
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы, "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
	
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", "УправлениеКонтактнойИнформациейКлиент.НачалоВыбора",
		"Подключаемый_КонтактнаяИнформацияПриНажатии");
		
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПредставлениеОчистка", "УправлениеКонтактнойИнформациейКлиент.Очистка"));
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы, "Подключаемый_КонтактнаяИнформацияОчистка");
	
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить(ВариантыВызова("УправлениеКонтактнойИнформациейКлиент.ПодключаемаяКоманда", "УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду"));
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы, "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду");
	
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", "УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию", "Подключаемый_ОбновитьКонтактнуюИнформацию");
	
	МассивВидов = Новый Массив;
	Отбор = Новый Структура("ЕстьТабличныеЧасти", Истина);
	Для Каждого СтрокаВида Из ТаблицаВидов.НайтиСтроки(Отбор) Цикл
		МассивВидов.Добавить(СтрокаВида.МетаданныеВладельца);
	КонецЦикла;
	ПроверитьНаличиеВставкиКода(МассивВидов, "ОсновнаяФормаОбъекта", "УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере");
	
КонецПроцедуры

Процедура Подключаемый_НапоминанияПользователя_ПроверитьВнедрение()
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметНапоминания.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПредметНапоминанияОбъект.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_НастройкаПорядкаЭлементов_ПроверитьВнедрение()
	
	// Сравниваем составы типов
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ОбъектСНастраиваемымПорядком.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставОбъектовСРеквизитомДопУпорядочивания());
	СравнитьТипы(МассивИсточников);
	
	// Проверяем наличие вставок кода.
	МассивТипов = СоставТипа("ОпределяемыеТипы.ОбъектСНастраиваемымПорядком.Тип",,,
		"Справочник.ВариантыОтветовАнкет,Справочник.ИдентификаторыОбъектовМетаданных");
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВверхВыполнить(");
	ПроверяемыеВызовы.Добавить("НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВнизВыполнить(");
	ПроверитьНаличиеВставкиКода(МассивТипов, "ОсновнаяФормаСписка", ПроверяемыеВызовы);
	
КонецПроцедуры

Процедура Подключаемый_ОбменДанными_ПроверитьВнедрение()
	
	ПроверитьНаличиеМакетовИФорм();
	ПроверитьСоставОбщихКоманд();
	ПроверитьСоставПлановОбмена();
	ПроверитьПрефиксИнформационнойБазыПоУмолчанию();
	
КонецПроцедуры

Процедура Подключаемый_ОбновлениеВерсииИБ_ПроверитьВнедрение()
	
	Если Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы") = Неопределено Тогда
		ДобавитьОшибку(Неопределено, НСтр("ru = 'Отсутствует макет ОписаниеИзмененийСистемы'"),
			НСтр("ru = 'В конфигурации не создан общий макет ОписаниеИзмененийСистемы.'"));
	КонецЕсли;
	
	ПроверитьОтложенныеОбработчики();
	
КонецПроцедуры

Процедура Подключаемый_Печать_ПроверитьВнедрение()
	
	// Получаем состав объектов, подключенных к подсистеме Печать.
	МассивОбъектов = Новый Массив;
	ОбщегоНазначения.ОбщийМодуль("УправлениеПечатьюПереопределяемый").ПриОпределенииОбъектовСКомандамиПечати(МассивОбъектов);
	
	МассивМетаданных = Новый Массив;
	Для Каждого Элемент Из МассивОбъектов Цикл
		МассивМетаданных.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Элемент)));
	КонецЦикла;
	
	// Проверяем наличие вызовов в модулях.
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "МодульМенеджера", "Процедура ДобавитьКомандыПечати");
	
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("УправлениеПечатью.ПриСозданииНаСервере");
	ПроверяемыеВызовы.Добавить("Процедура Подключаемый_ВыполнитьКомандуПечати");
	
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы);
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "ОсновнаяФормаСписка", ПроверяемыеВызовы);
	
	// Проверка журналов.
	СписокЖурналовСПечатью = Новый Массив;
	Для Каждого ОбъектМетаданных Из Метаданные.ЖурналыДокументов Цикл
		Если СтрНайти(ТекстМодуля(ОбъектМетаданных, "ОсновнаяФормаСписка"), "УправлениеПечатью.ПриСозданииНаСервере") > 0 Тогда;
			СписокЖурналовСПечатью.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	ПроверитьНаличиеВставкиКода(СписокЖурналовСПечатью, "ОсновнаяФормаСписка", "Процедура Подключаемый_ВыполнитьКомандуПечати");
	ПроверитьНаличиеВставкиКода(СписокЖурналовСПечатью, "ОсновнаяФормаСписка", "Процедура Подключаемый_ОбновитьКоманды");
	ПроверитьНаличиеВставкиКода(СписокЖурналовСПечатью, "ОсновнаяФормаСписка", "УправлениеПечатьюКлиент.НачатьОбновлениеКоманд");
КонецПроцедуры

Процедура Подключаемый_Пользователи_ПроверитьВнедрение()
	
	ТипыПользователь = Метаданные.ОпределяемыеТипы.Пользователь.Тип.Типы();
	ТипыВнешнийПользователь = Метаданные.ОпределяемыеТипы.ВнешнийПользователь.Тип.Типы();
	ТипыВнешнийПользовательОбъект = Метаданные.ОпределяемыеТипы.ВнешнийПользовательОбъект.Тип.Типы();
	ТипыКомандыВнешнийДоступ = Метаданные.Справочники.ВнешниеПользователи.Команды.ВнешнийДоступ.ТипПараметраКоманды.Типы();
	
	ИспользуютсяВнешниеПользователи = Истина;
	Если (ТипыВнешнийПользователь.Количество() = 1 И ТипыВнешнийПользователь[0] = Тип("Строка"))
		И (ТипыВнешнийПользовательОбъект.Количество() = 1 И ТипыВнешнийПользовательОбъект[0] = Тип("СправочникОбъект.ВнешниеПользователи"))
		И (ТипыПользователь.Количество() = 1 И ТипыПользователь[0] = Тип("СправочникСсылка.Пользователи"))
		И ТипыКомандыВнешнийДоступ.Количество() = 0 Тогда
		ИспользуютсяВнешниеПользователи = Ложь;
	КонецЕсли;
	
	// Проверка состава типов
	Если ИспользуютсяВнешниеПользователи Тогда
		МассивИсточников = Новый Массив;
		МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВнешнийПользователь.Тип"));
		МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВнешнийПользовательОбъект.Тип",,, "Справочник.ВнешниеПользователи"));
		МассивИсточников.Добавить(СоставТипа("Справочники.ВнешниеПользователи.Команды.ВнешнийДоступ.ТипПараметраКоманды"));
		МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.Пользователь.Тип",,, "Справочник.Пользователи"));
		
		СравнитьТипы(МассивИсточников);
	КонецЕсли;
	
	// Проверка на прямое обращение к параметрам сеанса.
	ПроверитьПрямоеОбращениеКПараметрамСеанса();
	
	// Проверка на назначение ролей.
	СписокОшибок = Новый СписокЗначений;
	Константы.ПараметрыРаботыПользователей.СоздатьМенеджерЗначения().ПроверитьНазначениеРолей(, Истина, СписокОшибок);
	
	КраткоеОписаниеОшибки =
		НСтр("ru = 'Ошибка в процедуре ПриОпределенииНазначенияРолей общего модуля ПользователиПереопределяемый.'");
	Для Каждого Ошибка Из СписокОшибок Цикл
		ДобавитьОшибку(Ошибка.Значение, КраткоеОписаниеОшибки, Ошибка.Представление);
	КонецЦикла;
	
КонецПроцедуры

Процедура Подключаемый_ПрефиксацияОбъектов_ПроверитьВнедрение()
	
	ТипыПрефиксаОрганизации = СоставПодписокПоОбработчику("ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации");
	ТипыПрефиксаИБ = СоставПодписокПоОбработчику("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы");
	ТипыПрефиксаИБИОрганизации = СоставПодписокПоОбработчику("ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации");
	
	Если ТипыПрефиксаОрганизации.Количество() = 0 И ТипыПрефиксаИБИОрганизации.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Ожидается наличие подписки на событие с обработчиком:
			|ПрефиксацияОбъектовСобытия.УстановитьПрефиксОрганизации 
			|или ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации'");
		ДобавитьОшибку(Метаданные.ОбщиеМодули.ПрефиксацияОбъектовСобытия, НСтр("ru = 'Отсутствуют подписки установки префикса'"), ТекстОшибки);
	КонецЕсли;
	
	Если ТипыПрефиксаИБ.Количество() = 0 И ТипыПрефиксаИБИОрганизации.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Ожидается наличие подписки на событие с обработчиком:
			|ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы 
			|или ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации'");
		ДобавитьОшибку(Метаданные.ОбщиеМодули.ПрефиксацияОбъектовСобытия, НСтр("ru = 'Отсутствуют подписки установки префикса'"), ТекстОшибки);
	КонецЕсли;
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(ТипыПрефиксаОрганизации);
	МассивИсточников.Добавить(ТипыПрефиксаИБ);
	МассивИсточников.Добавить(ТипыПрефиксаИБИОрганизации);
	ПересечениеТипов(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_ПрисоединенныеФайлы_ПроверитьВнедрение()
	
	МассивОбъектовСФайлами = Новый Массив;
	МассивВладельцевФайлов = Новый Массив;
	Для Каждого МетаданныеСправочника Из Метаданные.Справочники Цикл
		ИмяСправочника = МетаданныеСправочника.Имя;
		Если СтрЗаканчиваетсяНа(ИмяСправочника, "ПрисоединенныеФайлы") Тогда
			
			ИмяВладельцаПрисоединенныхФайлов = СтрЗаменить(ИмяСправочника, "ПрисоединенныеФайлы", "");
			ВладелецПрисоединенныхФайлов = Метаданные.Справочники.Найти(ИмяВладельцаПрисоединенныхФайлов);
			Если ВладелецПрисоединенныхФайлов = Неопределено Тогда
				ВладелецПрисоединенныхФайлов = Метаданные.Документы.Найти(ИмяВладельцаПрисоединенныхФайлов);
			КонецЕсли;
			
			Если ВладелецПрисоединенныхФайлов = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для справочника ""%1"", содержащего присоединенные файлы
					|не найден владелец с именем ""%2""'"), ИмяСправочника, ИмяВладельцаПрисоединенныхФайлов);
				ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Отсутствует владелец справочника присоединенных файлов'"), ТекстОшибки);
			Иначе
				МассивВладельцевФайлов.Добавить(ВладелецПрисоединенныхФайлов);
			КонецЕсли;
			
			Если МетаданныеСправочника.Реквизиты.Найти("ВладелецФайла") = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В справочнике присоединенных файлов ""%1"" не найден реквизит ""ВладелецФайла""'"), ИмяСправочника);
				ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Отсутствует реквизит ""ВладелецФайла""'"), ТекстОшибки);
			Иначе
				ТипыВладельца = МетаданныеСправочника.Реквизиты.ВладелецФайла.Тип.Типы();
				Если ТипыВладельца.Количество() <> 1 Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В реквизите ""ВладелецФайла"" справочника %1 задано более одного типа'"), ИмяСправочника);
					ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Некорректный тип реквизита ""ВладелецФайла""'"), ТекстОшибки);
				Иначе
					ВладелецВРеквизите = Метаданные.НайтиПоТипу(ТипыВладельца[0]);
					Если ВладелецВРеквизите <> ВладелецПрисоединенныхФайлов Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя справочника ""%1"" не совпадает с типом ""%2"",
							|заданным в реквизите ""ВладелецФайла""'"), ИмяСправочника, ВладелецВРеквизите.Имя);
						ДобавитьОшибку(МетаданныеСправочника, НСтр("ru = 'Имя справочника не соответствует типу владельца'"), ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			МассивОбъектовСФайлами.Добавить(МетаданныеСправочника);
			
		КонецЕсли;
	КонецЦикла;
	
	СправочникиПрисоединенныхФайлов = СоставТипа(НСтр("ru = 'Справочники присоединенных файлов'"), МассивОбъектовСФайлами);
	ВладельцыПрисоединенныхФайлов = СоставТипа(НСтр("ru = 'Владельцы присоединенных файлов'"), МассивВладельцевФайлов);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПрисоединенныйФайл.Тип"));
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ПрисоединенныйФайлОбъект.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставПодписокПоОбработчику("ПрисоединенныеФайлыКлиентСервер.ПереопределитьПолучаемуюФормуПрисоединенногоФайла"));
	МассивИсточников.Добавить(СправочникиПрисоединенныхФайлов);
	СравнитьТипы(МассивИсточников);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВладелецПрисоединенныхФайловОбъект.Тип",, "ВсеКромеДокументов", "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(СоставПодписокПоОбработчику("ПрисоединенныеФайлы.УстановитьПометкуУдаленияПрисоединенныхФайловДокументов", "Документы"));
	ОбъектныеТипы = ОбъединитьТипы(МассивИсточников);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОпределяемыеТипы.ВладелецПрисоединенныхФайлов.Тип",,, "Справочник.ИдентификаторыОбъектовМетаданных"));
	МассивИсточников.Добавить(ВладельцыПрисоединенныхФайлов);
	МассивИсточников.Добавить(ОбъектныеТипы);
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_РаботаВМоделиСервиса_ПроверитьВнедрение()
	
	ПроверитьСоставРазделителей();
	ПроверитьСоставСтандартныхРолей();
	
КонецПроцедуры

Процедура Подключаемый_РассылкаОтчетов_ПроверитьВнедрение()
	
	КонтактнаяИнформацияГруппыТипов = Новый Соответствие;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный
	|	И ВидыКонтактнойИнформации.ЭтоГруппа
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтактнаяИнформацияГруппыТипов.Вставить(Выборка.ИмяПредопределенныхДанных, Выборка.Ссылка);
	КонецЦикла;
	
	ТипыПолучателей = СоставТипа("ОпределяемыеТипы.ПолучательРассылки.Тип",,, "Справочник.ГруппыПользователей");
	Для Каждого ТипПолучателей Из ТипыПолучателей[0].Состав Цикл
		
		КонтактнаяИнформацияГруппаСсылка = КонтактнаяИнформацияГруппыТипов.Получить(СтрЗаменить(ТипПолучателей.ПолноеИмя(), ".", ""));
		Если КонтактнаяИнформацияГруппаСсылка = Неопределено Тогда
			// Ошибка: Не определена группа контактной информации.
			ТекстОшибки = НСтр("ru = 'Для объекта не найдена группа контактной информации. Для него необходимо:
				|  • Либо выполнить внедрение подсистемы ""КонтактнаяИнформация"";
				|  • Либо исключить из определяемого типа ""ПолучательРассылки"".'");
			ДобавитьОшибку(ТипПолучателей, НСтр("ru = 'Отсутствует группа контактной информации'"), ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ВидыКонтактнойИнформации ГДЕ Родитель = &Родитель И Тип = &Тип";
		Запрос.УстановитьПараметр("Родитель", КонтактнаяИнформацияГруппаСсылка);
		Запрос.Параметры.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Если Запрос.Выполнить().Пустой() Тогда
			// Ошибка: Не добавлен основной вид контактной информации типа "e-mail".
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для получателей ""%1"" необходимо добавить вид контактной информации типа ""Адрес электронной почты"".'"),
				Строка(ТипПолучателей));
			ДобавитьОшибку(ТипПолучателей, НСтр("ru = 'Отсутствует вид вид контактной информации'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура Подключаемый_Свойства_ПроверитьВнедрение()
	
	// Проверка типов табличной части ДополнительныеРеквизиты.
	ТипыТабличнойЧасти = Новый Структура;
	ТипыТабличнойЧасти.Вставить("Свойство",        Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТипыТабличнойЧасти.Вставить("ТекстоваяСтрока", Новый ОписаниеТипов("Строка"));
	ТипыТабличнойЧасти.Вставить("Значение",        Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип.Типы());
	
	ДопустимыеМетаданные = Новый Массив;
	ДопустимыеМетаданные.Добавить(Метаданные.Справочники);
	ДопустимыеМетаданные.Добавить(Метаданные.Документы);
	ДопустимыеМетаданные.Добавить(Метаданные.БизнесПроцессы);
	ДопустимыеМетаданные.Добавить(Метаданные.Задачи);
	
	ОбъектыСДополнительнымиРеквизитами = Новый Массив;
	
	Для Каждого ВидМетаданных Из ДопустимыеМетаданные Цикл
		
		Для Каждого ОбъектМетаданных Из ВидМетаданных Цикл
			
			Если ОбъектМетаданных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений Тогда
				Продолжить; // Исключение
			КонецЕсли;
			
			ТабличнаяЧастьДополнительныеРеквизиты = ОбъектМетаданных.ТабличныеЧасти.Найти("ДополнительныеРеквизиты");
			Если ТабличнаяЧастьДополнительныеРеквизиты <> Неопределено Тогда
				ОбъектыСДополнительнымиРеквизитами.Добавить(ОбъектМетаданных);
				// Проверяем состав типов
				Для Каждого ТипТабличнойЧасти Из ТипыТабличнойЧасти Цикл
					НайденныйРеквизит = ТабличнаяЧастьДополнительныеРеквизиты.Реквизиты.Найти(ТипТабличнойЧасти.Ключ);
					Если НайденныйРеквизит = Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""ДополнительныеРеквизиты""
							|отсутствует обязательный реквизит ""%2""'"), ОбъектМетаданных.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
						ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Отсутствуют обязательные реквизиты табличной части ДополнительныеРеквизиты'"), ТекстОшибки);
					Иначе
						Если НайденныйРеквизит.Имя = "Значение" Тогда
							ДобавитьОшибку = Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(НайденныйРеквизит.Тип.Типы(), ТипТабличнойЧасти.Значение);
						Иначе
							ДобавитьОшибку = НайденныйРеквизит.Тип <> ТипТабличнойЧасти.Значение;
						КонецЕсли;
						Если ДобавитьОшибку Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" в табличной части ""ДополнительныеРеквизиты""
								|тип реквизита ""%2"" не соответствует ожидаемому'"), ОбъектМетаданных.ПолноеИмя(), ТипТабличнойЧасти.Ключ);
							ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Некорректные типы реквизитов табличной части ДополнительныеРеквизиты'"), ТекстОшибки);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				// Проверка характеристик дополнительных реквизитов.
				ХарактеристикиЗаданы = Ложь;
				Для Каждого Характеристика Из ОбъектМетаданных.Характеристики Цикл
					Если Характеристика.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеРеквизиты Тогда
						ХарактеристикиЗаданы = Истина;
					КонецЕсли;
				КонецЦикла;
				Если Не ХарактеристикиЗаданы Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"" с табличной частью ""ДополнительныеРеквизиты""
						|не найдена характеристика с видом ""Справочник.НаборыДополнительныхРеквизитовИСведений.ТабличнаяЧасть.ДополнительныеРеквизиты""'"),
						ОбъектМетаданных.ПолноеИмя());
						ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Некорректно заполнены характеристики'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Проверка наличия вставок кода.
	ПроверяемыеВызовы = Новый Массив;
	ПроверяемыеВызовы.Добавить("УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ПриСозданииНаСервере(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(");
	ПроверяемыеВызовы.Добавить("ОбновитьЭлементыДополнительныхРеквизитов()");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ПриЧтенииНаСервере(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ОбработкаПроверкиЗаполнения(");
	ПроверяемыеВызовы.Добавить("УправлениеСвойствами.ПередЗаписьюНаСервере(");
	
	ПроверитьНаличиеВставкиКода(ОбъектыСДополнительнымиРеквизитами, "ОсновнаяФормаОбъекта", ПроверяемыеВызовы);
	
	// Проверка предопределенных элементов.
	
	ОбъектыСДополнительнымиСвойствами = Новый Массив;
	
	ДопустимыеПрефиксы = Новый Структура;
	ДопустимыеПрефиксы.Вставить("Справочник", Метаданные.Справочники);
	ДопустимыеПрефиксы.Вставить("Документ", Метаданные.Документы);
	ДопустимыеПрефиксы.Вставить("ПланВидовХарактеристик", Метаданные.ПланыВидовХарактеристик);
	ДопустимыеПрефиксы.Вставить("ПланСчетов", Метаданные.ПланыСчетов);
	ДопустимыеПрефиксы.Вставить("ПланВидовРасчета", Метаданные.ПланыВидовРасчета);
	ДопустимыеПрефиксы.Вставить("БизнесПроцесс", Метаданные.БизнесПроцессы);
	ДопустимыеПрефиксы.Вставить("Задача", Метаданные.Задачи);
	ДопустимыеПрефиксы.Вставить("ПланОбмена", Метаданные.ПланыОбмена);
	
	МетаданныеНаборов = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений;
	ИменаПредопределенных = МетаданныеНаборов.ПолучитьИменаПредопределенных();
	Для Каждого ИмяПредопределенного Из ИменаПредопределенных Цикл
		
		Набор = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенного];
		Если ЗначениеЗаполнено(Набор.Родитель) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(ИмяПредопределенного, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		КоллекцияМетаданных = Неопределено;
		Для Каждого ДопустимыйПрефикс Из ДопустимыеПрефиксы Цикл
			Если СтрНачинаетсяС(ИмяПредопределенного, ДопустимыйПрефикс.Ключ) Тогда
				ДлинаПрефикса = СтрДлина(ДопустимыйПрефикс.Ключ) + 2;
				КоллекцияМетаданных = ДопустимыйПрефикс.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КоллекцияМетаданных = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Имя предопределенного набора свойств должно начинаться
				|с наименования ссылочного типа (""Справочник"", ""Документ"" и т.д). Текущее имя ""%1""'"), ИмяПредопределенного);
			ДобавитьОшибку(МетаданныеНаборов, НСтр("ru = 'Некорректное имя предопределенного набора свойств'"), ТекстОшибки);
		КонецЕсли;
		
		ИмяВладельца = Сред(ИмяПредопределенного, ДлинаПрефикса);
		МетаданныеВладельца = КоллекцияМетаданных.Найти(ИмяВладельца);
		Если МетаданныеВладельца = Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для предопределенного набора свойств %1 отсутствует объект метаданных %2'"),
				ИмяПредопределенного, ИмяВладельца);
			ДобавитьОшибку(МетаданныеНаборов, НСтр("ru = 'Отсутствует объект метаданных'"), ТекстОшибки);
		Иначе
			ОбъектыСДополнительнымиСвойствами.Добавить(МетаданныеВладельца);
		КонецЕсли;
	
	КонецЦикла;
	
	ОбъектыСДополнительнымиСведениями = СоставТипа("ОпределяемыеТипы.ВладелецДополнительныхСведений.Тип");
	// Проверка характеристик дополнительных сведений.
	Для Каждого ОбъектМетаданных Из ОбъектыСДополнительнымиСведениями[0].Состав Цикл
		ХарактеристикиЗаданы = Ложь;
		Для Каждого Характеристика Из ОбъектМетаданных.Характеристики Цикл
			Если Характеристика.ВидыХарактеристик = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеСведения Тогда
				ХарактеристикиЗаданы = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ХарактеристикиЗаданы Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У объекта ""%1"", входящего в состав определяемого типа ""ВладелецДополнительныхСведений""
			|не найдена характеристика с видом ""Справочник.НаборыДополнительныхРеквизитовИСведений.ТабличнаяЧасть.ДополнительныеСведения""'"),
			ОбъектМетаданных.ПолноеИмя());
			ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Некорректно заполнены характеристики'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	ОбъектыСРеквизитамиИСведениями = Новый Массив;
	ОбъектыСРеквизитамиИСведениями.Добавить(СоставТипа(НСтр("ru = 'Объекты с дополнительными реквизитами'"), ОбъектыСДополнительнымиРеквизитами));
	ОбъектыСРеквизитамиИСведениями.Добавить(ОбъектыСДополнительнымиСведениями);
	ОбъектыСРеквизитамиИСведениями = ОбъединитьТипы(ОбъектыСРеквизитамиИСведениями);
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(ОбъектыСРеквизитамиИСведениями);
	МассивИсточников.Добавить(СоставТипа(НСтр("ru = 'Наборы свойств'"), ОбъектыСДополнительнымиСвойствами));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_СтруктураПодчиненности_ПроверитьВнедрение()
	
	МассивИсточников = Новый Массив;
	МассивИсточников.Добавить(СоставТипа("ОбщиеКоманды.СтруктураПодчиненности.ТипПараметраКоманды"));
	МассивИсточников.Добавить(СоставТипа("КритерииОтбора.СвязанныеДокументы.Тип"));
	СравнитьТипы(МассивИсточников);
	
КонецПроцедуры

Процедура Подключаемый_УправлениеДоступом_ПроверитьВнедрение()
	
	ПроверкаКорректностиСтандартныхШаблонов();
	
КонецПроцедуры

Процедура Подключаемый_ШаблоныСообщений_ПроверитьВнедрение()
	
	// Получаем состав объектов, подключенных к подсистеме Шаблоны сообщений в определяемом типе ПредметШаблонаСообщения.
	
	МассивМетаданных = Новый Массив;
	Для Каждого Элемент Из Метаданные.ОпределяемыеТипы.ПредметШаблонаСообщения.Тип.Типы() Цикл
		Если Элемент <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			МассивМетаданных.Добавить(Метаданные.НайтиПоТипу(Элемент));
		КонецЕсли;
	КонецЦикла;
	
	// Проверяем наличие вызовов в модулях.
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "МодульМенеджера", "Процедура ПриПодготовкеШаблонаСообщения");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "МодульМенеджера", "Процедура ПриФормированииСообщения");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "МодульМенеджера", "Процедура ПриЗаполненииТелефоновПолучателейВСообщении");
	ПроверитьНаличиеВставкиКода(МассивМетаданных, "МодульМенеджера", "Процедура ПриЗаполненииПочтыПолучателейВСообщении");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры для использования в проверках.

// Добавляет ошибку в таблицу проверки.
// 
// Параметры:
//    ОбъектМетаданных - ОбъектМетаданных - Место возникновения ошибки.
//    КраткоеОписаниеОшибки - Строка - Краткая информация о проверке.
//    ПодробноеОписаниеОшибки - Строка - Подробная информация об ошибке.
//
Процедура ДобавитьОшибку(ОбъектМетаданных, КраткоеОписаниеОшибки, ПодробноеОписаниеОшибки)
	
	Если ОбъектМетаданных = Неопределено Тогда
		ОбъектМетаданных = ПроверяемаяПодсистема;
	КонецЕсли;
	
	ЗначениеСоответствия = СоответствиеОбъектов.Получить(ОбъектМетаданных);
	ПодсистемаВерхнегоУровня = ?(ЗначениеСоответствия = Неопределено, НСтр("ru = 'Без подсистемы'"), ЗначениеСоответствия.Представление());
	
	НоваяСтрока = ТаблицаПроверки.Добавить();
	
	НоваяСтрока.ПодсистемаБСП = ПроверяемаяПодсистема.Представление();
	НоваяСтрока.ПодсистемаКонфигурации = ПодсистемаВерхнегоУровня;
	НоваяСтрока.ОбъектМетаданных = ОбъектМетаданных.ПолноеИмя();
	Если ТипЗнч(ПодробноеОписаниеОшибки) = Тип("ИнформацияОбОшибке") Тогда
		НоваяСтрока.КраткоеОписаниеОшибки = КраткоеОписаниеОшибки + Символы.ПС + КраткоеПредставлениеОшибки(ПодробноеОписаниеОшибки);
		НоваяСтрока.ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ПодробноеОписаниеОшибки);
	Иначе
		НоваяСтрока.КраткоеОписаниеОшибки = КраткоеОписаниеОшибки;
		НоваяСтрока.ПодробноеОписаниеОшибки = ПодробноеОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Формирует состав типа для дальнейшего использования в процедурах сравнения типов.
//
// Параметры:
//    Описание        - Строка - Описание типа в метаданных, например "ОпределяемыеТипы.ВерсионируемыеДанные.Тип".
//                               Если заполнено значение параметра Состав, то заполняется строковым описанием типа
//    Состав          - Массив - Заполняется в том случае, если в качестве первого параметра было передано
//                               строковое описание. Содержит массив объектов метаданных, входящих в тип.
//    ДопустимыеТипы  - Строка - Содержит описание допустимых типов для тип. Может принимать значения имен базовых типов,
//                               перечисленные через запятую, например, "Документы,Справочники". Так же допустимо
//                               значение "ВсеКромеДокументов", которое делает доступными все типы кроме документов.
//    ИсключаемыеТипы - Строка - Полные имена объектов метаданных, которые нужно исключить из состава типа. Например,
//                               нужно получить состав определяемого типа, исключив из состава идентификаторы объектов
//                               метаданных. В этом случае нужно передать "Справочник.ИдентификаторыОбъектовМетаданных".
// Возвращаемое значение:
//    ТаблицаЗначений - см. описание в функции ТаблицаТипов.
//
Функция СоставТипа(Знач Описание, Состав = Неопределено, ДопустимыеТипы = "", ИсключаемыеТипы = "")
	
	Если Состав = Неопределено Тогда
		Состав = СоставТипаИзСтроки(Описание);
	КонецЕсли;
	
	ИсключитьТипы(ИсключаемыеТипы, Состав);
	
	Возврат НоваяСтрокаТаблицыТипов(Описание, ДопустимыеТипы, Состав);
	
КонецФункции

// Получает состав типов подписок по обработчику.
//
// Параметры:
//    Обработчик - Строка - Обработчик подписки, по которому выполняется поиск.
//    ДопустимыеТипы - см. описание параметра в функции СоставТипа.
//    ИсключаемыеТипы - см. описание параметра в функции СоставТипа.
//
// Возвращаемое значение:
//    ТаблицаЗначений - См. описание возвращаемого значения в функции СоставТипа.
//
Функция СоставПодписокПоОбработчику(Обработчик, ДопустимыеТипы = "", ИсключаемыеТипы = "")
	
	Состав = Новый Массив;
	КоличествоПодписок = 0;
	НесколькоОбработчиков = ТипЗнч(Обработчик) = Тип("Массив");
	
	Для Каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
		Если (Не НесколькоОбработчиков И Подписка.Обработчик = Обработчик)
			Или (НесколькоОбработчиков И Обработчик.Найти(Подписка.Обработчик) <> Неопределено) Тогда
			ТекущаяПодписка = Подписка;
			КоличествоПодписок = КоличествоПодписок + 1;
			Для Каждого Тип Из Подписка.Источник.Типы() Цикл
				Состав.Добавить(Метаданные.НайтиПоТипу(Тип));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПодписок = 1 Тогда
		Описание = ТекущаяПодписка.ПолноеИмя();
	Иначе
		ИмяОбработчика = ?(НесколькоОбработчиков, СтрРазделить(Обработчик[0], ".")[1], Обработчик);
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подписки с обработчиком %1'"), ИмяОбработчика);
	КонецЕсли;
	
	ИсключитьТипы(ИсключаемыеТипы, Состав);
	
	Возврат НоваяСтрокаТаблицыТипов(Описание, ДопустимыеТипы, Состав);
	
КонецФункции

// Объединяет несколько источников типов в один.
//
// Параметры:
//    МассивТипов - См. описание в процедуре СравнитьТипы.
//
// Возвращаемое значение:
//    ТаблицаЗначений - См. описание возвращаемого значения в функции СоставТипа.
//
Функция ОбъединитьТипы(МассивИсточников)
	
	ТаблицаТипов = ТаблицаТипов();
	
	Для Каждого СтрокаТипа Из МассивИсточников Цикл
		Для Каждого СтрокаТаблицыТипов Из СтрокаТипа Цикл
			НоваяСтрока = ТаблицаТипов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыТипов);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаТипов;
	
КонецФункции

// Сравнивает различные источники типов на соответствие. Все типы в источниках должны совпадать.
// При наличии различий в составе типов источников добавляет ошибку, с описанием в каких источниках тип есть,
// а в каких нет.
//
// Параметры:
//    МассивИсточников - Массив с элементами типа ТаблицаЗначений. Описание см. в функции СоставТипа.
//
Процедура СравнитьТипы(МассивИсточников)
	
	ОбработанныеТипы = Новый Соответствие;
	
	Для Каждого ТаблицаТипов Из МассивИсточников Цикл
		Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
			Для Каждого Тип Из СтрокаТипа.Состав Цикл
				
				Если Тип = Неопределено Тогда
					ИмяТипа = СтрокаТипа.Описание;
					Если СтрЗаканчиваетсяНа(ИмяТипа, ".Тип") Тогда
						ИмяТипа = Лев(ИмяТипа, СтрДлина(ИмяТипа) - 4);
					КонецЕсли;
					Попытка
						МетаданныеТипа = Вычислить("Метаданные." + ИмяТипа);
					Исключение
						МетаданныеТипа = Неопределено;
					КонецПопытки;
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В состав %1 включено значение Неопределено.'"), СтрокаТипа.Описание);
					ДобавитьОшибку(МетаданныеТипа, НСтр("ru = 'Значение Неопределено в составе типа'"), ТекстОшибки);
					Продолжить;
				КонецЕсли;
				
				Если ОбработанныеТипы.Получить(Тип) = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ТаблицаТиповВнутренняя Из МассивИсточников Цикл
					Если ТаблицаТиповВнутренняя = ТаблицаТипов Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого СтрокаТипаВнутренняя Из ТаблицаТиповВнутренняя Цикл
						Если Не ВозможноСравнениеТипов(Тип, СтрокаТипаВнутренняя.ДопустимыеТипы) Тогда
							Продолжить;
						КонецЕсли;
						
						Отсутствующие = Новый Массив;
						Найденные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТипа.Описание);
						Если СтрокаТипаВнутренняя.Состав.Найти(Тип) = Неопределено Тогда
							Отсутствующие.Добавить(СтрокаТипаВнутренняя.Описание)
						Иначе
							Найденные.Добавить(СтрокаТипаВнутренняя.Описание);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если Отсутствующие.Количество() <> 0 Тогда
					ШаблонОшибки = НСтр("ru = '%1 отсутствует в составе
						|%2,
						|но присутствует в составе
						|%3'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Тип.ПолноеИмя(),
						МаркированныйСписок(Отсутствующие), МаркированныйСписок(Найденные));
					ДобавитьОшибку(Тип, НСтр("ru = 'Различается состав типов'"), ТекстОшибки);
				КонецЕсли;
				
				ОбработанныеТипы.Вставить(Тип, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Сравнивает различные источники типов на пересечение. Все типы в источниках должны быть различными.
// При наличии совпадений в составе типов источников добавляет ошибку, с описанием в какие источники
// входит повторяющийся тип.
//
// Параметры:
//    МассивИсточников - Массив с элементами типа ТаблицаЗначений. Описание см. в функции СоставТипа.
//
Процедура ПересечениеТипов(МассивИсточников)
	
	ОбработанныеТипы = Новый Соответствие;
	
	Для Каждого ТаблицаТипов Из МассивИсточников Цикл
		Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
			Для Каждого Тип Из СтрокаТипа.Состав Цикл
				Если ОбработанныеТипы.Получить(Тип) = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьОшибка = Ложь;
				Найденные = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТипа.Описание);
				
				Для Каждого ТаблицаТиповВнутренняя Из МассивИсточников Цикл
					Если ТаблицаТиповВнутренняя = ТаблицаТипов Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого СтрокаТипаВнутренняя Из ТаблицаТиповВнутренняя Цикл
						Если Не ВозможноСравнениеТипов(Тип, СтрокаТипаВнутренняя.ДопустимыеТипы) Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрокаТипаВнутренняя.Состав.Найти(Тип) <> Неопределено Тогда
							Найденные.Добавить(СтрокаТипаВнутренняя.Описание);
							ЕстьОшибка = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если ЕстьОшибка Тогда
					ШаблонОшибки = НСтр("ru = '%1 необходимо включить только в один источник. Сейчас он присутствует в
						|%2'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Тип.ПолноеИмя(),
						МаркированныйСписок(Найденные));
					ДобавитьОшибку(Тип, НСтр("ru = 'Пересекается состав типов'"), ТекстОшибки);
				КонецЕсли;
				ОбработанныеТипы.Вставить(Тип, Истина);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие предопределенного элемента у объекта метаданных.
//
// Параметры:
//    ПолноеИмяОбъектаМетаданных - Строка - Полное имя объекта метаданных строкой.
//    ИмяПредопределенныхДанных - Строка - Имя предопределенного элемента, наличие которого необходимо проверить.
//
Процедура ПроверитьНаличиеПредопределенногоЭлемента(ПолноеИмяОбъектаМетаданных, ИмяПредопределенныхДанных)
	
	МетаданныеОбъекта = Вычислить("Метаданные." + ПолноеИмяОбъектаМетаданных);
	МассивПредопределенных = МетаданныеОбъекта.ПолучитьИменаПредопределенных();
	
	Если МассивПредопределенных.Найти(ИмяПредопределенныхДанных) = Неопределено Тогда
		ШаблонОшибки = НСтр("ru = 'В ""%1"" отсутствует предопределенный элемент ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ПолноеИмяОбъектаМетаданных, ИмяПредопределенныхДанных);
		ДобавитьОшибку(МетаданныеОбъекта, НСтр("ru = 'Отсутствует предопределенный элемент'"), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие вставки кода. При отсутствии необходимой вставки записывается ошибка.
//
// Параметры:
//    ПроверяемыеДанные - ОбъектМетаданных - Объект метаданных для проверки вставки кода.
//                      - ТаблицаЗначений - Возвращаемое значение функции СоставТипа.
//                      - Строка - Полное имя объекта метаданных.
//                      - Массив - Массив объектов метаданных.
//    ТипМодуля - Строка - Тип модуля для проверки вставки кода. Возможные значения см. в процедуре ТекстМодуля.
//    СтрокаКода - Строка - Строка кода, наличие вызова которой нужно проверить.
//    ИмяПроцедурыИлиФункции - Строка - Имя процедуры или функции в которой должна быть размещена вставка кода.
//    ОтсутствиеМодуляЯвляетсяОшибкой - Булево - Если Истина, то при отсутствии указанного модуля будет записана ошибка.
//    ОтсутствиеПроцедурыЯвляетсяОшибкой - Булево - Если Истина и не найдена процедура или функция, указанная в параметре
//                                                  ИмяПроцедурыИлиФункции, то будет записана ошибка.
//
Процедура ПроверитьНаличиеВставкиКода(ПроверяемыеДанные, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции = "",
	ОтсутствиеМодуляЯвляетсяОшибкой = Истина, ОтсутствиеПроцедурыЯвляетсяОшибкой = Истина)
	
	ТипОбъекта = ТипЗнч(ПроверяемыеДанные);
	
	Если ТипОбъекта = Тип("ОбъектМетаданных") Тогда
		ПроверитьНаличиеВставкиКодаДляОбъекта(ПроверяемыеДанные, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции,
			ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
	ИначеЕсли ТипОбъекта = Тип("ТаблицаЗначений") Тогда
		Для Каждого СтрокаТипа Из ПроверяемыеДанные Цикл
			ПроверитьНаличиеВставкиКодаДляМассива(СтрокаТипа.Состав, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции,
				ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
		КонецЦикла;
	ИначеЕсли ТипОбъекта = Тип("Строка") Тогда
		ПроверитьНаличиеВставкиКодаДляМассива(СоставТипаИзСтроки(ПроверяемыеДанные), ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции,
			ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
	ИначеЕсли ТипОбъекта = Тип("Массив") Тогда
		ПроверитьНаличиеВставкиКодаДляМассива(ПроверяемыеДанные, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции,
			ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип параметра ПроверяемыеДанные в процедуре ""ПроверитьНаличиеВставкиКода""'");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст модуля.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - Объект для получения модуля.
//	ТипМодуля - Строка - Может принимать следующие значения:
//	 * ОсновнаяФормаОбъекта
//	 * ОсновнаяФормаСписка
//	 * МодульМенеджера
//	 * МодульОбъекта
//	 * МодульКоманды
//	 * Имя произвольной получаемой формы.
//
// Возвращаемое значение:
//    Строка - Текст модуля.
//
Функция ТекстМодуля(ОбъектМетаданных, Знач ТипМодуля)
	
	ШаблонИмени = "[КаталогВыгрузки][ИмяБазовогоТипа]\[ИмяОбъекта]\[СтруктураКаталогов].bsl";
	
	Если ТипМодуля = "ОсновнаяФормаОбъекта" Или ТипМодуля = "ОсновнаяФормаСписка" Тогда
		
		Если ТипМодуля = "ОсновнаяФормаОбъекта" Тогда
			Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных)
				Или Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
				Форма = ОбъектМетаданных.ОсновнаяФорма;
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
				Форма = ОбъектМетаданных.ОсновнаяФормаЗаписи;
			ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
				Или Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
				Форма = Неопределено;
			Иначе
				Форма = ОбъектМетаданных.ОсновнаяФормаОбъекта;
			КонецЕсли;
		ИначеЕсли ТипМодуля = "ОсновнаяФормаСписка" Тогда
			Если Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных)
				Или Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
				Форма = ОбъектМетаданных.ОсновнаяФорма;
			Иначе
				Форма = ОбъектМетаданных.ОсновнаяФормаСписка;
			КонецЕсли;
		КонецЕсли;
		Если Форма = Неопределено Тогда
			Возврат "";
		Иначе
			ИмяФормы = Форма.Имя;
		КонецЕсли;
		СтруктураКаталогов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Forms\%1\Ext\Form\Module", ИмяФормы);
	ИначеЕсли ТипМодуля = "МодульМенеджера" Или ТипМодуля = "МодульОбъекта" Или ТипМодуля = "МодульКоманды" Тогда
		ИмяШаблона = "";
		Если СоответствиеТерминов.Свойство(ТипМодуля, ИмяШаблона) Тогда
			ТипМодуля = ИмяШаблона;
		КонецЕсли;
		СтруктураКаталогов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Ext\%1", ТипМодуля);
	Иначе
		СтруктураКаталогов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Forms\%1\Ext\Form\Module", ТипМодуля);
	КонецЕсли;
	
	ИмяБазовогоТипа = СтрРазделить(ОбъектМетаданных.ПолноеИмя(), ".")[0];
	ИмяБазовогоТипа = СоответствиеТерминов[ИмяБазовогоТипа];
	ИмяОбъекта = ОбъектМетаданных.Имя;
	
	ИмяФайлаМодуля = СтрЗаменить(ШаблонИмени, "[КаталогВыгрузки]", КаталогВыгрузки);
	ИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, "[ИмяБазовогоТипа]", ИмяБазовогоТипа);
	ИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, "[ИмяОбъекта]", ИмяОбъекта);
	ИмяФайлаМодуля = СтрЗаменить(ИмяФайлаМодуля, "[СтруктураКаталогов]", СтруктураКаталогов);
	
	ФайлМодуля = Новый Файл(ИмяФайлаМодуля);
	
	Если Не ФайлМодуля.Существует() Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстМодуля = Новый ЧтениеТекста(ИмяФайлаМодуля);
	Возврат ТекстМодуля.Прочитать();
	
КонецФункции

// Возвращает текст процедуры по имени.
//
// Параметры:
//    ИмяПроцедуры - Строка - Имя процедуры, текст которой необходимо получить.
//    ТекстМодуля - Строка - Полный текст модуля.
//
// Возвращаемое значение:
//    Строка - Текст процедуры.
//
Функция ТекстПроцедуры(ИмяПроцедуры, ТекстМодуля)
	
	Возврат ТекстПроцедурыИлиФункции(ИмяПроцедуры, ТекстМодуля, Ложь);
	
КонецФункции

// Если при проверке наличия вставки кода возможно несколько вариантов вставки,
// например, новый вариант и устаревший, то возможно передать в эту функцию несколько вариантов
// и передать возвращаемое значение в процедуру ПроверитьНаличиеВставкиКода в параметр СтрокаКода.
//
// Параметры:
//    Вариант1 - Строка - Первый вариант вызова.
//    Вариант2 - Строка - Второй вариант вызова.
//
// Возвращаемое значение
//    Массив - Варианты вызова процедуры.
//
Функция ВариантыВызова(Вариант1, Вариант2)
	
	ВариантыВызова = Новый Массив;
	ВариантыВызова.Добавить(Вариант1);
	ВариантыВызова.Добавить(Вариант2);
	Возврат ВариантыВызова;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	ИсправлятьОшибки = НастройкиКД.ПараметрыДанных.Элементы.Найти("ИсправлятьОшибки").Значение;
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКД);
	
	ПроверитьВнедрение();
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(СхемаКомпоновкиДанных, НастройкиКД); // Без расшифровки.
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, Новый Структура("ТаблицаПроверки", ТаблицаПроверки)); // Без расшифровки.
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаТипов()
	
	ТаблицаТипов = Новый ТаблицаЗначений;
	ТаблицаТипов.Колонки.Добавить("Описание");
	ТаблицаТипов.Колонки.Добавить("ДопустимыеТипы");
	ТаблицаТипов.Колонки.Добавить("Состав");
	
	Возврат ТаблицаТипов;
	
КонецФункции

Функция НоваяСтрокаТаблицыТипов(Описание, ДопустимыеТипы, Состав)
	
	ТаблицаТипов = ТаблицаТипов();
	
	НоваяСтрока = ТаблицаТипов.Добавить();
	НоваяСтрока.Описание = Описание;
	НоваяСтрока.ДопустимыеТипы = ДопустимыеТипы;
	НоваяСтрока.Состав = Состав;
	
	Возврат ТаблицаТипов;
	
КонецФункции

Функция ВозможноСравнениеТипов(ОбъектМетаданных, ТипыДляСравнения)
	
	Если ПустаяСтрока(ТипыДляСравнения) Тогда
		Возврат Истина;
	ИначеЕсли ТипыДляСравнения = "ВсеКромеДокументов" Тогда
		Возврат Не Метаданные.Документы.Содержит(ОбъектМетаданных);
	Иначе
		ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
		Возврат СтрЧислоВхождений(ТипыДляСравнения, ИмяБазовогоТипа) > 0;
	КонецЕсли;
	
КонецФункции

Функция СоответствиеТерминов()
	
	СтруктураПредставлений = Новый Структура;
	
	// Виды объектов метаданных.
	СтруктураПредставлений.Вставить("AccountingRegister", "РегистрБухгалтерии");
	СтруктураПредставлений.Вставить("AccumulationRegister", "РегистрНакопления");
	СтруктураПредставлений.Вставить("BusinessProcess", "БизнесПроцесс");
	СтруктураПредставлений.Вставить("CalculationRegister", "РегистрРасчета");
	СтруктураПредставлений.Вставить("Catalog", "Справочник");
	СтруктураПредставлений.Вставить("ChartOfAccounts", "ПланСчетов");
	СтруктураПредставлений.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	СтруктураПредставлений.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	СтруктураПредставлений.Вставить("CommandGroup", "ГруппаКоманд");
	СтруктураПредставлений.Вставить("CommonAttribute", "ОбщийРеквизит");
	СтруктураПредставлений.Вставить("CommonCommand", "ОбщаяКоманда");
	СтруктураПредставлений.Вставить("CommonForm", "ОбщаяФорма");
	СтруктураПредставлений.Вставить("CommonModule", "ОбщийМодуль");
	СтруктураПредставлений.Вставить("CommonPicture", "ОбщаяКартинка");
	СтруктураПредставлений.Вставить("CommonTemplate", "ОбщийМакет");
	СтруктураПредставлений.Вставить("Configuration", "Конфигурация");
	СтруктураПредставлений.Вставить("Constant", "Константа");
	СтруктураПредставлений.Вставить("DataProcessor", "Обработка");
	СтруктураПредставлений.Вставить("DefinedType", "ОпределяемыйТип");
	СтруктураПредставлений.Вставить("Document", "Документ");
	СтруктураПредставлений.Вставить("DocumentJournal", "ЖурналДокументов");
	СтруктураПредставлений.Вставить("DocumentNumerator", "НумераторДокументов");
	СтруктураПредставлений.Вставить("Enum", "Перечисление");
	СтруктураПредставлений.Вставить("EventSubscription", "ПодпискаНаСобытие");
	СтруктураПредставлений.Вставить("ExchangePlan", "ПланОбмена");
	СтруктураПредставлений.Вставить("FilterCriterion", "КритерийОтбора");
	СтруктураПредставлений.Вставить("FunctionalOption", "ФункциональнаяОпция");
	СтруктураПредставлений.Вставить("FunctionalOptionsParameter", "ПараметрФункциональныхОпций");
	СтруктураПредставлений.Вставить("InformationRegister", "РегистрСведений");
	СтруктураПредставлений.Вставить("Language", "Язык");
	СтруктураПредставлений.Вставить("Report", "Отчет");
	СтруктураПредставлений.Вставить("Role", "Роль");
	СтруктураПредставлений.Вставить("ScheduledJob", "РегламентноеЗадание");
	СтруктураПредставлений.Вставить("Sequence", "Последовательность");
	СтруктураПредставлений.Вставить("SessionParameter", "ПараметрСеанса");
	СтруктураПредставлений.Вставить("SettingsStorage", "ХранилищеНастроек");
	СтруктураПредставлений.Вставить("Style", "Стиль");
	СтруктураПредставлений.Вставить("StyleItem", "ЭлементСтиля");
	СтруктураПредставлений.Вставить("Subsystem", "Подсистема");
	СтруктураПредставлений.Вставить("Task", "Задача");
	СтруктураПредставлений.Вставить("WebService", "WebСервис");
	СтруктураПредставлений.Вставить("WSReference", "WSСсылка");
	СтруктураПредставлений.Вставить("XDTOPackage", "ПакетXDTO");
	
	// Виды объектов метаданных (во множественном числе).
	СтруктураПредставлений.Вставить("AccountingRegisters", "РегистрБухгалтерии");
	СтруктураПредставлений.Вставить("AccumulationRegisters", "РегистрНакопления");
	СтруктураПредставлений.Вставить("BusinessProcesses", "БизнесПроцесс");
	СтруктураПредставлений.Вставить("CalculationRegisters", "РегистрРасчета");
	СтруктураПредставлений.Вставить("Catalogs", "Справочник");
	СтруктураПредставлений.Вставить("ChartsOfAccounts", "ПланСчетов");
	СтруктураПредставлений.Вставить("ChartsOfCalculationTypes", "ПланВидовРасчета");
	СтруктураПредставлений.Вставить("ChartsOfCharacteristicTypes", "ПланВидовХарактеристик");
	СтруктураПредставлений.Вставить("CommandGroups", "ГруппаКоманд");
	СтруктураПредставлений.Вставить("CommonAttributes", "ОбщийРеквизит");
	СтруктураПредставлений.Вставить("CommonCommands", "ОбщаяКоманда");
	СтруктураПредставлений.Вставить("CommonForms", "ОбщаяФорма");
	СтруктураПредставлений.Вставить("CommonModules", "ОбщийМодуль");
	СтруктураПредставлений.Вставить("CommonPictures", "ОбщаяКартинка");
	СтруктураПредставлений.Вставить("CommonTemplates", "ОбщийМакет");
	СтруктураПредставлений.Вставить("Configurations", "Конфигурация"); // Не используется.
	СтруктураПредставлений.Вставить("Constants", "Константа");
	СтруктураПредставлений.Вставить("DataProcessors", "Обработка");
	СтруктураПредставлений.Вставить("DefinedTypes", "ОпределяемыйТип");
	СтруктураПредставлений.Вставить("Documents", "Документ");
	СтруктураПредставлений.Вставить("DocumentJournals", "ЖурналДокументов");
		СтруктураПредставлений.Вставить("DocumentNumerator", "НумераторДокументов");
	СтруктураПредставлений.Вставить("Enums", "Перечисление");
	СтруктураПредставлений.Вставить("EventSubscriptions", "ПодпискаНаСобытие");
	СтруктураПредставлений.Вставить("ExchangePlans", "ПланОбмена");
	СтруктураПредставлений.Вставить("FilterCriteria", "КритерийОтбора");
	СтруктураПредставлений.Вставить("FunctionalOptions", "ФункциональнаяОпция");
	СтруктураПредставлений.Вставить("FunctionalOptionsParameters", "ПараметрФункциональныхОпций");
	СтруктураПредставлений.Вставить("InformationRegisters", "РегистрСведений");
	СтруктураПредставлений.Вставить("Languages", "Язык");
	СтруктураПредставлений.Вставить("Reports", "Отчет");
	СтруктураПредставлений.Вставить("Roles", "Роль");
	СтруктураПредставлений.Вставить("ScheduledJobs", "РегламентноеЗадание");
	СтруктураПредставлений.Вставить("Sequences", "Последовательность");
	СтруктураПредставлений.Вставить("SessionParameters", "ПараметрСеанса");
	СтруктураПредставлений.Вставить("SettingsStorages", "ХранилищеНастроек");
		СтруктураПредставлений.Вставить("Style", "Стиль");
	СтруктураПредставлений.Вставить("StyleItems", "ЭлементСтиля");
	СтруктураПредставлений.Вставить("Subsystems", "Подсистема");
	СтруктураПредставлений.Вставить("Tasks", "Задача");
	СтруктураПредставлений.Вставить("WebServices", "WebСервис");
		СтруктураПредставлений.Вставить("WSReference", "WSСсылка");
	СтруктураПредставлений.Вставить("XDTOPackages", "ПакетXDTO");
	
	// Типы вложенных объектов метаданных.
	СтруктураПредставлений.Вставить("Module", "Модуль");
	СтруктураПредставлений.Вставить("ManagerModule", "МодульМенеджера");
	СтруктураПредставлений.Вставить("ObjectModule", "МодульОбъекта");
	СтруктураПредставлений.Вставить("CommandModule", "МодульКоманды");
	СтруктураПредставлений.Вставить("RecordSetModule", "МодульНабораЗаписей");
	СтруктураПредставлений.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	СтруктураПредставлений.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	СтруктураПредставлений.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	СтруктураПредставлений.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	СтруктураПредставлений.Вставить("SessionModule", "МодульСеанса");
	
	СтруктураПредставлений.Вставить("Help", "Справка");
	СтруктураПредставлений.Вставить("Form", "Форма");
	СтруктураПредставлений.Вставить("Flowchart", "КартаМаршрута");
	СтруктураПредставлений.Вставить("Picture", "Картинка");
	СтруктураПредставлений.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	СтруктураПредставлений.Вставить("Template", "Макет");
	СтруктураПредставлений.Вставить("Command", "Команда");
	СтруктураПредставлений.Вставить("Aggregates", "Агрегаты");
	СтруктураПредставлений.Вставить("Recalculation", "Перерасчет");
	СтруктураПредставлений.Вставить("Predefined", "Предопределенные");
	СтруктураПредставлений.Вставить("Content", "Состав");
	СтруктураПредставлений.Вставить("Rights", "Права");
	СтруктураПредставлений.Вставить("Schedule", "Расписание");
	
	// Типы вложенных объектов метаданных (во множественном числе).
		СтруктураПредставлений.Вставить("Module", "Модуль");
		СтруктураПредставлений.Вставить("ManagerModule", "МодульМенеджера");
		СтруктураПредставлений.Вставить("ObjectModule", "МодульОбъекта");
		СтруктураПредставлений.Вставить("CommandModule", "МодульКоманды");
		СтруктураПредставлений.Вставить("RecordSetModule", "МодульНабораЗаписей");
		СтруктураПредставлений.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
		
		СтруктураПредставлений.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
		СтруктураПредставлений.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
		СтруктураПредставлений.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
		СтруктураПредставлений.Вставить("SessionModule", "МодульСеанса");
		
		СтруктураПредставлений.Вставить("Help", "Справка");
	СтруктураПредставлений.Вставить("Forms", "Форма");
		СтруктураПредставлений.Вставить("Flowchart", "КартаМаршрута");
		СтруктураПредставлений.Вставить("Picture", "Картинка");
		СтруктураПредставлений.Вставить("CommandInterface", "КомандныйИнтерфейс");
		
	СтруктураПредставлений.Вставить("Templates", "Макет");
	СтруктураПредставлений.Вставить("Commands", "Команда");
		СтруктураПредставлений.Вставить("Aggregates", "Агрегаты");
	СтруктураПредставлений.Вставить("Recalculations", "Перерасчет");
		СтруктураПредставлений.Вставить("Predefined", "Предопределенные");
		СтруктураПредставлений.Вставить("Content", "Состав");
		СтруктураПредставлений.Вставить("Rights", "Права");
		СтруктураПредставлений.Вставить("Schedule", "Расписание");
	
	// Виды объектов метаданных (во множественном числе).
	СтруктураПредставлений.Вставить("РегистрБухгалтерии", "AccountingRegisters");
	СтруктураПредставлений.Вставить("РегистрНакопления", "AccumulationRegisters");
	СтруктураПредставлений.Вставить("БизнесПроцесс", "BusinessProcesses");
	СтруктураПредставлений.Вставить("РегистрРасчета", "CalculationRegisters");
	СтруктураПредставлений.Вставить("Справочник", "Catalogs");
	СтруктураПредставлений.Вставить("ПланСчетов", "ChartsOfAccounts");
	СтруктураПредставлений.Вставить("ПланВидовРасчета", "ChartsOfCalculationTypes");
	СтруктураПредставлений.Вставить("ПланВидовХарактеристик", "ChartsOfCharacteristicTypes");
	СтруктураПредставлений.Вставить("ГруппаКоманд", "CommandGroups");
	СтруктураПредставлений.Вставить("ОбщийРеквизит", "CommonAttributes");
	СтруктураПредставлений.Вставить("ОбщаяКоманда", "CommonCommands");
	СтруктураПредставлений.Вставить("ОбщаяФорма", "CommonForms");
	СтруктураПредставлений.Вставить("ОбщийМодуль", "CommonModules");
	СтруктураПредставлений.Вставить("ОбщаяКартинка", "CommonPictures");
	СтруктураПредставлений.Вставить("ОбщийМакет", "CommonTemplates");
	СтруктураПредставлений.Вставить("Конфигурация", "Configurations"); // Не используется.
	СтруктураПредставлений.Вставить("Константа", "Constants");
	СтруктураПредставлений.Вставить("Обработка", "DataProcessors");
	СтруктураПредставлений.Вставить("ОпределяемыйТип", "DefinedTypes");
	СтруктураПредставлений.Вставить("Документ", "Documents");
	СтруктураПредставлений.Вставить("ЖурналДокументов", "DocumentJournals");
		СтруктураПредставлений.Вставить("НумераторДокументов", "DocumentNumerator");
	СтруктураПредставлений.Вставить("Перечисление", "Enums");
	СтруктураПредставлений.Вставить("ПодпискаНаСобытие", "EventSubscriptions");
	СтруктураПредставлений.Вставить("ПланОбмена", "ExchangePlans");
	СтруктураПредставлений.Вставить("КритерийОтбора", "FilterCriteria");
	СтруктураПредставлений.Вставить("ФункциональнаяОпция", "FunctionalOptions");
	СтруктураПредставлений.Вставить("ПараметрФункциональныхОпций", "FunctionalOptionsParameters");
	СтруктураПредставлений.Вставить("РегистрСведений", "InformationRegisters");
	СтруктураПредставлений.Вставить("Язык", "Languages");
	СтруктураПредставлений.Вставить("Отчет", "Reports");
	СтруктураПредставлений.Вставить("Роль", "Roles");
	СтруктураПредставлений.Вставить("РегламентноеЗадание", "ScheduledJobs");
	СтруктураПредставлений.Вставить("Последовательность", "Sequences");
	СтруктураПредставлений.Вставить("ПараметрСеанса", "SessionParameters");
	СтруктураПредставлений.Вставить("ХранилищеНастроек", "SettingsStorages");
		СтруктураПредставлений.Вставить("Стиль", "Style");
	СтруктураПредставлений.Вставить("ЭлементСтиля", "StyleItems");
	СтруктураПредставлений.Вставить("Подсистема", "Subsystems");
	СтруктураПредставлений.Вставить("Задача", "Tasks");
	СтруктураПредставлений.Вставить("WebСервис", "WebServices");
		СтруктураПредставлений.Вставить("WSСсылка", "WSReference");
	СтруктураПредставлений.Вставить("ПакетXDTO", "XDTOPackages");
	
	// Типы вложенных объектов метаданных.
	СтруктураПредставлений.Вставить("Модуль", "Module");
	СтруктураПредставлений.Вставить("МодульМенеджера", "ManagerModule");
	СтруктураПредставлений.Вставить("МодульОбъекта", "ObjectModule");
	СтруктураПредставлений.Вставить("МодульКоманды", "CommandModule");
	СтруктураПредставлений.Вставить("МодульНабораЗаписей", "RecordSetModule");
	СтруктураПредставлений.Вставить("МодульМенеджераЗначения", "ValueManagerModule");
	
	СтруктураПредставлений.Вставить("МодульВнешнегоСоединения", "ExternalConnectionModule");
	СтруктураПредставлений.Вставить("МодульУправляемогоПриложения", "ManagedApplicationModule");
	СтруктураПредставлений.Вставить("МодульОбычногоПриложения", "OrdinaryApplicationModule");
	СтруктураПредставлений.Вставить("МодульСеанса", "SessionModule");
	
	СтруктураПредставлений.Вставить("Справка", "Help");
	СтруктураПредставлений.Вставить("Форма", "Form");
	СтруктураПредставлений.Вставить("КартаМаршрута", "Flowchart");
	СтруктураПредставлений.Вставить("Картинка", "Picture");
	СтруктураПредставлений.Вставить("КомандныйИнтерфейс", "CommandInterface");
	
	СтруктураПредставлений.Вставить("Макет", "Template");
	СтруктураПредставлений.Вставить("Команда", "Command");
	СтруктураПредставлений.Вставить("Агрегаты", "Aggregates");
	СтруктураПредставлений.Вставить("Перерасчет", "Recalculation");
	СтруктураПредставлений.Вставить("Предопределенные", "Predefined");
	СтруктураПредставлений.Вставить("Состав", "Content");
	СтруктураПредставлений.Вставить("Права", "Rights");
	СтруктураПредставлений.Вставить("Расписание", "Schedule");
	
	// Виды объектов метаданных.
	СтруктураПредставлений.Вставить("Constant", "Константа");
	СтруктураПредставлений.Вставить("CalculationRegister", "РегистрРасчета");
	СтруктураПредставлений.Вставить("InformationRegister", "РегистрСведений");
	СтруктураПредставлений.Вставить("AccumulationRegister", "РегистрНакопления");
	СтруктураПредставлений.Вставить("AccountingRegister", "РегистрБухгалтерии");
	СтруктураПредставлений.Вставить("ExchangePlan", "ПланОбмена");
	СтруктураПредставлений.Вставить("Catalog", "Справочник");
	СтруктураПредставлений.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	СтруктураПредставлений.Вставить("ChartOfAccounts", "ПланСчетов");
	СтруктураПредставлений.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	СтруктураПредставлений.Вставить("Document", "Документ");
	СтруктураПредставлений.Вставить("BusinessProcess", "БизнесПроцесс");
	СтруктураПредставлений.Вставить("Task", "Задача");
	СтруктураПредставлений.Вставить("Sequence", "Последовательность");
	СтруктураПредставлений.Вставить("DocumentJournal", "ЖурналДокументов");
	
	СтруктураПредставлений.Вставить("InteractiveDelete", НСтр("ru = 'Интерактивное удаление'"));
	СтруктураПредставлений.Вставить("InteractiveDeletePredefinedData", НСтр("ru = 'Интерактивное удаление предопределенных'"));
	СтруктураПредставлений.Вставить("InteractiveSetDeletionMarkPredefinedData", НСтр("ru = 'Интерактивная пометка на удаление предопределенных'"));
	СтруктураПредставлений.Вставить("InteractiveClearDeletionMarkPredefinedData", НСтр("ru = 'Интерактивное снятие пометки удаления предопределенных'"));
	СтруктураПредставлений.Вставить("InteractiveDeleteMarkedPredefinedData", НСтр("ru = 'Интерактивное удаление помеченных предопределенных'"));
	
	Возврат СтруктураПредставлений;
	
КонецФункции

Функция ТекстПроцедурыИлиФункции(Знач ИмяПроцедурыИлиФункции, ТекстМодуля, ЭтоФункция = Неопределено)
	
	Если ЭтоФункция = Неопределено Тогда
		Если СтрНачинаетсяС(ИмяПроцедурыИлиФункции, "Функция") Тогда
			ЭтоФункция = Истина;
		ИначеЕсли СтрНачинаетсяС(ИмяПроцедурыИлиФункции, "Процедура") Тогда
			ЭтоФункция = Ложь;
		КонецЕсли;
	Иначе
		ИмяПроцедурыИлиФункции = ?(ЭтоФункция, "Функция", "Процедура") + " " + ИмяПроцедурыИлиФункции;
	КонецЕсли;
	
	Если Не СтрЗаканчиваетсяНа(ИмяПроцедурыИлиФункции, "(") Тогда
		ИмяПроцедурыИлиФункции = ИмяПроцедурыИлиФункции + "(";
	КонецЕсли;
	
	Если ЭтоФункция = Неопределено Тогда
		ПозицияНачала = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, "Функция " + ИмяПроцедурыИлиФункции);
		ЭтоФункция = Истина;
		Если ПозицияНачала = 0 Тогда
			ПозицияНачала = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, "Процедура " + ИмяПроцедурыИлиФункции);
			ЭтоФункция = Ложь;
		КонецЕсли;
	Иначе
		ПозицияНачала = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, ИмяПроцедурыИлиФункции);
	КонецЕсли;
	
	Если ПозицияНачала = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаОкончания = ?(ЭтоФункция, "КонецФункции", "КонецПроцедуры");
	ПозицияОкончания = СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, СтрокаОкончания, ПозицияНачала);
	
	ТекстСОбъявлением = Сред(ТекстМодуля, ПозицияНачала, ПозицияОкончания - ПозицияНачала);
	ЗакрывающаяСкобка = СтрНайтиНеКомментарийИНеСтроку(ТекстСОбъявлением, ")");
	ПереводСтроки = СтрНайти(ТекстСОбъявлением, Символы.ПС,, ЗакрывающаяСкобка);
	
	Возврат Сред(ТекстСОбъявлением, ПереводСтроки + 1);
	
КонецФункции

Функция СтрНайтиНеКомментарийИНеСтроку(Строка, ПодстрокаПоиска, Знач НачальнаяПозиция = 1, Знач НомерВхождения = 1)
	Пока Истина Цикл
		ПозицияПервогоСимвола = СтрНайти(Строка, ПодстрокаПоиска, , НачальнаяПозиция, НомерВхождения);
		Если ПозицияПервогоСимвола = 0 Тогда
			Возврат 0;
		КонецЕсли;
		ПозицияВозвратаКаретки = СтрНайти(Строка, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияПервогоСимвола);
		Если ПозицияВозвратаКаретки = ПозицияПервогоСимвола + 1 Тогда
			Возврат ПозицияПервогоСимвола;
		КонецЕсли;
		СтрокаМеждуВозвратомКареткиИПодстрокой = СокрЛП(Сред(Строка, ПозицияВозвратаКаретки, ПозицияПервогоСимвола - ПозицияВозвратаКаретки));
		Если СтрокаМеждуВозвратомКареткиИПодстрокой = "" Тогда
			Возврат ПозицияПервогоСимвола;
		КонецЕсли;
		ЧетноеКоличествоКавычек = (СтрЧислоВхождений(СтрокаМеждуВозвратомКареткиИПодстрокой, """")%2 = 0);
		ЭтоПродолжениеСтроки = СтрНачинаетсяС(СтрокаМеждуВозвратомКареткиИПодстрокой, "|");
		Если ЧетноеКоличествоКавычек <> ЭтоПродолжениеСтроки // Все кавычки закрыты.
			И СтрНайти(СтрокаМеждуВозвратомКареткиИПодстрокой, "//") = 0 Тогда // Комментарий не открыт.
			Возврат ПозицияПервогоСимвола;
		КонецЕсли;
		// Продолжение цикла.
		НачальнаяПозиция = ПозицияПервогоСимвола + 1;
		НомерВхождения = 1;
	КонецЦикла;
КонецФункции

Процедура ВыгрузитьКонфигурациюВXML(КаталогВыгрузкиКонфигурации)
	
	Если Не ПустаяСтрока(КаталогВыгрузкиКонфигурации) Тогда
		Каталог = Новый Файл(КаталогВыгрузкиКонфигурации);
		Если Не Каталог.Существует() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не существует.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		Если НайтиФайлы(КаталогВыгрузкиКонфигурации, "Configuration.xml").Количество() = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Указанный каталог выгрузки ""%1"" не содержит файлов выгрузки конфигурации.'"), КаталогВыгрузкиКонфигурации);
		КонецЕсли;
		КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиКонфигурации);
		Возврат;
	КонецЕсли;
	
	Если ПользователиИнформационнойБазы.ТекущийПользователь().ПарольУстановлен Тогда
		ВызватьИсключение НСтр("ru = 'Проверка внедрения возможна только для пользователя без пароля.'");
	КонецЕсли;
	
	КаталогВыгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2_%3\", КаталогВременныхФайлов(), "ПроверкаВнедренияБСП", Лев(Новый УникальныйИдентификатор, 4));
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	Файл = Новый Файл(КаталогВыгрузки);
	СоздатьКаталог(КаталогВыгрузки);
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если ОткрытКонфигуратор() Тогда
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединения).file;
			КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", КаталогВыгрузки + "\1Cv8.1CD");
			СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("File=""%1"";", КаталогВыгрузки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Для проверки внедрения необходимо закрыть конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	Кавычка = """";
	ПутьКБазе = СтрЗаменить(СтрокаСоединения, Кавычка, Кавычка + Кавычка);
	
	КодВозврата = Неопределено;
	Кавычка = """";
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Пароль = "";
	ИмяФайлаСообщений = КаталогВыгрузки + "\СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	
	ЗапуститьПриложение(Кавычка + КаталогПрограммы + "1cv8.exe" + Кавычка + " DESIGNER"
		+ " /IBConnectionString " + Кавычка + ПутьКБазе + Кавычка
		+ " /N "                  + Кавычка + Пользователь + Кавычка
		+ " /P "                  + Кавычка + Пароль + Кавычка
		+ " /DumpConfigToFiles "  + Кавычка + КаталогВыгрузки + Кавычка
		+ " /Out "                + Кавычка + ИмяФайлаСообщений + Кавычка
		+ " /DisableStartupMessages /DisableStartupDialogs "
		,
		,
		Истина,
		КодВозврата);
	
	Если КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
			Если ПустаяСтрока(Сообщения) Тогда
				Сообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код возврата: %1'"), КодВозврата);
			КонецЕсли;
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить выгрузку конфигурации в файлы по причине:
			           |%1'"), Сообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьКонфигурациюИзXML()
	
	Если ЗагружаемыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОткрытКонфигуратор() Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно выполнить загрузку исправлений в конфигурацию т.к. открыт конфигуратор.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ИмяФайлаДляЗагрузки = КаталогВыгрузки + "ФайлыДляЗагрузки.txt";
	ИменаФайлов = СтрСоединить(ЗагружаемыеФайлы, Символы.ПС);
	СписокФайлов = Новый ТекстовыйДокумент;
	СписокФайлов.УстановитьТекст(ИменаФайлов);
	СписокФайлов.Записать(ИмяФайлаДляЗагрузки);
	
	КодВозврата = Неопределено;
	Кавычка = """";
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	Пароль = "";
	ИмяФайлаСообщений = КаталогВыгрузки + "СообщенияВыгрузкиКонфигурацииВФайлы.txt";
	КаталогПрограммы = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("КаталогПрограммы");
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	ПутьКБазе = СтрЗаменить(СтрокаСоединения, Кавычка, Кавычка + Кавычка);
	
	ЗапуститьПриложение(Кавычка + КаталогПрограммы + "1cv8.exe" + Кавычка + " DESIGNER"
		+ " /IBConnectionString "  + Кавычка + ПутьКБазе + Кавычка
		+ " /N "                   + Кавычка + Пользователь + Кавычка
		+ " /P "                   + Кавычка + Пароль + Кавычка
		+ " /LoadConfigFromFiles " + Кавычка + КаталогВыгрузки + Кавычка
		+ " -listfile "            + Кавычка + ИмяФайлаДляЗагрузки+ Кавычка
		+ " /Out "                 + Кавычка + ИмяФайлаСообщений + Кавычка
		+ " /DisableStartupMessages /DisableStartupDialogs "
		,
		,
		Истина,
		КодВозврата);
	
	Если КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
			Если ПустаяСтрока(Сообщения) Тогда
				Сообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код возврата: %1'"), КодВозврата);
			КонецЕсли;
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить загрузку конфигурации из файлов по причине:
				|%1'"), Сообщения);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПроверки(ПараметрыПроверки)
	
	Если ПараметрыПроверки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатСтрокой = ?(ПараметрыПроверки.Свойство("РезультатСтрокой"), ПараметрыПроверки.РезультатСтрокой, Ложь);
	
	Если ПараметрыПроверки.Свойство("РасширениеФайлаПроверки") Тогда
		РасширениеФайлаПроверки = ПараметрыПроверки.РасширениеФайлаПроверки;
		ИмяФайлаРезультатаПроверки = ПолучитьИмяВременногоФайла(РасширениеФайлаПроверки);
	ИначеЕсли ПараметрыПроверки.Свойство("ПолныйПутьКФайлуПроверки") Тогда
		ИмяФайлаРезультатаПроверки = ПараметрыПроверки.ПолныйПутьКФайлуПроверки;
		РасширениеФайлаПроверки = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайлаРезультатаПроверки);
	КонецЕсли;
	Если НРег(РасширениеФайлаПроверки) = "txt" Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ШаблонОшибки = НСтр("ru = 'Объект: %1
		|Проверка: %2
		|Текст ошибки: %3'");
		Для Каждого ОшибкаВнедрения Из ТаблицаПроверки Цикл
			ТекстовыйДокумент.ДобавитьСтроку(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			ОшибкаВнедрения.ОбъектМетаданных, ОшибкаВнедрения.КраткоеОписаниеОшибки,
			ОшибкаВнедрения.ПодробноеОписаниеОшибки));
		КонецЦикла;
		Если РезультатСтрокой Тогда
			ТекстОшибки = ТекстовыйДокумент.ПолучитьТекст();
		Иначе
			ТекстовыйДокумент.Записать(ИмяФайлаРезультатаПроверки);
		КонецЕсли;
	ИначеЕсли НРег(РасширениеФайлаПроверки) = "xml" Тогда
		ЗаписьXML = Новый ЗаписьXML;
		Если РезультатСтрокой Тогда
			ЗаписьXML.УстановитьСтроку("UTF-8");
		Иначе
			ЗаписьXML.ОткрытьФайл(ИмяФайлаРезультатаПроверки);
		КонецЕсли;
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("ПроверкаВнедрения");
		Для Каждого ОшибкаВнедрения Из ТаблицаПроверки Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Ошибка");
			ЗаписьXML.ЗаписатьНачалоЭлемента("ОбъектМетаданных");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.ОбъектМетаданных);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("Проверка");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.КраткоеОписаниеОшибки);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстОшибки");
			ЗаписьXML.ЗаписатьТекст(ОшибкаВнедрения.ПодробноеОписаниеОшибки);
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ТекстОшибки = ЗаписьXML.Закрыть();
	КонецЕсли;
	Возврат ?(РезультатСтрокой, ТекстОшибки, ИмяФайлаРезультатаПроверки);
	
КонецФункции

Процедура ЗаполнитьДанныеДляПроверки(ПараметрыПроверки)
	
	СоответствиеТерминов = СоответствиеТерминов();
	
	ДеревоПодсистем = Новый ДеревоЗначений;
	ДеревоПодсистем.Колонки.Добавить("Подсистема");
	ЗаполнитьДеревоПодсистем(Метаданные.Подсистемы, ДеревоПодсистем.Строки);
	
	СоответствиеОбъектов = Новый Соответствие;
	Для Каждого Подсистема Из Метаданные.Подсистемы Цикл
		ЗаполнитьОбъектыПодсистем(Подсистема);
	КонецЦикла;
	
	ЗагружаемыеФайлы = Новый Массив;
	
	Если ПараметрыПроверки <> Неопределено И ПараметрыПроверки.Свойство("ИсправлятьОшибки") Тогда
		ИсправлятьОшибки = ПараметрыПроверки.ИсправлятьОшибки;
	Иначе
		ИсправлятьОшибки = ?(ИсправлятьОшибки = Неопределено, Ложь, ИсправлятьОшибки);
	КонецЕсли;
	
	ТаблицаПроверки.Очистить();
	
КонецПроцедуры

Функция ОткрытКонфигуратор()
	
	Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ВРег("Designer") Тогда // Конфигуратор
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция СоставТипаИзСтроки(СтрокаТипа)
	
	МетаданныеИсточника = Вычислить("Метаданные." + СтрокаТипа);
	МассивМетаданных = Новый Массив;
	Если ТипЗнч(МетаданныеИсточника) = Тип("ОписаниеТипов") Тогда
		Для Каждого Тип Из МетаданныеИсточника.Типы() Цикл
			МассивМетаданных.Добавить(Метаданные.НайтиПоТипу(Тип));
		КонецЦикла;
	Иначе
		Для Каждого ОбъектМетаданных Из МетаданныеИсточника Цикл
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивМетаданных;
	
КонецФункции

Процедура ИсключитьТипы(ИсключаемыеТипы, МассивМетаданных)
	
	Если Не ПустаяСтрока(ИсключаемыеТипы) Тогда
		
		МассивИсключаемыхТипов = СтрРазделить(ИсключаемыеТипы, ",",);
		
		Для Каждого ИсключаемыйТип Из МассивИсключаемыхТипов Цикл
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИсключаемыйТип);
			
			ИндексЭлемента = МассивМетаданных.Найти(ОбъектМетаданных);
			
			Если ИндексЭлемента <> Неопределено Тогда
				
				МассивМетаданных.Удалить(ИндексЭлемента);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоПодсистем(Подсистемы, ДеревоПодсистем)
	
	Для Каждого Подсистема Из Подсистемы Цикл
		НоваяСтрока = ДеревоПодсистем.Добавить();
		НоваяСтрока.Подсистема = Подсистема;
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьДеревоПодсистем(Подсистема.Подсистемы, НоваяСтрока.Строки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыПодсистем(Подсистема)
	
	Для Каждого Объект Из Подсистема.Состав Цикл
		СтрокаДерева = ДеревоПодсистем.Строки.Найти(Подсистема, "Подсистема", Истина);
		СоответствиеОбъектов.Вставить(Объект, ПодсистемаВерхнегоУровня(СтрокаДерева));
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ЗаполнитьОбъектыПодсистем(ПодчиненнаяПодсистема)
	КонецЦикла;
	
КонецПроцедуры

Функция ПодсистемаВерхнегоУровня(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		Возврат ПодсистемаВерхнегоУровня(СтрокаДерева.Родитель);
	Иначе
		Возврат СтрокаДерева.Подсистема;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьНаличиеВставкиКодаДляМассива(ПроверяемыеДанные, ТипМодуля, СтрокаКода,
	ИмяПроцедурыИлиФункции, ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой)
	
	Для Каждого ОбъектМетаданных Из ПроверяемыеДанные Цикл
		ПроверитьНаличиеВставкиКодаДляОбъекта(ОбъектМетаданных, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции,
			ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеВставкиКодаДляОбъекта(ОбъектМетаданных, ТипМодуля, СтрокаКода,
	ИмяПроцедурыИлиФункции, ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой)
	
	ТекстМодуля = ТекстМодуля(ОбъектМетаданных, ТипМодуля);
	
	Если ТипЗнч(СтрокаКода) = Тип("Массив") Тогда
		Для Каждого СтрокаВызова Из СтрокаКода Цикл
			ТекстМодуляСодержитПроцедуру(ОбъектМетаданных, ТекстМодуля, ТипМодуля, СтрокаВызова,
				ИмяПроцедурыИлиФункции, ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТекстМодуляСодержитПроцедуру(ОбъектМетаданных, ТекстМодуля, ТипМодуля, СтрокаКода,
		ИмяПроцедурыИлиФункции, ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой);
	
КонецПроцедуры

Процедура ТекстМодуляСодержитПроцедуру(ОбъектМетаданных, ТекстМодуля, ТипМодуля, СтрокаКода, ИмяПроцедурыИлиФункции,
	ОтсутствиеМодуляЯвляетсяОшибкой, ОтсутствиеПроцедурыЯвляетсяОшибкой)
	
	Если ТипЗнч(СтрокаКода) = Тип("Массив") Тогда
		СтрокаВызова = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1"" или ""%2""'"), СтрокаКода[0], СтрокаКода[1]);
	Иначе
		СтрокаВызова = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '""%1""'"), СтрокаКода);
	КонецЕсли;
	
	МодульПустой = ПустаяСтрока(ТекстМодуля);
	ЗаданоИмяПроцедуры = Не ПустаяСтрока(ИмяПроцедурыИлиФункции);
	ПолноеИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	КраткоеПредставлениеОшибки = НСтр("ru = 'Отсутствует обязательная вставка кода'");
	
	Если МодульПустой Тогда
		Если ОтсутствиеМодуляЯвляетсяОшибкой Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта %1 отсутствует модуль %2. 
				|Обязательно наличие модуля и вызова из него %3'"),
				ПолноеИмяОбъекта, ТипМодуля, СтрокаВызова);
			ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
		КонецЕсли;
		Возврат;
	Иначе
		ОбластьПоиска = ТекстМодуля;
		Если ЗаданоИмяПроцедуры Тогда
			ОбластьПоиска = ТекстПроцедурыИлиФункции(ИмяПроцедурыИлиФункции, ТекстМодуля);
			Если ПустаяСтрока(ОбластьПоиска) Тогда
				Если ОтсутствиеПроцедурыЯвляетсяОшибкой Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует обязательная процедура %3. 
						|В ней требуется наличие вставки кода %4'"),
						ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
					ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаКода) = Тип("Массив") Тогда
			Если СтрНайти(ОбластьПоиска, СтрокаКода[0]) = 0 И СтрНайти(ОбластьПоиска, СтрокаКода[1]) = 0 Тогда
				Если ЗаданоИмяПроцедуры Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 в процедуре %3 
					|отсутствует обязательная вставка кода %4'"),
					ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует
					|обязательная вставка кода %3'"),
					ТипМодуля, ПолноеИмяОбъекта, СтрокаВызова);
				КонецЕсли;
				ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
			КонецЕсли;
		Иначе
			Если СтрНайти(ОбластьПоиска, СтрокаКода) = 0 Тогда
				Если ЗаданоИмяПроцедуры Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 в процедуре %3 
					|отсутствует обязательная вставка кода %4'"),
					ТипМодуля, ПолноеИмяОбъекта, ИмяПроцедурыИлиФункции, СтрокаВызова);
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В модуле %1 объекта %2 отсутствует
					|обязательная вставка кода %3'"),
					ТипМодуля, ПолноеИмяОбъекта, СтрокаВызова);
				КонецЕсли;
				ДобавитьОшибку(ОбъектМетаданных, КраткоеПредставлениеОшибки, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция МаркированныйСписок(Элементы)
	
	Маркер = "• ";
	Строка = СтрСоединить(Элементы, Символы.ПС + Маркер);
	Строка = Маркер + Строка;
	
	Возврат Строка;
	
КонецФункции

Функция ЭтоОбъектБСП(ОбъектМетаданных)
	ПодсистемаОбъекта = СоответствиеОбъектов.Получить(ОбъектМетаданных);
	Возврат ПодсистемаОбъекта = Метаданные.Подсистемы.СтандартныеПодсистемы;
КонецФункции

Функция ЭтоОбъектРасширения(ОбъектМетаданных)
	Возврат ОбъектМетаданных.РасширениеКонфигурации() <> Неопределено;
КонецФункции

Функция ЭтоДемоБСП()
	Возврат Метаданные.Имя = "БиблиотекаСтандартныхПодсистемДемо";
КонецФункции

Функция СвойстваОбъектаПоИмениФайла(ИмяФайла)
	
	ИмяОбъекта = СтрЗаменить(ИмяФайла, КаталогВыгрузки, "");
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "Ext\", "");
	ИмяОбъекта = Лев(ИмяОбъекта, СтрДлина(ИмяОбъекта) - 4);
	ЧастиИмени = СтрРазделить(ИмяОбъекта, "\", Ложь);
	
	МассивИмени = Новый Массив;
	Для Каждого ЧастьИмени Из ЧастиИмени Цикл
		Если СоответствиеТерминов.Свойство(ЧастьИмени) Тогда
			МассивИмени.Добавить(СоответствиеТерминов[ЧастьИмени]);
		Иначе
			МассивИмени.Добавить(ЧастьИмени);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваОбъекта = Новый Структура;
	СвойстваОбъекта.Вставить("Представление", СтрСоединить(МассивИмени, "."));
	СвойстваОбъекта.Вставить("ОбъектМетаданных", Метаданные.НайтиПоПолномуИмени(МассивИмени[0] + "." + МассивИмени[1]));
	
	Возврат СвойстваОбъекта;
	
КонецФункции

Функция ДокументDOM(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML;
	ПостроительDOM = Новый ПостроительDOM;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

Процедура ЗаписатьДокументDOMВФайл(ДокументDOM, ИмяФайла)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	ЗагружаемыеФайлы.Добавить(ИмяФайла);
	
КонецПроцедуры

Функция ВычислитьВыражениеXPath(Выражение, ДокументDOM)
	
	Разыменователь = ДокументDOM.СоздатьРазыменовательПИ();
	Возврат ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	
КонецФункции

Функция ПредставлениеОбъектаМетаданных(ОбъектМетаданных)
	Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	МассивПодстрок = СтрРазделить(ПолноеИмя, ".");
	Вид = МассивПодстрок[0];
	Имя = МассивПодстрок[1];
	ПредставлениеВида = "";
	Для НомерСимвола = 1 По СтрДлина(Вид) Цикл
		Символ = Сред(Вид, НомерСимвола, 1);
		Если Символ = ВРег(Символ) Тогда
			Если ПредставлениеВида = "" Тогда
				ПредставлениеВида = Символ;
			Иначе
				ПредставлениеВида = ПредставлениеВида + " " + НРег(Символ);
			КонецЕсли;
		Иначе
			ПредставлениеВида = ПредставлениеВида + Символ;
		КонецЕсли;
	КонецЦикла;
	Представление = ПредставлениеВида + " " + Имя;
	РасширениеКонфигурации = ОбъектМетаданных.РасширениеКонфигурации();
	Если ТипЗнч(РасширениеКонфигурации) = Тип("РасширениеКонфигурации") Тогда
		Представление = Представление + " " + НСтр("ru = 'расширения'") + " " + РасширениеКонфигурации.Имя;
	КонецЕсли;
	Возврат Представление;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыПодсистем

#Область ВариантыОтчетов

Процедура ВариантыОтчетов_ПроверитьПодключениеКФормамОтчета(Кэш, СтрокаОтчет)
	Если Не СтрокаОтчет.ФорматНастроекСКД Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаОтчет.Метаданные.Имя = "УниверсальныйОтчет" Тогда
		Возврат;
	КонецЕсли;
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	
	ПодключенКОсновнойФорме = МодульВариантыОтчетов.ОтчетПодключенКОсновнойФорме(СтрокаОтчет.Метаданные, Кэш.ФлажокОсновнойФормы);
	ПодключенКФормеНастроек = МодульВариантыОтчетов.ОтчетПодключенКФормеНастроек(СтрокаОтчет.Метаданные, Кэш.ФлажокФормыНастроек);
	Если ПодключенКОсновнойФорме <> ПодключенКФормеНастроек Тогда
		Если ПодключенКОсновнойФорме Тогда
			ТекстОшибки = НСтр("ru = 'Отчет подключен к общей форме отчета, но не подключен к общей форме настроек.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Отчет не подключен к общей форме отчета, но подключен к общей форме настроек.'");
		КонецЕсли;
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Подробнее см. в документации по внедрению подсистемы.'");
		ДобавитьОшибку(
			СтрокаОтчет.Метаданные,
			НСтр("ru = 'Отчет не подключен к общим формам'"),
			ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ВариантыОтчетов_ПроверитьИспользованиеУстаревшихСвойств(Кэш, СтрокаОтчет)
	Если Не СтрокаОтчет.ОпределитьНастройкиФормы Тогда
		Возврат;
	КонецЕсли;
	НастройкиОтчета = ОбщегоНазначения.ОбщийМодуль("ОтчетыКлиентСервер").ПолучитьНастройкиОтчетаПоУмолчанию();
	Попытка
		СтрокаОтчет.Объект.ОпределитьНастройкиФормы(Неопределено, Неопределено, НастройкиОтчета);
	Исключение
		ТекстОшибки = НСтр("ru = 'Модуль объекта отчета, процедура ""ОпределитьНастройкиФормы"":
			|  Ошибка при вызове события с параметрами (Неопределено, Неопределено, НастройкиОтчета):
			|    %1
			|  По возможности следует отказаться от использования параметров ""Форма"" и ""КлючВарианта"",
			|  поскольку в них может быть передано значение Неопределено.
			|  Типы параметров этой процедуры см. в шаблоне этой процедуры,
			|  который описан в комментарии к ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().'");
		Подробно = СтрЗаменить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Символы.ПС, Символы.ПС + "    ");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Подробно);
		ДобавитьОшибку(
			СтрокаОтчет.Метаданные,
			НСтр("ru = 'Используются необязательные параметры события ОпределитьНастройкиФормы'"),
			ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	ТекстМодуля = ТекстМодуля(СтрокаОтчет.Метаданные, "МодульОбъекта");
	ТекстПроцедуры = ТекстПроцедуры("ОпределитьНастройкиФормы", ТекстМодуля);
	
	Если Не ПустаяСтрока(ТекстПроцедуры) Тогда
		Имена = "";
		Если СтрНайти(ТекстПроцедуры, "ПараметрыПечатиПоУмолчанию") > 0 Тогда
			Имена = ?(Имена = "", "", Имена + ", ") + "ПараметрыПечатиПоУмолчанию";
		КонецЕсли;
		Если СтрНайти(ТекстПроцедуры, "СоответствиеПериодичностиПараметров") > 0 Тогда
			Имена = ?(Имена = "", "", Имена + ", ") + "СоответствиеПериодичностиПараметров";
		КонецЕсли;
		Если Имена <> "" Тогда
			ТекстОшибки = НСтр("ru = 'Модуль объекта отчета, процедура ""ОпределитьНастройкиФормы"":
				|  Встречаются обращения к устаревшим параметрам ""%1"".
				|  Актуальный состав параметров см. в ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Имена);
			ДобавитьОшибку(
				СтрокаОтчет.Метаданные,
				НСтр("ru = 'Используются устаревшие настройки в ОпределитьНастройкиФормы'"),
				ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПриОпределенииПараметровВыбора Тогда
		ТекстПроцедуры = ТекстПроцедуры("ПриОпределенииПараметровВыбора", ТекстМодуля);
		
		Если Не ПустаяСтрока(ТекстПроцедуры) Тогда
			Если СтрНайти(ТекстПроцедуры, "Форма") > 0 Тогда
				ТекстОшибки = НСтр("ru = 'Модуль объекта отчета, процедура ""ПриОпределенииПараметровВыбора"":
					|  Встречаются обращения к параметру ""Форма"".
					|  По возможности следует отказаться от использования этого параметра,
					|  поскольку в нем может быть передано значение Неопределено.
					|  Типы параметров этой процедуры см. в шаблоне этой процедуры,
					|  который описан в комментарии к ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().'");
				ДобавитьОшибку(
					СтрокаОтчет.Метаданные,
					НСтр("ru = 'Используются устаревшие настройки в ОпределитьНастройкиФормы'"),
					ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВариантыОтчетов_ПроверитьНастройкиДляПоиска(Кэш, СтрокаОтчет, СтрокаВариант)
	Если Не СтрокаВариант.Включен
		Или СтрокаВариант.Размещение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НадоЗаполнитьОписание = Ложь;
	НадоЗаполнитьНастройкиДляПоиска = Ложь;
	Если Не ЗначениеЗаполнено(СтрокаВариант.Описание) Тогда
		НадоЗаполнитьОписание = Истина;
	КонецЕсли;
	Если Не СтрокаОтчет.ИспользуетСКД
		И Не ЗначениеЗаполнено(СтрокаВариант.НастройкиДляПоиска.НаименованияПолей)
		И Не ЗначениеЗаполнено(СтрокаВариант.НастройкиДляПоиска.НаименованияПараметровИОтборов)
		И Не ЗначениеЗаполнено(СтрокаВариант.НастройкиДляПоиска.КлючевыеСлова) Тогда
		НадоЗаполнитьНастройкиДляПоиска = Истина;
	КонецЕсли;
	Если Не НадоЗаполнитьОписание И Не НадоЗаполнитьНастройкиДляПоиска Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаВариант.КлючВарианта) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вариант ""%1"":'"), СтрокаВариант.КлючВарианта);
	Иначе
		ТекстОшибки = "";
	КонецЕсли;
	Если НадоЗаполнитьОписание Тогда
		ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС)
			+ "- " + НСтр("ru = 'Не заполнено поле ""Описание"" (выводится в панели отчетов).'");
	КонецЕсли;
	Если НадоЗаполнитьНастройкиДляПоиска Тогда
		ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС)
			+ "- " + НСтр("ru = 'Не заполнены поля ""НаименованияПолей"", ""НаименованияПараметровИОтборов"" и ""КлючевыеСлова"".'");
	КонецЕсли;
	ТекстОшибки = ?(ТекстОшибки = "", "", ТекстОшибки + Символы.ПС)
		+ НСтр("ru = 'Подробнее - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().'");
	ДобавитьОшибку(
		СтрокаОтчет.Метаданные,
		НСтр("ru = 'Не заполнены описания вариантов отчетов'"),
		ТекстОшибки);
КонецПроцедуры

Процедура ВариантыОтчетов_ПроверитьРазмещениеОтчетовВКомандномИнтерфейсе()
	МодульВариантыОтчетов                 = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетовКлиентСервер     = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетовКлиентСервер");
	МодульВариантыОтчетовПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетовПереопределяемый");
	
	СписокРазделов = Новый СписокЗначений;
	МодульВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов(СписокРазделов);
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.НастройкиПрограммы") Тогда
		МодульОбработкиПанельАдминистрированияБСП = ОбщегоНазначения.ОбщийМодуль("Обработки.ПанельАдминистрированияБСП");
		МодульОбработкиПанельАдминистрированияБСП.ПриОпределенииРазделовСВариантамиОтчетов(СписокРазделов);
	КонецЕсли;
	
	ИдентификаторНачальнойСтраницы = МодульВариантыОтчетовКлиентСервер.ИдентификаторНачальнойСтраницы();
	ПроверенныеПодсистемы = Новый Соответствие;
	КэшФлажкаХранилища = Неопределено;
	
	// Определение подсистем, вложенных в разделы с панелями отчетов.
	МассивПодсистем = Новый Массив;
	Для Каждого ЭлементСписка Из СписокРазделов Цикл
		Если МассивПодсистем.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			МассивПодсистем.Добавить(ЭлементСписка.Значение);
			Если ЭлементСписка.Значение <> ИдентификаторНачальнойСтраницы Тогда
				ЗарегистрироватьВложенныеПодсистемы(ЭлементСписка.Значение, МассивПодсистем);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка отчетов, входящих в состав этих подсистем.
	Кратко = НСтр("ru = 'Отчет не скрыт в командном интерфейсе'");
	Для Каждого МетаданныеПодсистемы Из МассивПодсистем Цикл
		// Для подсистем и начальной страницы принципиально отличаются не только путь к файлу,
		// но и схема хранения флажка "Видимость" в файлах XML:
		//  Для начальной страницы значение флажка хранится всегда - и когда он Истина и когда Ложь.
		//  Для подсистем значение флажка хранится только тогда, когда оно отличается от значения "по умолчанию".
		ОтчетыВключенныеПоУмолчанию = Новый Соответствие;
		Если МетаданныеПодсистемы = ИдентификаторНачальнойСтраницы Тогда
			ПутьКФайлу = КаталогВыгрузки + "Ext\MainSectionCommandInterface.xml";
			Подробно = НСтр("ru = 'Отчет, размещенный в панели отчетов,
				|не скрыт из командного интерфейса основного раздела.'");
		Иначе
			ПолноеИмяПодсистемы = МетаданныеПодсистемы.ПолноеИмя();
			ПутьКФайлу = СтрЗаменить(ПолноеИмяПодсистемы, "Подсистема", "Subsystems");
			ПутьКФайлу = СтрЗаменить(ПутьКФайлу, ".", "\");
			ПутьКФайлу = КаталогВыгрузки + ПутьКФайлу + "\Ext\CommandInterface.xml";
			Подробно = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчет, размещенный в панели отчетов,
					|не скрыт из командного интерфейса %1.'"),
				ПолноеИмяПодсистемы);
			Для Каждого МетаданныеОтчета Из МетаданныеПодсистемы.Состав Цикл
				Если Метаданные.Отчеты.Содержит(МетаданныеОтчета)
					И Не ЭтоОбъектРасширения(МетаданныеОтчета)
					И МетаданныеОтчета.ИспользоватьСтандартныеКоманды
					И МодульВариантыОтчетов.ОтчетПодключенКХранилищу(МетаданныеОтчета, КэшФлажкаХранилища) Тогда
					ОтчетыВключенныеПоУмолчанию.Вставить(МетаданныеОтчета, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ФайлСуществует(ПутьКФайлу) Тогда
			ДокументDOM = ДокументDOM(ПутьКФайлу);
			Выражение = "//xmlns:CommandsVisibility/xmlns:Command[contains(@name, 'Report.') and contains(@name, '.StandardCommand.Open')]";
			РезультатXPath = ВычислитьВыражениеXPath(Выражение, ДокументDOM);
			Пока Истина Цикл
				Отчет = РезультатXPath.ПолучитьСледующий();
				Если Отчет = Неопределено Тогда
					Прервать;
				КонецЕсли;
				ИмяОтчета = СтрРазделить(Отчет.ПолучитьАтрибут("name"), ".")[1];
				МетаданныеОтчета = Метаданные.Отчеты.Найти(ИмяОтчета);
				ОтчетыВключенныеПоУмолчанию.Удалить(МетаданныеОтчета);
				ВидимостьОтчета = Булево(Отчет.ПервыйДочерний.ТекстовоеСодержимое);
				Если ВидимостьОтчета И МодульВариантыОтчетов.ОтчетПодключенКХранилищу(МетаданныеОтчета, КэшФлажкаХранилища) Тогда
					ДобавитьОшибку(МетаданныеОтчета, Кратко, Подробно);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ОтчетыВключенныеПоУмолчанию Цикл
			ДобавитьОшибку(КлючИЗначение.Ключ, Кратко, Подробно);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ФайлСуществует(ПолноеИмяФайла)
	Файл = Новый Файл(ПолноеИмяФайла);
	Возврат Файл.Существует();
КонецФункции

Процедура ЗарегистрироватьВложенныеПодсистемы(МетаданныеРодителя, МассивПодсистем)
	Для Каждого МетаданныеПодсистемы Из МетаданныеРодителя.Подсистемы Цикл
		Если МассивПодсистем.Найти(МетаданныеПодсистемы) = Неопределено Тогда
			МассивПодсистем.Добавить(МетаданныеПодсистемы);
			ЗарегистрироватьВложенныеПодсистемы(МетаданныеПодсистемы, МассивПодсистем);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

Процедура ПроверитьПолеЗапретаИзменения(ИсточникДанных, ОбъектМетаданных, ИмяПоля)
	
	ЗначениеПоля = ИсточникДанных[ИмяПоля];
	МассивИмени = СтрРазделить(ЗначениеПоля, ".");
	ИмяРеквизита = МассивИмени[0];
	Если ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтандартныйРеквизит = Ложь;
	Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = ИмяРеквизита Тогда
			ЭтоСтандартныйРеквизит = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Для регистров еще надо проверять Измерения и Ресурсы.
	Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
		Если ОбъектМетаданных.Измерения.Найти(ИмяРеквизита) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ОбъектМетаданных.Ресурсы.Найти(ИмяРеквизита) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеТабличнойЧасти = МетаданныеТабличнойЧасти(ОбъектМетаданных, ИмяРеквизита);
	Если МетаданныеТабличнойЧасти <> Неопределено
		И МетаданныеТабличнойЧасти.Реквизиты.Найти(МассивИмени[1]) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОшибку(Метаданные.ОбщиеМодули.ДатыЗапретаИзмененияПереопределяемый,
		НСтр("ru = 'Некорректно заполнена процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В процедуре ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
		|для объекта ""%1"" в качестве значения поля ""%2"" указано значение ""%3"".
		|Указанная таблица не содержит такого реквизита или табличной части.'"),
		ИсточникДанных.Таблица, ИмяПоля, ЗначениеПоля));
	
КонецПроцедуры

Функция МетаданныеТабличнойЧасти(ОбъектМетаданных, ИмяТабличнойЧасти)
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		Или Метаданные.Документы.Содержит(ОбъектМетаданных)
		Или Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных)
		Или Метаданные.Задачи.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных)
		Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных)
		Или Метаданные.Обработки.Содержит(ОбъектМетаданных)
		Или (Метаданные.Отчеты.Содержит(ОбъектМетаданных) И Не ЭтоОбъектРасширения(ОбъектМетаданных)) Тогда
		
		Возврат ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеОтчетыИОбработки

Процедура ПроверитьВстраиваниеГлобальныхОтчетовОбработок(ДляОтчетов)
	
	Если ДляОтчетов Тогда
		МассивРазделов = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки").РазделыДополнительныхОтчетов();
		ШаблонТекста = НСтр("ru = 'Отсутствует команда вызова дополнительных отчетов из раздела %1'");
		КраткоеОписаниеОшибки = НСтр("ru = 'Отсутствует команда открытия дополнительных отчетов'");
	Иначе
		МассивРазделов = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки").РазделыДополнительныхОбработок();
		ШаблонТекста = НСтр("ru = 'Отсутствует команда вызова дополнительных обработок из раздела %1'");
		КраткоеОписаниеОшибки = НСтр("ru = 'Отсутствует команда открытия дополнительных обработок'");
	КонецЕсли;
	
	ИдентификаторРабочегоСтола = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиентСервер").ИдентификаторРабочегоСтола();
	
	ШаблонИмениФайлаМодуля = "ОбщаяКоманда.[ИмяОбщейКоманды].МодульКоманды";
	СтрокаВызова = "ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок";
	ПроверенныеДанные = "";
	
	Для Каждого РазделМетаданных Из МассивРазделов Цикл
		// Состав рабочего стола не проверяется.
		Если РазделМетаданных = ИдентификаторРабочегоСтола Тогда
			Продолжить;
		КонецЕсли;
		// В разделе "Администрирование" команда выводится в одну из панелей.
		Если РазделМетаданных.Имя = "Администрирование" Тогда
			Продолжить;
		КонецЕсли;
		
		ВызовНайден = Ложь;
		Для Каждого ОбщаяКоманда Из РазделМетаданных.Состав Цикл
			Если Не Метаданные.ОбщиеКоманды.Содержит(ОбщаяКоманда) Тогда
				Продолжить;
			КонецЕсли;
			ТекстМодуля = ТекстМодуля(ОбщаяКоманда, "МодульКоманды");
			Если СтрНайти(ТекстМодуля, СтрокаВызова) > 0 Тогда
				ВызовНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВызовНайден Тогда
			// Продолжаем поиск в подчиненных разделах.
			Для Каждого ПодчиненныйРаздел Из РазделМетаданных.Подсистемы Цикл
				Для Каждого ОбщаяКоманда Из ПодчиненныйРаздел.Состав Цикл
					Если Не Метаданные.ОбщиеКоманды.Содержит(ОбщаяКоманда) Тогда
						Продолжить;
					КонецЕсли;
					ТекстМодуля = ТекстМодуля(ОбщаяКоманда, "МодульКоманды");
					Если СтрНайти(ТекстМодуля, СтрокаВызова) > 0 Тогда
						ВызовНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ВызовНайден Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, РазделМетаданных.Имя);
			ДобавитьОшибку(Метаданные.ОбщиеМодули.ДополнительныеОтчетыИОбработкиПереопределяемый, КраткоеОписаниеОшибки, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПорядкаЭлементов

Функция СоставОбъектовСРеквизитомДопУпорядочивания()
	
	МассивМетаданных = Новый Массив;
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Если ОбъектМетаданных.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
		Если ОбъектМетаданных.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовРасчета Цикл
		Если ОбъектМетаданных.Реквизиты.Найти("РеквизитДопУпорядочивания") <> Неопределено Тогда
			МассивМетаданных.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоставТипа(НСтр("ru = 'Объекты с реквизитом РеквизитДопУпорядочивания'"), МассивМетаданных);
	
КонецФункции

#КонецОбласти

#Область ОбменДанными

Процедура ПроверитьНаличиеМакетовИФорм()
	
	Для Каждого ИмяПланаОбмена Из ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ПланыОбменаБСП() Цикл
		
		ЕстьМакет = Метаданные.ПланыОбмена[ИмяПланаОбмена].Макеты.Найти("ПравилаРегистрации") <> Неопределено;
		ЕстьФорма = Метаданные.ПланыОбмена[ИмяПланаОбмена].Формы.Найти("ФормаНастройкиУзла") <> Неопределено;
		
		Если ЕстьМакет <> ЕстьФорма Тогда
			ТекстОшибки = ?(ЕстьМакет,
				НСтр("ru = 'Отсутствует макет ""ПравилаРегистрации""'"),
				НСтр("ru = 'Отсутствует форма ""ФормаНастройкиУзла""'"));
			ОбъектМетаданных = Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена);
			ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Отсутствуют правила регистрации и форма настройки узла'"), ТекстОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставОбщихКоманд()
	
	МодульОбменДаннымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп");
	ВсеПланыОбменаБСП = МодульОбменДаннымиПовтИсп.ПланыОбменаБСП();
	ОбщиеКомандыОбменаДанными = ОбщиеКомандыОбменаДанными();
	
	Для Каждого ИмяПланаОбмена Из ВсеПланыОбменаБСП Цикл
		
		ПланОбмена = Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена);
		Если МодульОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена) Тогда
			СвойствоПроверки = "ДляОбменаРИБ";
		ИначеЕсли МодульОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
			СвойствоПроверки = "ДляУниверсальногоФорматаОбмена";
		ИначеЕсли Не МодульОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена)
			И МодульОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена")
			И Не МодульОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
			СвойствоПроверки = "ДляОбменаПоПравиламКонвертации";
		ИначеЕсли Не МодульОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена)
			И Не МодульОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена") Тогда
			СвойствоПроверки = "ДляУниверсальногоОбменаБезПравил";
		КонецЕсли;
		
		НедостающиеСостав = Новый Массив;
		ИзбыточныеСостав = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из ОбщиеКомандыОбменаДанными Цикл
			
			ДолженБытьВключен = СтрокаТаблицы[СвойствоПроверки];
			Если ДолженБытьВключен = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ФактическиВключен = СтрокаТаблицы.СоставКоманды.Найти(ПланОбмена) <> Неопределено;
			
			Если ДолженБытьВключен И Не ФактическиВключен Тогда
				НедостающиеСостав.Добавить(СтрокаТаблицы.ИмяКоманды);
			ИначеЕсли Не ДолженБытьВключен И ФактическиВключен Тогда
				ИзбыточныеСостав.Добавить(СтрокаТаблицы.ИмяКоманды);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НедостающиеСостав.Количество() > 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План обмена должен быть включен в состав общих команд
					|%1'"), МаркированныйСписок(НедостающиеСостав));
			ДобавитьОшибку(ПланОбмена, НСтр("ru = 'План обмена не включен в состав команд'"), ТекстОшибки);
		КонецЕсли;
		
		Если ИзбыточныеСостав.Количество() > 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'План обмена должен быть исключен из состава общих команд
					|%1'"), МаркированныйСписок(ИзбыточныеСостав));
			ДобавитьОшибку(ПланОбмена, НСтр("ru = 'План обмена избыточно включен в состав команд'"), ТекстОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставПлановОбмена()
	
	// Получение списка всех объектов метаданных БСП, содержащих данные.
	ДопустимыеМетаданные = Новый Массив;
	ДопустимыеМетаданные.Добавить(Метаданные.Константы);
	ДопустимыеМетаданные.Добавить(Метаданные.Справочники);
	ДопустимыеМетаданные.Добавить(Метаданные.Документы);
	ДопустимыеМетаданные.Добавить(Метаданные.ПланыВидовХарактеристик);
	ДопустимыеМетаданные.Добавить(Метаданные.ПланыСчетов);
	ДопустимыеМетаданные.Добавить(Метаданные.ПланыВидовРасчета);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыСведений);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыНакопления);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыБухгалтерии);
	ДопустимыеМетаданные.Добавить(Метаданные.РегистрыРасчета);
	ДопустимыеМетаданные.Добавить(Метаданные.БизнесПроцессы);
	ДопустимыеМетаданные.Добавить(Метаданные.Задачи);
	
	ВсеОбъектыМетаданных = Новый Массив;
	Для Каждого Подсистема Из Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы Цикл
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
				ДобавитьОбъектыПодсистемы(ПодчиненнаяПодсистема, ВсеОбъектыМетаданных);
			КонецЦикла;
		КонецЕсли;
		ДобавитьОбъектыПодсистемы(Подсистема, ВсеОбъектыМетаданных);
	КонецЦикла;
	
	ОбъектыИсключенияПланаОбменаРИБ = ОбъектыИсключенияПланаОбменаРИБ();
	ОбъектыИсключенияПланаОбменаАРМ = ОбъектыИсключенияПланаОбменаАРМ();
	ОбъектыВариативноВключаемыеВРИБ = ОбъектыВариативноВключаемыеВРИБ();
	ОбъектыИспользуемыеТолькоВРИБСФильтром          = ОбъектыИспользуемыеТолькоВРИБСФильтром();
	ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ = ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ();
	ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ = ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ();
	
	ПланыОбменаПодсистемы = Новый Массив;
	ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый").ПолучитьПланыОбмена(ПланыОбменаПодсистемы);
	
	СоставВсехПлановОбмена = Новый Массив;
	
	Для Каждого ПланОбмена Из ПланыОбменаПодсистемы Цикл
		
		// Получение состав плана обмена, проверка авторегистрации.
		СоставПланаОбмена = Новый Массив;
		Для Каждого ОбъектПланаОбмена Из ПланОбмена.Состав Цикл
			Если ЭтоОбъектБСП(ОбъектПланаОбмена.Метаданные) Тогда
				СоставПланаОбмена.Добавить(ОбъектПланаОбмена.Метаданные);
			КонецЕсли;
			Если ОбъектПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта %1, входящего в состав плана обмена %2 включена авторегистрация.
					|Все элементы состава плана обмена должны иметь признак авторегистрации Запретить.'"),
					ОбъектПланаОбмена.Метаданные.ПолноеИмя(), ПланОбмена.Имя);
				ДобавитьОшибку(ОбъектПланаОбмена.Метаданные, НСтр("ru = 'Некорректное использование признака авторегистрации'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СоставВсехПлановОбмена, СоставПланаОбмена, Истина);
		
		// Получение состава подписок планов обмена.
		ИмяПланаОбмена = ПланОбмена.Имя;
		СоставПодписок = СоставПодписок(ИмяПланаОбмена);
		СоставПодписокРегистрацияИзменения = СоставПодписок.РегистрацияИзменения;
		СоставПодписокРегистрацияУдаления = СоставПодписок.РегистрацияУдаления;
		
		Если ПланОбмена.РаспределеннаяИнформационнаяБаза Тогда
			// Проверка состава плана обмена.
			ЭтоПланОбменаАРМ = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ПланОбменаАвтономнойРаботы() = ИмяПланаОбмена;
			ОбъектыИсключенияПланаОбмена = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ОбъектыИсключенияПланаОбменаРИБ);
			Если ЭтоПланОбменаАРМ Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИсключенияПланаОбмена, ОбъектыИсключенияПланаОбменаАРМ, Истина);
			КонецЕсли;
			
			НазначениеПланаОбмена = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер").НазначениеПланаОбмена(ИмяПланаОбмена);
			ЭтоПланОбменаРИБСФильтром = ?(ВРег(НазначениеПланаОбмена) = "РИБСФИЛЬТРОМ", Истина, Ложь);
			Если ЭтоПланОбменаРИБСФильтром Тогда
				Для Каждого Элемент Из ОбъектыИспользуемыеТолькоВРИБСФильтром Цикл
					ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ОбъектыИсключенияПланаОбмена, Элемент);
				КонецЦикла;
			КонецЕсли;
			
			ПлановыйСостав = ОбщегоНазначенияКлиентСервер.СократитьМассив(ВсеОбъектыМетаданных, ОбъектыИсключенияПланаОбмена);
			ПлановыйСостав = ОбщегоНазначенияКлиентСервер.СократитьМассив(ПлановыйСостав, ОбъектыВариативноВключаемыеВРИБ);
			ФактическийСостав = ОбщегоНазначенияКлиентСервер.СократитьМассив(СоставПланаОбмена, ОбъектыВариативноВключаемыеВРИБ);
			
			ПроверитьСоставПланаОбмена(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав);
			
			// Проверка состава подписок
			ОбъектыИспользуемыеТолькоДляНачальногоОбраза = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(
				ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ);
			Если ЭтоПланОбменаАРМ Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыИспользуемыеТолькоДляНачальногоОбраза, ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ, Истина);
			КонецЕсли;
			
			ПлановыйСостав = ОбщегоНазначенияКлиентСервер.СократитьМассив(ПлановыйСостав, ОбъектыИспользуемыеТолькоДляНачальногоОбраза);
			ФактическийСостав = ИсключитьВариативныеОбъекты(СоставПодписокРегистрацияИзменения, ОбъектыВариативноВключаемыеВРИБ);
			ПроверитьСоставНачальногоОбраза(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав);
		КонецЕсли;
		
		ПроверитьНаличиеВставкиКода(ПланОбмена, "МодульМенеджера", ОбязательныеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена));
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИсключитьВариативныеОбъекты(СоставПодписок, ВариативныеОбъекты)
	
	Для Каждого Объект Из ВариативныеОбъекты Цикл
		Для Каждого СтрокаТаблицы Из СоставПодписок Цикл
			НайденныйЭлемент = СтрокаТаблицы.Состав.Найти(Объект);
			Если НайденныйЭлемент <> Неопределено Тогда
				СтрокаТаблицы.Состав.Удалить(НайденныйЭлемент);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СоставПодписок;
	
КонецФункции

Процедура ПроверитьПрефиксИнформационнойБазыПоУмолчанию()
	ПрефиксИнформационнойБазыПоУмолчанию = "";
	ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый").ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(ПрефиксИнформационнойБазыПоУмолчанию);
	Если ПустаяСтрока(ПрефиксИнформационнойБазыПоУмолчанию) Или СтрДлина(ПрефиксИнформационнойБазыПоУмолчанию) <> 2 Тогда
		ДобавитьОшибку(Метаданные.ОбщиеМодули.ОбменДаннымиПереопределяемый,
			НСтр("ru = 'Некорректно задан префикс ИБ по умолчанию'"),
			НСтр("ru = 'Неправильно задан префикс информационной по умолчанию.'"));
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуКоманд(ИмяКоманды, ДляОбменаРИБ, ДляУниверсальногоФорматаОбмена,
	ДляУниверсальногоОбменаБезПравил, ДляОбменаПоПравиламКонвертации, ТаблицаКоманд)
	
	НоваяСтрока = ТаблицаКоманд.Добавить();
	НоваяСтрока.ИмяКоманды = ИмяКоманды;
	НоваяСтрока.ДляОбменаРИБ = ДляОбменаРИБ;
	НоваяСтрока.ДляУниверсальногоФорматаОбмена = ДляУниверсальногоФорматаОбмена;
	НоваяСтрока.ДляУниверсальногоОбменаБезПравил = ДляУниверсальногоОбменаБезПравил;
	НоваяСтрока.ДляОбменаПоПравиламКонвертации = ДляОбменаПоПравиламКонвертации;
	НоваяСтрока.СоставКоманды = СоставТипаИзСтроки(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбщиеКоманды.%1.ТипПараметраКоманды", ИмяКоманды));
	
КонецПроцедуры

Процедура ДобавитьОбъектыПодсистемы(Подсистема, ВсеОбъектыМетаданных)
	
	Для Каждого Объект Из Подсистема.Состав Цикл
		ДобавитьОбъектВСоставПодсистемы(Объект, ВсеОбъектыМетаданных);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВсеОбъектыПодсистемы(ИмяПодсистемы, Исключения)
	
	Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Объект Из Подсистема.Состав Цикл
		ДобавитьОбъектВСоставПодсистемы(Объект, Исключения);
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ДобавитьВсеОбъектыПодсистемы(ПодчиненнаяПодсистема.Имя, Исключения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОбъект(ИмяОбъекта, Исключения)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	Если ОбъектМетаданных <> Неопределено Тогда
		Исключения.Добавить(ОбъектМетаданных);
	ИначеЕсли ЭтоДемоБСП() Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В функции ОбъектыИсключенияПланаОбменаРИБ указан несуществующий объект метаданных %1'"), ИмяОбъекта);
		ДобавитьОшибку(Метаданные, НСтр("ru = 'Некорректно заполнены  ОбъектыИсключенияПланаОбменаРИБ'"), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбъектВСоставПодсистемы(Объект, Состав)
	
	Для Каждого ДопустимыйТип Из ДопустимыеМетаданные Цикл
		Если ДопустимыйТип.Содержит(Объект) Тогда
			Состав.Добавить(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодсистемаНеСодержитОбъектов(ИмяПодсистемы)
	
	Подсистема = Метаданные.Подсистемы.СтандартныеПодсистемы.Подсистемы.Найти(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Возврат
	КонецЕсли;

	Для Каждого Объект Из Подсистема.Состав Цикл
		Для Каждого ДопустимыйТип Из ДопустимыеМетаданные Цикл
			Если ДопустимыйТип.Содержит(Объект) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Согласно документации, подсистема %1 не 
					|содержит объектов для включения в состав плана обмена.'"), ИмяПодсистемы);
				ДобавитьОшибку(Объект, НСтр("ru = 'Подсистема содержит объекты с данными'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ПодчиненнаяПодсистема Из Подсистема.Подсистемы Цикл
		ПодсистемаНеСодержитОбъектов(ИмяПодсистемы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставПланаОбмена(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав)
	
	НедостающиеОбъекты = ОбщегоНазначенияКлиентСервер.СократитьМассив(ПлановыйСостав, ФактическийСостав);
	
	Для Каждого Объект Из НедостающиеОбъекты Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект %1 должен быть включен в состав плана обмена %2'"),
			Объект.ПолноеИмя(), ИмяПланаОбмена);
		ДобавитьОшибку(Объект, НСтр("ru = 'Объект должен быть включен в состав плана обмена'"), ТекстОшибки);
	КонецЦикла;
	
	ИзбыточныеОбъекты = ОбщегоНазначенияКлиентСервер.СократитьМассив(ФактическийСостав, ПлановыйСостав);
	
	Для Каждого Объект Из ИзбыточныеОбъекты Цикл
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект %1 избыточно включен включен в состав плана обмена %2'"),
			Объект.ПолноеИмя(), ИмяПланаОбмена);
		ДобавитьОшибку(Объект, НСтр("ru = 'Объект избыточно включен в состав плана обмена'"), ТекстОшибки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоставНачальногоОбраза(ИмяПланаОбмена, ПлановыйСостав, ФактическийСостав)
	
	// Недостающие объекты.
	Для Каждого Объект Из ПлановыйСостав Цикл
		Для Каждого СтрокаТаблицы Из ФактическийСостав Цикл
			Если Не ВозможноСравнениеТипов(Объект, СтрокаТаблицы.ДопустимыеТипы) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицы.Состав.Найти(Объект) = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Объект %1 необходимо включить в состав %2'"),
					Объект.ПолноеИмя(), СтрокаТаблицы.Описание);
				ДобавитьОшибку(Объект, НСтр("ru = 'Объект должен быть включен в состав подписки'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Избыточные объекты.
	Для Каждого СтрокаТаблицы Из ФактическийСостав Цикл
		Для Каждого Объект Из СтрокаТаблицы.Состав Цикл
			Если ПлановыйСостав.Найти(Объект) = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Объект %1 избыточно включен в состав %2'"),
					Объект.ПолноеИмя(), СтрокаТаблицы.Описание);
				ДобавитьОшибку(Объект, НСтр("ru = 'Объект избыточно включен в состав подписки'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция СоставПодписок(ИмяПланаОбмена)
	
	ИмяПодпискиРегистрация = ИмяПланаОбмена + "Регистрация";
	ИмяПодпискиУдаления = ИмяПланаОбмена + "РегистрацияУдаления";
	
	СвойстваПодписок = Новый Структура;
	СвойстваПодписок.Вставить(ИмяПланаОбмена + "РегистрацияНабораРасчета", "РегистрыРасчета");
	СвойстваПодписок.Вставить(ИмяПланаОбмена + "РегистрацияНабора", "РегистрыСведений,РегистрыНакопления,РегистрыБухгалтерии");
	СвойстваПодписок.Вставить(ИмяПланаОбмена + "РегистрацияДокумента", "Документы");
	СвойстваПодписок.Вставить(ИмяПланаОбмена + "РегистрацияКонстанты", "Константы");
	СвойстваПодписок.Вставить(ИмяПодпискиУдаления, "Справочники,Документы,ПланыВидовХарактеристик,ПланыСчетов,ПланыВидовРасчета,БизнесПроцессы,Задачи");
	СвойстваПодписок.Вставить(ИмяПодпискиРегистрация, "Справочники,ПланыВидовХарактеристик,ПланыСчетов,ПланыВидовРасчета,БизнесПроцессы,Задачи");
	
	ПодпискиРегистрации = Новый Массив;
	Для Каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
		Если СтрНачинаетсяС(Подписка.Имя, ИмяПодпискиРегистрация) Тогда
			ПодпискиРегистрации.Добавить(Подписка);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТиповИзменение = ТаблицаТипов();
	ТаблицаТиповУдаление = ТаблицаТипов();
	
	Для Каждого СвойствоПодписки Из СвойстваПодписок Цикл
		Состав = Новый Массив;
		КоличествоПодписок = 0;
		Для Каждого Подписка Из ПодпискиРегистрации Цикл
			Если СтрНачинаетсяС(Подписка.Имя, СвойствоПодписки.Ключ) Тогда
				КоличествоПодписок = КоличествоПодписок + 1;
				ТекущаяПодписка = Подписка;
				Для Каждого Тип Из Подписка.Источник.Типы() Цикл
					Объект = Метаданные.НайтиПоТипу(Тип);
					Если ЭтоОбъектБСП(Объект) Тогда
						ДобавитьОбъектВСоставПодсистемы(Объект, Состав);
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаТипов = ?(СвойствоПодписки.Ключ = ИмяПодпискиУдаления, ТаблицаТиповУдаление, ТаблицаТиповИзменение);
		Описание = ?(КоличествоПодписок = 1, ТекущаяПодписка.ПолноеИмя(),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Подписки с именем %1'"), СвойствоПодписки.Ключ));
		
		НоваяСтрока = ТаблицаТипов.Добавить();
		НоваяСтрока.Описание = Описание;
		НоваяСтрока.ДопустимыеТипы = СвойствоПодписки.Значение;
		НоваяСтрока.Состав = Состав;
	КонецЦикла;
	
	СоставПодписок = Новый Структура;
	СоставПодписок.Вставить("РегистрацияИзменения", ТаблицаТиповИзменение);
	СоставПодписок.Вставить("РегистрацияУдаления", ТаблицаТиповУдаление);
	
	Возврат СоставПодписок;
	
КонецФункции

Функция ОбщиеКомандыОбменаДанными()
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	
	ТаблицаКоманд.Колонки.Добавить("ИмяКоманды");
	ТаблицаКоманд.Колонки.Добавить("ДляОбменаРИБ");
	ТаблицаКоманд.Колонки.Добавить("ДляУниверсальногоФорматаОбмена");
	ТаблицаКоманд.Колонки.Добавить("ДляУниверсальногоОбменаБезПравил");
	ТаблицаКоманд.Колонки.Добавить("ДляОбменаПоПравиламКонвертации");
	ТаблицаКоманд.Колонки.Добавить("СоставКоманды");
	
	ДобавитьСтрокуВТаблицуКоманд("ЗагрузитьКомплектПравил", Ложь, Ложь, Ложь, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("ЗагрузитьПравилаКонвертацииОбъектов", Ложь, Ложь, Ложь, Истина, ТаблицаКоманд);
	// План обмена РИБ может не содержать ПРО. Не проверяем.
	ДобавитьСтрокуВТаблицуКоманд("ЗагрузитьПравилаРегистрацииОбъектов", Неопределено, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("НастроитьПараметрыТранспортаСообщенийОбмена", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("ПолучитьНастройкиСинхронизацииДляДругойПрограммы", Ложь, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("Синхронизировать", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СинхронизироватьСДополнительнымиПараметрами", Ложь, Истина, Ложь, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СобытияОтправки", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СобытияПолучения", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СоставОтправляемыхДанных", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("СценарииСинхронизации", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	ДобавитьСтрокуВТаблицуКоманд("УдалитьНастройкуСинхронизации", Истина, Истина, Истина, Истина, ТаблицаКоманд);
	
	Возврат ТаблицаКоманд;
	
КонецФункции

// Содержит список объектов, которые не должны включаться в состав планов обмена РИБ.
//
Функция ОбъектыИсключенияПланаОбменаРИБ()
	
	Исключения = Новый Массив;
	
	ДобавитьВсеОбъектыПодсистемы("АдресныйКлассификатор", Исключения);
	ПодсистемаНеСодержитОбъектов("АнализЖурналаРегистрации");
	
	// БазоваяФункциональность
	ДобавитьОбъект("Константа.ГлавныйУзел", Исключения);
	ДобавитьОбъект("Константа.ЗаголовокСистемы", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьРазделениеПоОбластямДанных", Исключения);
	ДобавитьОбъект("Константа.НеИспользоватьРазделениеПоОбластямДанных", Исключения);
	ДобавитьОбъект("Константа.ЭтоАвтономноеРабочееМесто", Исключения);
	ДобавитьОбъект("Константа.ИдентификаторИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности", Исключения);
	ДобавитьОбъект("Константа.ИспользуютсяПрофилиБезопасности", Исключения);
	ДобавитьОбъект("Константа.ПрофильБезопасностиИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.АдресПубликацииИнформационнойБазыВИнтернете", Исключения);
	ДобавитьОбъект("Константа.АдресПубликацииИнформационнойБазыВЛокальнойСети", Исключения);
	ДобавитьОбъект("Справочник.ВерсииРасширений", Исключения);
	ДобавитьОбъект("Справочник.ИдентификаторыОбъектовРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.БезопасноеХранилищеДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.БезопасноеХранилищеДанныхОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ИдентификаторыОбъектовВерсийРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.ПараметрыРаботыВерсийРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.СеансыВерсийРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.КэшПрограммныхИнтерфейсов", Исключения);
	ДобавитьОбъект("РегистрСведений.НеразделенныеПользователи", Исключения);
	ДобавитьОбъект("РегистрСведений.ЗапросыРазрешенийНаИспользованиеВнешнихРесурсов", Исключения);
	ДобавитьОбъект("РегистрСведений.РазрешенияНаИспользованиеВнешнихРесурсов", Исключения);
	ДобавитьОбъект("РегистрСведений.РежимыПодключенияВнешнихМодулей", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьСтраныМира", Исключения);
	
	// ВариантыОтчетов
	ДобавитьОбъект("Справочник.ПредопределенныеВариантыОтчетовРасширений", Исключения);
	ДобавитьОбъект("РегистрСведений.ПредопределенныеВариантыОтчетовВерсийРасширений", Исключения);
	
	// Взаимодействия
	ДобавитьОбъект("РегистрСведений.ЗаблокированныеДляПолученияУчетныеЗаписи", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияПапокПисем", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияПредметовВзаимодействий", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияКонтактовВзаимодействий", Исключения);
	ДобавитьОбъект("РегистрСведений.Удалить_АктивныеПредметыВзаимодействий", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ГрупповоеИзменениеОбъектов");
	
	// ДатыЗапретаИзменения
	ДобавитьОбъект("Константа.ВерсияДатЗапретаИзменения", Исключения);
	
	// ЗавершениеРаботыПользователей
	ДобавитьОбъект("Константа.ПараметрыАдминистрированияИБ", Исключения);
	ДобавитьОбъект("РегистрСведений.БлокировкиСеансовОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьБлокировкиСеансовОбластиДанных", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ЗагрузкаДанныхИзФайла");
	ПодсистемаНеСодержитОбъектов("ЗапретРедактированияРеквизитовОбъектов");
	
	// ЗащитаПерсональныхДанных
	ДобавитьОбъект("РегистрСведений.ОбластиПерсональныхДанных", Исключения);
	
	ПодсистемаНеСодержитОбъектов("НастройкаПорядкаЭлементов");
	ПодсистемаНеСодержитОбъектов("НастройкиПрограммы");
	
	// ОбменДанными
	ДобавитьОбъект("Константа.ДанныеДляОтложенногоОбновления", Исключения);
	ДобавитьОбъект("Константа.ДатаОбновленияПовторноИспользуемыхЗначенийМРО", Исключения);
	ДобавитьОбъект("Константа.ДатаОбновленияПовторноИспользуемыхЗначенийМРО", Исключения);
	ДобавитьОбъект("Константа.ЗагрузитьСообщениеОбменаДанными", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьСинхронизациюДанных", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьСинхронизациюДанныхВЛокальномРежиме", Исключения);
	ДобавитьОбъект("Константа.ИспользоватьСинхронизациюДанныхВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.КаталогСообщенийОбменаДаннымиДляWindows", Исключения);
	ДобавитьОбъект("Константа.КаталогСообщенийОбменаДаннымиДляLinux", Исключения);
	ДобавитьОбъект("Константа.КоличествоЭлементовВТранзакцииЗагрузкиДанных", Исключения);
	ДобавитьОбъект("Константа.НастройкаПодчиненногоУзлаРИБЗавершена", Исключения);
	ДобавитьОбъект("Константа.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском", Исключения);
	ДобавитьОбъект("Константа.ПрефиксУзлаРаспределеннойИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.СообщениеОбменаДаннымиИзГлавногоУзла", Исключения);
	ДобавитьОбъект("Справочник.СценарииОбменовДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.ДанныеОбъектовДляРегистрацииВОбменах", Исключения);
	ДобавитьОбъект("РегистрСведений.ИзмененияОбщихДанныхУзлов", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиТранспортаОбмена", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбработчикиСобытийСинхронизацииДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ПравилаДляОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов", Исключения);
	ДобавитьОбъект("РегистрСведений.РезультатыОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.СообщенияОбменаДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.СоответствияОбъектовИнформационныхБаз", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияОбменовДанными", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияУспешныхОбменовДанными", Исключения);
	
	// ОбновлениеВерсииИБ
	ДобавитьОбъект("Константа.РазделыОписанияИзмененийСистемы", Исключения);
	
	// ОбновлениеКонфигурации
	ДобавитьВсеОбъектыПодсистемы("ОбновлениеКонфигурации", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ПоискИУдалениеДублей");
	
	// ПолучениеФайловИзИнтернета
	ДобавитьОбъект("Константа.НастройкаПроксиСервера", Исключения);
	
	// Пользователи
	ДобавитьОбъект("Константа.НастройкиВходаПользователей", Исключения);
	ДобавитьОбъект("РегистрСведений.СведенияОПользователях", Исключения);
	
	ПодсистемаНеСодержитОбъектов("ПрефиксацияОбъектов");
	ПодсистемаНеСодержитОбъектов("ПроверкаЛегальностиПолученияОбновления");
	
	// РаботаВМоделиСервиса
	ДобавитьОбъект("Константа.ВнутреннийАдресМенеджераСервиса", Исключения);
	ДобавитьОбъект("Константа.ВыполнитьРезервноеКопированиеОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.ДатаПоследнегоСтартаКлиентскогоСеанса", Исключения);
	ДобавитьОбъект("Константа.ИспользованиеКаталогаДополнительныхОтчетовИОбработокВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.КаталогОбменаФайламиВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.КаталогОбменаФайламиВМоделиСервисаLinux", Исключения);
	ДобавитьОбъект("Константа.КлючОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.КонечнаяТочкаМенеджераСервиса", Исключения);
	ДобавитьОбъект("Константа.КопироватьОбластиДанныхИзЭталонной", Исключения);
	ДобавитьОбъект("Константа.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания", Исключения);
	ДобавитьОбъект("Константа.МаксимальноеКоличествоИсполняющихФоновыхЗаданий", Исключения);
	ДобавитьОбъект("Константа.МинимальныйИнтервалРегламентныхЗаданийДОИОВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.НезависимоеИспользованиеДополнительныхОтчетовИОбработокВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.ПоддержкаРезервногоКопирования", Исключения);
	ДобавитьОбъект("Константа.ПредставлениеОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.ПрефиксОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.РазмерБлокаПередачиФайла", Исключения);
	ДобавитьОбъект("Константа.РазрешитьВыполнениеДОИОРегламентнымиЗаданиямиВМоделиСервиса", Исключения);
	ДобавитьОбъект("Константа.РежимИспользованияИнформационнойБазы", Исключения);
	ДобавитьОбъект("Константа.СообщениеБлокировкиПриОбновленииКонфигурации", Исключения);
	ДобавитьОбъект("Константа.ЧасовойПоясОбластиДанных", Исключения);
	ДобавитьОбъект("Константа.УдалитьИмяСлужебногоПользователяМенеджераСервиса", Исключения);
	ДобавитьОбъект("Константа.УдалитьПарольСлужебногоПользователяМенеджераСервиса", Исключения);
	ДобавитьОбъект("Справочник.ОчередьЗаданий", Исключения);
	ДобавитьОбъект("Справочник.ОчередьЗаданийОбластейДанных", Исключения);
	ДобавитьОбъект("Справочник.ПоставляемыеДанные", Исключения);
	ДобавитьОбъект("Справочник.ПоставляемыеДополнительныеОтчетыИОбработки", Исключения);
	ДобавитьОбъект("Справочник.СообщенияОбластейДанных", Исключения);
	ДобавитьОбъект("Справочник.ШаблоныЗаданийОчереди", Исключения);
	ДобавитьОбъект("РегистрСведений.ВерсииПодсистемОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ИспользованиеДополнительныхОтчетовИОбработокСервисаВАвтономномРабочемМесте", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ОбластиТребующиеОбработкиПоставляемыхДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ОчередьИзвлеченияТекста", Исключения);
	ДобавитьОбъект("РегистрСведений.ОчередьИнсталляцииПоставляемыхДополнительныхОтчетовИОбработокВОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.ПоставляемыеДанныеТребующиеОбработки", Исключения);
	ДобавитьОбъект("РегистрСведений.РейтингАктивностиОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьРейтингАктивностиОбластейДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьБлокировкиСеансовОбластиДанных", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОчередьЗаданий", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОбластиКРезервномуКопированию", Исключения);
	ДобавитьОбъект("РегистрСведений.УдалитьОчередьИзвлеченияТекста", Исключения);
	
	// РаботаВМоделиСервиса.ОбменСообщениями
	ДобавитьОбъект("Константа.БлокировкаОтправкиБыстрыхСообщений", Исключения);
	ДобавитьОбъект("Справочник.СообщенияСистемы", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиОтправителя", Исключения);
	ДобавитьОбъект("РегистрСведений.ПодпискиПолучателей", Исключения);
	
	// РаботаСКонтрагентами
	ДобавитьОбъект("РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов", Исключения);
	ДобавитьОбъект("РегистрСведений.СостоянияКонтрагентов", Исключения);
	
	// РаботаСФайлами
	ДобавитьОбъект("РегистрСведений.РабочиеКаталогиФайлов", Исключения);
	ДобавитьОбъект("РегистрСведений.ФайлыВРабочемКаталоге", Исключения);
	
	ДобавитьВсеОбъектыПодсистемы("РассылкаОтчетов", Исключения);
	
	// РегламентныеЗадания
	ДобавитьОбъект("Константа.НастройкиВыполненияРегламентныхЗаданий", Исключения);
	ДобавитьОбъект("Константа.ПараметрыБлокировкиРаботыСВнешнимиРесурсами", Исключения);
	
	// РезервноеКопированиеИБ
	ДобавитьОбъект("Константа.ПараметрыРезервногоКопирования", Исключения);
	
	ПодсистемаНеСодержитОбъектов("СтруктураПодчиненности");
	ПодсистемаНеСодержитОбъектов("ТекущиеДела");
	ПодсистемаНеСодержитОбъектов("УдалениеПомеченныхОбъектов");
	
	// УправлениеИтогамиИАгрегатами
	ДобавитьОбъект("Константа.ПараметрыИтоговИАгрегатов", Исключения);
	
	// ФайловыеФункции
	ДобавитьОбъект("Константа.ИзвлекатьТекстыФайловНаСервере", Исключения);
	ДобавитьОбъект("Константа.ХранитьФайлыВТомахНаДиске", Исключения);
	ДобавитьОбъект("Константа.СинхронизироватьФайлы", Исключения);
	ДобавитьОбъект("Справочник.ТомаХраненияФайлов", Исключения);
	ДобавитьОбъект("Справочник.УчетныеЗаписиСинхронизацииФайлов", Исключения);
	ДобавитьОбъект("РегистрСведений.НомераОтсканированныхФайлов", Исключения);
	ДобавитьОбъект("РегистрСведений.СтатусыСинхронизацииФайловСОблачнымСервисом", Исключения);
	ДобавитьОбъект("РегистрСведений.НастройкиСинхронизацииФайлов", Исключения);
	
	ДобавитьВсеОбъектыПодсистемы("ЦентрМониторинга", Исключения);
	
	// ЭлектроннаяПодпись
	ДобавитьОбъект("Константа.ПроверятьЭлектронныеПодписиНаСервере", Исключения);
	ДобавитьОбъект("Константа.СоздаватьЭлектронныеПодписиНаСервере", Исключения);
	ДобавитьОбъект("Константа.УдалитьАлгоритмПодписи", Исключения);
	ДобавитьОбъект("Константа.УдалитьАлгоритмХеширования", Исключения);
	ДобавитьОбъект("Константа.УдалитьАлгоритмШифрования", Исключения);
	ДобавитьОбъект("Константа.УдалитьПровайдерЭП", Исключения);
	ДобавитьОбъект("Константа.УдалитьТипПровайдераЭП", Исключения);
	ДобавитьОбъект("РегистрСведений.ПутиКПрограммамЭлектроннойПодписиИШифрованияНаСерверахLinux", Исключения);
	
	Возврат Исключения;
	
КонецФункции

// Содержит список объектов, которые не должны включаться в состав планов обмена АРМ.
//
Функция ОбъектыИсключенияПланаОбменаАРМ()
	
	Исключения = Новый Массив;
	
	// Подсистемы, не поддерживающие работу в модели сервиса.
	ДобавитьВсеОбъектыПодсистемы("АнализЖурналаРегистрации", Исключения);
	ДобавитьВсеОбъектыПодсистемы("Анкетирование", Исключения);
	ДобавитьВсеОбъектыПодсистемы("ОбновлениеКонфигурации", Исключения);
	ДобавитьВсеОбъектыПодсистемы("ПроверкаЛегальностиПолученияОбновления", Исключения);
	ДобавитьВсеОбъектыПодсистемы("РегламентныеЗадания", Исключения);
	ДобавитьВсеОбъектыПодсистемы("РезервноеКопированиеИБ", Исключения);
	ДобавитьВсеОбъектыПодсистемы("УправлениеИтогамиИАгрегатами", Исключения);
	
	Возврат Исключения;
	
КонецФункции

// Содержит список объектов, необходимость включения которых в планы обмена РИБ определяется
// исходя из выбранного сценария работы подсистемы. Эти объекты могут как включаться так и не
// включаться в состав плана обмена, поэтому их вхождение в состав планов обмена не проверяется.
//
Функция ОбъектыВариативноВключаемыеВРИБ()
	
	Объекты = Новый Массив;
	
	// БизнесПроцессыИЗадачи
	ДобавитьОбъект("Константа.ДатаУведомленияОНовыхЗадачах", Объекты);
	
	ДобавитьВсеОбъектыПодсистемы("ОценкаПроизводительности", Объекты);
	
	Возврат Объекты;
	
КонецФункции

// Содержит список объектов, включаемых только в состав начального образа планов обмена РИБ.
// Т.е. объект включается в состав плана обмена и не включается в состав подписок.
//
Функция ОбъектыИспользуемыеТолькоДляНачальногоОбразаРИБ()
	
	Объекты = Новый Массив;
	
	// БазоваяФункциональность
	ДобавитьОбъект("Константа.ПараметрыСлужебныхСобытий", Объекты);
	
	// ИнформацияПриЗапуске
	ДобавитьОбъект("РегистрСведений.ПакетыИнформацииПриЗапуске", Объекты);
	
	// ОбменДанными
	ДобавитьОбъект("Константа.НастройкиПодчиненногоУзлаРИБ", Объекты);
	
	// ОбновлениеВерсииИБ
	ДобавитьОбъект("Константа.ДетализироватьОбновлениеИБВЖурналеРегистрации", Объекты);
	ДобавитьОбъект("Константа.ОтложенноеОбновлениеЗавершеноУспешно", Объекты);
	ДобавитьОбъект("Константа.СведенияОБлокируемыхОбъектах", Объекты);
	ДобавитьОбъект("Константа.СведенияОбОбновленииИБ", Объекты);
	ДобавитьОбъект("РегистрСведений.ВерсииПодсистем", Объекты);
	ДобавитьОбъект("РегистрСведений.УдалитьВерсииПодсистем", Объекты);
	
	// ПолнотекстовыйПоиск
	ДобавитьОбъект("Константа.ИспользоватьПолнотекстовыйПоиск", Объекты);
	
	// Пользователи
	ДобавитьОбъект("Константа.ПараметрыРаботыПользователей", Объекты);
	
	// ПрисоединенныеФайлы
	ДобавитьОбъект("РегистрСведений.ПрисоединенныеФайлы", Объекты);
	
	// РаботаСФайлами
	ДобавитьОбъект("РегистрСведений.ХранимыеФайлыВерсий", Объекты);
	
	// Свойства
	ДобавитьОбъект("Константа.ПараметрыДополнительныхРеквизитовИСведений", Объекты);
	
	// УправлениеДоступом
	ДобавитьОбъект("Константа.ПараметрыОграниченияДоступа", Объекты);
	ДобавитьОбъект("РегистрСведений.ПраваРолей", Объекты);
	ДобавитьОбъект("РегистрСведений.ЗависимостиПравДоступа", Объекты);
	
	Возврат Объекты;
	
КонецФункции

// Содержит список объектов, включаемых только в состав начального образа планов обмена АРМ.
// Т.е. объект включается в состав плана обмена и не включается в состав подписок.
//
Функция ОбъектыИспользуемыеТолькоДляНачальногоОбразаАРМ()
	
	Объекты = Новый Массив;
	
	// ДополнительныеОтчетыИОбработки
	ДобавитьОбъект("Константа.ИспользоватьДополнительныеОтчетыИОбработки", Объекты);
	
	Возврат Объекты;
	
КонецФункции

// Содержит список объектов, включаемых только в состав планов обмена РИБ с фильтрами.
//
Функция ОбъектыИспользуемыеТолькоВРИБСФильтром()
	
	Объекты = Новый Массив;
	
	// ОбменДанными
	ДобавитьОбъект("Константа.ДанныеДляОтложенногоОбновления", Объекты);
	
	Возврат Объекты;
	
КонецФункции

Функция ОбязательныеПроцедурыМодуляМенеджераПланаОбмена(ИмяПланаОбмена)
	
	ОбязательныеПроцедуры = Новый Массив;
	
	ОбязательныеПроцедуры.Добавить("Процедура ОпределитьНастройки(Настройки, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ПолучитьДополнительныеДанныеДляКорреспондента(ДополнительныеДанные) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ПриПодключенииККорреспонденту(ВерсияКорреспондента) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ПриОтправкеДанныхОтправителя(Отправитель, Игнорировать) Экспорт");
	ОбязательныеПроцедуры.Добавить("Процедура ПриПолученииДанныхОтправителя(Отправитель, Игнорировать) Экспорт");
	
	ОбязательныеПроцедуры.Добавить("Функция НастройкаОтборовНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция НастройкаОтборовНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ЗначенияПоУмолчаниюНаУзле(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ВерсияКорреспондента, ИмяФормы, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента, ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ИмяФайлаНастроекДляПриемника() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ИмяФормыСозданияНачальногоОбраза() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция КраткаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ПодробнаяИнформацияПоОбмену(ИдентификаторНастройки) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ОбщиеДанныеУзлов(ВерсияКорреспондента, ИмяФормы) Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ПояснениеДляНастройкиПараметровУчета() Экспорт");
	ОбязательныеПроцедуры.Добавить("Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ВерсияКорреспондента) Экспорт");
	
	Если Не ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена) Тогда
		ОбязательныеПроцедуры.Добавить("Процедура НастроитьИнтерактивнуюВыгрузку(Получатель, Параметры) Экспорт");
		ОбязательныеПроцедуры.Добавить("Функция ПредставлениеОтбораИнтерактивнойВыгрузки(Получатель, Параметры) Экспорт");
		ОбязательныеПроцедуры.Добавить("Функция ИмяКонфигурацииИсточника() Экспорт");
	КонецЕсли;
	
	Если ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПовтИсп").ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		ОбязательныеПроцедуры.Добавить("Функция ФорматОбмена() Экспорт");
		ОбязательныеПроцедуры.Добавить("Процедура ПолучитьВерсииФорматаОбмена(ВерсииФормата) Экспорт");
	КонецЕсли;
	
	Возврат ОбязательныеПроцедуры;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеВерсииИБ

Процедура ПроверитьОтложенныеОбработчики()
	
	ТаблицаОбработчиков = Новый ТаблицаЗначений;
	ТаблицаОбработчиков.Колонки.Добавить("Обработчик");
	ТаблицаОбработчиков.Колонки.Добавить("ЧитаемыеИзменяемые");
	ТаблицаОбработчиков.Колонки.Добавить("Очередь");
	ТаблицаОбработчиков.Колонки.Добавить("Приоритеты");
	
	ОписанияПодсистем  = СтандартныеПодсистемыПовтИсп.ОписанияПодсистем();
	ОписанияПодсистемПоИменам = ОписанияПодсистем.ПоИменам;
	Для Каждого ИмяПодсистемы Из ОписанияПодсистем.Порядок Цикл
		РежимВыполненияОтложенныхОбработчиков = ОписанияПодсистемПоИменам[ИмяПодсистемы].РежимВыполненияОтложенныхОбработчиков;
		Если РежимВыполненияОтложенныхОбработчиков = "Последовательно" Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПодсистемы = ОписанияПодсистем.ПоИменам.Получить(ИмяПодсистемы);
		Если НЕ ЗначениеЗаполнено(ОписаниеПодсистемы.ОсновнойСерверныйМодуль) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараллельноСВерсии = ОписанияПодсистемПоИменам[ИмяПодсистемы].ПараллельноеОтложенноеОбновлениеСВерсии;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);
		Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
		Модуль.ПриДобавленииОбработчиковОбновления(Обработчики);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("РежимВыполнения", "Отложенно");
		
		НайденныеСтроки = Обработчики.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаОписания Из НайденныеСтроки Цикл
			ПолныйТекстОшибок  = Новый Массив;
			Если Не ЗначениеЗаполнено(СтрокаОписания.Комментарий) Тогда
				ТекстОшибки = НСтр("ru = 'У отложенного обработчика ""%1"" не заполнено свойство ""Комментарий""'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаОписания.Процедура);
				ПолныйТекстОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаОписания.Идентификатор) Тогда
				ТекстОшибки = НСтр("ru = 'Рекомендуется заполнить свойство ""Идентификатор"" отложенного обработчика ""%1""'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаОписания.Процедура);
				ПолныйТекстОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
			
			Если Не (СтрокаОписания.Версия = "*"
					Или (ЗначениеЗаполнено(ПараллельноСВерсии)
						И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаОписания.Версия, ПараллельноСВерсии) < 0)) Тогда
				ТекстОшибки        = "";
				НенайденныеОбъекты = "";
				Если Не ЗначениеЗаполнено(СтрокаОписания.ЧитаемыеОбъекты) Тогда
					ТекстОшибки = НСтр("ru ='У отложенного обработчика ""%1"" не заполнено свойство ""ЧитаемыеОбъекты""'");
					ЧитаемыеОбъекты = Новый Массив;
				Иначе
					ЧитаемыеОбъекты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОписания.ЧитаемыеОбъекты, ",", , Истина);
					Для Каждого ЧитаемыйОбъект Из ЧитаемыеОбъекты Цикл
						ОбъектНайден = Метаданные.НайтиПоПолномуИмени(ЧитаемыйОбъект) <> Неопределено;
						Если Не ОбъектНайден Тогда
							НенайденныеОбъекты =  НенайденныеОбъекты + ?(НенайденныеОбъекты = "", "", Символы.ПС)
								+ НСтр("ru = '- не найден объект'") + " " + ЧитаемыйОбъект;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НенайденныеОбъекты) Тогда
					ТекстОшибки = НСтр("ru ='У отложенного обработчика ""%1"" некорректно заполнено свойство ""ЧитаемыеОбъекты"":'")
						+ Символы.ПС + НенайденныеОбъекты;
				КонецЕсли;
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаОписания.Процедура);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ПолныйТекстОшибок.Добавить(ТекстОшибки);
				КонецЕсли;
				ТекстОшибки        = "";
				НенайденныеОбъекты = "";
				
				Если Не ЗначениеЗаполнено(СтрокаОписания.ИзменяемыеОбъекты) Тогда
					ТекстОшибки = НСтр("ru ='У отложенного обработчика ""%1"" не заполнено свойство ""ИзменяемыеОбъекты""'");
					ИзменяемыеОбъекты = Новый Массив;
				Иначе
					ИзменяемыеОбъекты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОписания.ИзменяемыеОбъекты, ",", , Истина);
					Для Каждого ИзменяемыйОбъект Из ИзменяемыеОбъекты Цикл
						ОбъектНайден = Метаданные.НайтиПоПолномуИмени(ИзменяемыйОбъект) <> Неопределено;
						Если Не ОбъектНайден Тогда
							НенайденныеОбъекты =  НенайденныеОбъекты + ?(НенайденныеОбъекты = "", "", Символы.ПС)
								+ НСтр("ru = '- не найден объект'") + " " + ИзменяемыйОбъект;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НенайденныеОбъекты) Тогда
					ТекстОшибки = НСтр("ru ='У отложенного обработчика ""%1"" некорректно заполнено свойство ""ЧитаемыеОбъекты"":'")
						+ Символы.ПС + НенайденныеОбъекты;
				КонецЕсли;
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаОписания.Процедура);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ПолныйТекстОшибок.Добавить(ТекстОшибки);
				КонецЕсли;
				
				ЧитаемыеИзменяемые = Новый Массив;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧитаемыеИзменяемые, ЧитаемыеОбъекты, Истина);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЧитаемыеИзменяемые, ИзменяемыеОбъекты, Истина);
				
				Если ЧитаемыеИзменяемые.Количество() <> 0 Тогда
					
					Строка = ТаблицаОбработчиков.Добавить();
					Строка.Обработчик         = СтрокаОписания.Процедура;
					Строка.ЧитаемыеИзменяемые = ЧитаемыеИзменяемые;
					Строка.Очередь            = СтрокаОписания.ОчередьОтложеннойОбработки;
					Строка.Приоритеты         = СтрокаОписания.ПриоритетыВыполнения;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПолныйТекстОшибок) Тогда
				ИмяПроцедурыЧастями = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОписания.Процедура, ".");
				Если ИмяПроцедурыЧастями.Количество() = 2 Тогда
					ПолноеИмяОбъекта = "ОбщийМодуль" + "." + ИмяПроцедурыЧастями[0];
				Иначе
					ПолноеИмяОбъекта = СоответствиеТиповМетаданных(ИмяПроцедурыЧастями[0]) + "." + ИмяПроцедурыЧастями[1];
				КонецЕсли;
				
				СтрокаТекстОшибки = "";
				Для Каждого ТекстОшибки Из ПолныйТекстОшибок Цикл
					Если Не ЗначениеЗаполнено(СтрокаТекстОшибки) Тогда
						СтрокаТекстОшибки = ТекстОшибки;
					Иначе
						СтрокаТекстОшибки = СтрокаТекстОшибки + Символы.ПС + Символы.ПС + ТекстОшибки;
					КонецЕсли;
				КонецЦикла;
				
				ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта),
					НСтр("ru = 'Некорректно заполнены свойства отложенного обработчика'"),
					СтрокаТекстОшибки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Индекс = 0;
	ТаблицаОбработчиков.Сортировать("Очередь Возр");
	Для Каждого СтрокаТаблицы Из ТаблицаОбработчиков Цикл
		НайтиПересеченияСДругимиОбработчиками(ТаблицаОбработчиков, СтрокаТаблицы, Индекс);
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиПересеченияСДругимиОбработчиками(ТаблицаОбработчиков, СтрокаТаблицы, Индекс)
	ИндексТекущейСтроки   = Индекс;
	ИндексПоследнейСтроки = ТаблицаОбработчиков.Количество() - 1;
	Если ИндексТекущейСтроки = ИндексПоследнейСтроки Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	Для ИндексСледующейСтроки = ИндексТекущейСтроки + 1 По ИндексПоследнейСтроки Цикл
		СледующаяСтрока = ТаблицаОбработчиков[ИндексСледующейСтроки];
		Если ЕстьСовпадения(СтрокаТаблицы.ЧитаемыеИзменяемые, СледующаяСтрока.ЧитаемыеИзменяемые) Тогда
			Если СтрокаТаблицы.Приоритеты = Неопределено
				Или СтрокаТаблицы.Приоритеты.Количество() = 0
				Или СтрокаТаблицы.Приоритеты.Найти(СледующаяСтрока.Обработчик, "Процедура") = Неопределено Тогда
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Символы.ПС, "")
					+ НСтр("ru = 'Отложенный обработчик ""%1"" пересекается по читаемым или изменяемым данным
					|с обработчиком %2, данный конфликт должен быть отражен в свойстве ""ПриоритетыВыполнения"".'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					СтрокаТаблицы.Обработчик,
					СледующаяСтрока.Обработчик);
			КонецЕсли;
			
			Если СледующаяСтрока.Приоритеты = Неопределено
				Или СледующаяСтрока.Приоритеты.Количество() = 0
				Или СледующаяСтрока.Приоритеты.Найти(СтрокаТаблицы.Обработчик, "Процедура") = Неопределено Тогда
				ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Символы.ПС, "")
					+ НСтр("ru = 'Отложенный обработчик ""%1"" пересекается по читаемым или изменяемым данным
					|с обработчиком %2, данный конфликт должен быть отражен в свойстве ""ПриоритетыВыполнения"".'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					СледующаяСтрока.Обработчик,
					СтрокаТаблицы.Обработчик);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ИмяПроцедурыЧастями = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаТаблицы.Обработчик, ".");
		Если ИмяПроцедурыЧастями.Количество() = 2 Тогда
			ПолноеИмяОбъекта = "ОбщийМодуль" + "." + ИмяПроцедурыЧастями[0];
		Иначе
			ПолноеИмяОбъекта = СоответствиеТиповМетаданных(ИмяПроцедурыЧастями[0]) + "." + ИмяПроцедурыЧастями[1];
		КонецЕсли;
		ДобавитьОшибку(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта),
			НСтр("ru = 'Неразрешенные конфликты между отложенными обработчиками'"),
			ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

Функция СоответствиеТиповМетаданных(ИмяМенеджера)
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Справочники", "Справочник");
	Соответствие.Вставить("Документы", "Документ");
	Соответствие.Вставить("ЖурналыДокументов", "ЖурналДокументов");
	Соответствие.Вставить("Отчеты", "Отчет");
	Соответствие.Вставить("Обработки", "Обработка");
	Соответствие.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	Соответствие.Вставить("ПланыСчетов", "ПланСчетов");
	Соответствие.Вставить("ПланыВидовРасчета", "ПланВидовРасчета");
	Соответствие.Вставить("РегистрыСведений", "РегистрСведений");
	Соответствие.Вставить("РегистрыНакопления", "РегистрНакопления");
	Соответствие.Вставить("РегистрыБухгалтерии", "РегистрБухгалтерии");
	Соответствие.Вставить("РегистрыРасчета", "РегистрРасчета");
	Соответствие.Вставить("БизнесПроцессы", "БизнесПроцесс");
	Соответствие.Вставить("Задачи", "Задача");
	
	Возврат Соответствие[ИмяМенеджера];
	
КонецФункции

Функция ЕстьСовпадения(ПервыйМассив, ВторойМассив)
	Для Каждого ЭлементМассива Из ПервыйМассив Цикл
		Если ВторойМассив.Найти(ЭлементМассива) <> Неопределено Тогда
			Возврат Истина
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область Пользователи

Процедура ПроверитьПрямоеОбращениеКПараметрамСеанса()
	
	ЗапрещенныеПараметры = Новый Массив;
	ЗапрещенныеПараметры.Добавить("ПараметрыСеанса.ТекущийПользователь");
	ЗапрещенныеПараметры.Добавить("ПараметрыСеанса.ТекущийВнешнийПользователь");
	ЗапрещенныеПараметры.Добавить("ПараметрыСеанса.АвторизованныйПользователь");
	
	ФайлыМодулей = НайтиФайлы(КаталогВыгрузки, "*.bsl", Истина);
	
	Для Каждого ФайлМодуля Из ФайлыМодулей Цикл
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ФайлМодуля.ПолноеИмя);
		ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
		
		Для Каждого ЗапрещенныйПараметр Из ЗапрещенныеПараметры Цикл
			Если СтрНайтиНеКомментарийИНеСтроку(ТекстМодуля, ЗапрещенныйПараметр) <> 0 Тогда
				СвойстваОбъекта = СвойстваОбъектаПоИмениФайла(ФайлМодуля.ПолноеИмя);
				Если СвойстваОбъекта.ОбъектМетаданных = Метаданные.ОбщиеМодули.ПользователиСлужебный Тогда
					Продолжить;
					// Прямое обращение к параметрам сеанса допустимо только из модуля ПользователиСлужебный.
				КонецЕсли;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В %1 обнаружено прямое обращение к %2.'"), СвойстваОбъекта.Представление, ЗапрещенныйПараметр);
				ДобавитьОшибку(СвойстваОбъекта.ОбъектМетаданных,
					НСтр("ru = 'Прямое обращение к параметрам сеанса подсистемы Пользователи недопустимо'"),
					ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса

Процедура ПроверитьСоставРазделителей()
	
	// Проверка базовых свойств разделителей.
	Разделители = Новый Структура;
	Разделители.Вставить("ОбластьДанныхОсновныеДанные");
	Разделители.Вставить("ОбластьДанныхВспомогательныеДанные");
	
	ПлановыеСвойства = Новый Структура;
	ПлановыеСвойства.Вставить("АвтоИспользование", Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать);
	ПлановыеСвойства.Вставить("РазделениеДанных", Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять);
	ПлановыеСвойства.Вставить("ИспользованиеРазделяемыхДанных", Метаданные.СвойстваОбъектов.ИспользованиеРазделяемыхДанныхОбщегоРеквизита.Независимо);
	ПлановыеСвойства.Вставить("ЗначениеРазделенияДанных", Метаданные.ПараметрыСеанса.ОбластьДанныхЗначение);
	ПлановыеСвойства.Вставить("ИспользованиеРазделенияДанных", Метаданные.ПараметрыСеанса.ОбластьДанныхИспользование);
	ПлановыеСвойства.Вставить("УсловноеРазделение", Метаданные.Константы.ИспользоватьРазделениеПоОбластямДанных);
	ПлановыеСвойства.Вставить("РазделениеПользователей", Метаданные.СвойстваОбъектов.РазделениеПользователейОбщегоРеквизита.Разделять);
	ПлановыеСвойства.Вставить("РазделениеАутентификации", Метаданные.СвойстваОбъектов.РазделениеАутентификацииОбщегоРеквизита.Разделять);
	Разделители.ОбластьДанныхОсновныеДанные = ПлановыеСвойства;
	
	ПлановыеСвойства = Новый Структура;
	ПлановыеСвойства.Вставить("АвтоИспользование", Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать);
	ПлановыеСвойства.Вставить("РазделениеДанных", Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять);
	ПлановыеСвойства.Вставить("ИспользованиеРазделяемыхДанных", Метаданные.СвойстваОбъектов.ИспользованиеРазделяемыхДанныхОбщегоРеквизита.НезависимоИСовместно);
	ПлановыеСвойства.Вставить("ЗначениеРазделенияДанных", Метаданные.ПараметрыСеанса.ОбластьДанныхЗначение);
	ПлановыеСвойства.Вставить("ИспользованиеРазделенияДанных", Метаданные.ПараметрыСеанса.ОбластьДанныхИспользование);
	ПлановыеСвойства.Вставить("УсловноеРазделение", Метаданные.Константы.ИспользоватьРазделениеПоОбластямДанных);
	ПлановыеСвойства.Вставить("РазделениеПользователей", Метаданные.СвойстваОбъектов.РазделениеПользователейОбщегоРеквизита.НеИспользовать);
	ПлановыеСвойства.Вставить("РазделениеАутентификации", Метаданные.СвойстваОбъектов.РазделениеАутентификацииОбщегоРеквизита.НеИспользовать);
	Разделители.ОбластьДанныхВспомогательныеДанные = ПлановыеСвойства;
	
	Для Каждого СвойстваРазделителя Из Разделители Цикл
		МетаданныеРазделителя = Метаданные.ОбщиеРеквизиты[СвойстваРазделителя.Ключ];
		Для Каждого СвойствоСоставаРеквизита Из СвойстваРазделителя.Значение Цикл
			Если МетаданныеРазделителя[СвойствоСоставаРеквизита.Ключ] <> СвойствоСоставаРеквизита.Значение Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Значение свойства %1 должно быть %2. Текущее значение %3'"),
					СвойствоСоставаРеквизита.Ключ, МетаданныеРазделителя[СвойствоСоставаРеквизита.Ключ], СвойствоСоставаРеквизита.Значение);
				ДобавитьОшибку(МетаданныеРазделителя, НСтр("ru = 'Некорректное значение свойства разделителя'"), ТекстОшибки);
				Возврат; // Критическая ошибка. Автоисправление не целесообразно. Прекращаем проверку.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПроверятьРазделители = Новый Структура;
	ПроверятьРазделители.Вставить("ОбластьДанныхОсновныеДанные", Истина);
	ПроверятьРазделители.Вставить("ОбластьДанныхВспомогательныеДанные", Истина);
	
	// Проверка актуальности макета состава разделителей. Только для БСП.
	Если ЭтоДемоБСП() Тогда
		АктуальныеМакеты = МакетыСоставаРазделителей();
		Для Каждого СвойстваМакета Из АктуальныеМакеты Цикл
			СохраненныйМакет = ПолучитьМакет(СвойстваМакета.Ключ).ПолучитьТекст();
			Если СвойстваМакета.Значение <> СохраненныйМакет Тогда
				ПроверятьРазделители[СвойстваМакета.Ключ] = Ложь;
				Если ИсправлятьОшибки Тогда
					ИмяФайлаМакета = КаталогВыгрузки + "Reports\ПроверкаВнедренияБСП\Templates\" + СвойстваМакета.Ключ + "\Ext\Template.txt";
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.УстановитьТекст(СвойстваМакета.Значение);
					ТекстовыйДокумент.Записать(ИмяФайлаМакета);
					ЗагружаемыеФайлы.Добавить(ИмяФайлаМакета);
					ТекстОшибки = НСтр("ru = 'Исправлено. Макет состава разделителей обновлен'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Необходимо обновить макет состава разделителя'");
				КонецЕсли;
				ДобавитьОшибку(Метаданные.Отчеты["ПроверкаВнедренияБСП"], НСтр("ru = 'Макет состава разделителей не актуален'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПредставлений = Новый Структура;
	СтруктураПредставлений.Вставить("ПланОбмена", "ExchangePlan");
	СтруктураПредставлений.Вставить("РегламентноеЗадание", "ScheduledJob");
	СтруктураПредставлений.Вставить("Константа", "Constant");
	СтруктураПредставлений.Вставить("Справочник", "Catalog");
	СтруктураПредставлений.Вставить("Документ", "Document");
	СтруктураПредставлений.Вставить("ПланВидовХарактеристик", "ChartOfCharacteristicTypes");
	СтруктураПредставлений.Вставить("ПланСчетов", "ChartOfAccounts");
	СтруктураПредставлений.Вставить("ПланВидовРасчета", "ChartOfCalculationTypes");
	СтруктураПредставлений.Вставить("РегистрСведений", "InformationRegister");
	СтруктураПредставлений.Вставить("РегистрНакопления", "AccumulationRegister");
	СтруктураПредставлений.Вставить("РегистрБухгалтерии", "AccountingRegister");
	СтруктураПредставлений.Вставить("РегистрРасчета", "CalculationRegister");
	СтруктураПредставлений.Вставить("БизнесПроцесс", "BusinessProcess");
	СтруктураПредставлений.Вставить("Задача", "Task");
	
	// Проверка состава разделителей.
	Использовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	
	Разделители.ОбластьДанныхОсновныеДанные = НеИспользовать;
	Разделители.ОбластьДанныхВспомогательныеДанные = Использовать;
	Для Каждого СвойстваРазделителя Из Разделители Цикл
		Если Не ПроверятьРазделители[СвойстваРазделителя.Ключ] Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсправлятьОшибки Тогда
			ИмяФайлаРазделителя = КаталогВыгрузки + "CommonAttributes\" + СвойстваРазделителя.Ключ + ".xml";
			ДокументDOM = ДокументDOM(ИмяФайлаРазделителя);
			РезультатXPath = ВычислитьВыражениеXPath("//xmlns:Content", ДокументDOM);
			Состав = РезультатXPath.ПолучитьСледующий();
			ВнесеныИзменения = Ложь;
		КонецЕсли;
		
		ПлановыйСостав = ОбщегоНазначения.ЗначениеИзСтрокиXML(ПолучитьМакет(СвойстваРазделителя.Ключ).ПолучитьТекст());
		МетаданныеРазделителя = Метаданные.ОбщиеРеквизиты[СвойстваРазделителя.Ключ];
		
		Для Каждого СтрокаСостава Из МетаданныеРазделителя.Состав Цикл
			МетаданныеОбъекта = СтрокаСостава.Метаданные;
			Если Не ЭтоОбъектБСП(СтрокаСостава.Метаданные) Тогда
				Продолжить;
			КонецЕсли;
			
			ПлановоеЗначениеОтличаетсяОтАвто = ПлановыйСостав.Найти(МетаданныеОбъекта.ПолноеИмя()) <> Неопределено;
			ФактическоеЗначение = МетаданныеРазделителя.Состав.Найти(МетаданныеОбъекта);
			ФактическоеЗначениеСовпадаетСАвто = (ФактическоеЗначение.Использование <> СвойстваРазделителя.Значение);
			
			Если (ПлановоеЗначениеОтличаетсяОтАвто И ФактическоеЗначениеСовпадаетСАвто)
				Или (Не ПлановоеЗначениеОтличаетсяОтАвто И Не ФактическоеЗначениеСовпадаетСАвто) Тогда
				
				Если ИсправлятьОшибки Тогда
					ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
					ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
					ПолноеИмя = СтруктураПредставлений[ЧастиИмени[0]] + "." + ЧастиИмени[1];
					
					Если ПлановоеЗначениеОтличаетсяОтАвто И ФактическоеЗначениеСовпадаетСАвто Тогда
						// Должно быть не Авто, фактически Авто. Нужно добавить узел со значением не Авто.
						Использование = ?(СвойстваРазделителя.Значение = Использовать, "Use", "DontUse");
						УзелМетаданных = ДокументDOM.СоздатьЭлемент("xr:Metadata");
						УзелМетаданных.ТекстовоеСодержимое = ПолноеИмя;
						УзелИспользование = ДокументDOM.СоздатьЭлемент("xr:Use");
						УзелИспользование.ТекстовоеСодержимое = Использование;
						УзелУсловное = ДокументDOM.СоздатьЭлемент("xr:ConditionalSeparation");
						
						РодительскийУзел = ДокументDOM.СоздатьЭлемент("xr:Item");
						РодительскийУзел.ДобавитьДочерний(УзелМетаданных);
						РодительскийУзел.ДобавитьДочерний(УзелИспользование);
						РодительскийУзел.ДобавитьДочерний(УзелУсловное);
						
						Состав.ДобавитьДочерний(РодительскийУзел);
					Иначе
						// Плановое значение Авто, фактическое не Авто. Нужно удалить запись.
						ВыражениеXPath = "//xr:Metadata[text() = '[ПолноеИмя]']";
						ВыражениеXPath = СтрЗаменить(ВыражениеXPath, "[ПолноеИмя]", ПолноеИмя);
						РезультатXPath = ВычислитьВыражениеXPath(ВыражениеXPath, ДокументDOM);
						ЭлементDOM = РезультатXPath.ПолучитьСледующий();
						Состав.УдалитьДочерний(ЭлементDOM.РодительскийУзел);
						ВнесеныИзменения = Истина;
					КонецЕсли;
					
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Значение использования разделителя %1 должно быть %2'"),
						МетаданныеРазделителя.Имя, ?(ПлановоеЗначениеОтличаетсяОтАвто, СвойстваРазделителя.Значение, НСтр("ru = 'Авто'")));
					ДобавитьОшибку(МетаданныеОбъекта, НСтр("ru = 'Некорректное значение разделителя'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИсправлятьОшибки И ВнесеныИзменения Тогда
			ЗаписатьДокументDOMВФайл(ДокументDOM, ИмяФайлаРазделителя);
			ТекстОшибки = НСтр("ru = 'Исправлено. Состав разделителя для объектов БСП актуализирован.'");
			ДобавитьОшибку(МетаданныеРазделителя, НСтр("ru = 'Некорректное значение состава разделителя'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка избыточных свойств разделителей.
	Если ИсправлятьОшибки Тогда
		Для Каждого СвойстваРазделителя Из Разделители Цикл
			ИмяФайлаРазделителя = КаталогВыгрузки + "CommonAttributes\" + СвойстваРазделителя.Ключ + ".xml";
			ДокументDOM = ДокументDOM(ИмяФайлаРазделителя);
			
			РезультатXPath = ВычислитьВыражениеXPath("//xmlns:AutoUse", ДокументDOM);
			Автоиспользование = РезультатXPath.ПолучитьСледующий().ТекстовоеСодержимое;
			РезультатXPath = ВычислитьВыражениеXPath("//xmlns:Content", ДокументDOM);
			Состав = РезультатXPath.ПолучитьСледующий();
			
			УдаляемыеУзлы = Новый Массив;
			Для Каждого Объект Из Состав.ДочерниеУзлы Цикл
				Для Каждого СвойстваОбъекта Из Объект.ДочерниеУзлы Цикл
					Если СвойстваОбъекта.ЛокальноеИмя = "Use" И СвойстваОбъекта.ТекстовоеСодержимое = Автоиспользование Тогда
						УдаляемыеУзлы.Добавить(Объект);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если УдаляемыеУзлы.Количество() > 0 Тогда
				Для Каждого Объект Из УдаляемыеУзлы Цикл
					Состав.УдалитьДочерний(Объект);
				КонецЦикла;
				ЗаписатьДокументDOMВФайл(ДокументDOM, ИмяФайлаРазделителя);
				МетаданныеРазделителя = Метаданные.ОбщиеРеквизиты[СвойстваРазделителя.Ключ];
				ТекстОшибки = НСтр("ru = 'Исправлено. Для объектов разделителя в явном виде было указано использование разделения,
					|совпадающее со значением Авто разделителя.'");
				ДобавитьОшибку(МетаданныеРазделителя, НСтр("ru = 'Избыточное использование явного значения разделителя'"), ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Разделители.ОбластьДанныхОсновныеДанные = Использовать;
		Разделители.ОбластьДанныхВспомогательныеДанные = НеИспользовать;
		Для Каждого СвойстваРазделителя Из Разделители Цикл
			МетаданныеРазделителя = Метаданные.ОбщиеРеквизиты[СвойстваРазделителя.Ключ];
			Для Каждого ЭлементСостава Из МетаданныеРазделителя.Состав Цикл
				Если ЭлементСостава.Использование = СвойстваРазделителя.Значение Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для разделителя %1 в явном виде указано использование разделения, совпадающее со значением Авто разделителя.'"),
						МетаданныеРазделителя.Имя);
					ДобавитьОшибку(ЭлементСостава.Метаданные, НСтр("ru = 'Избыточное использование явного значения разделителя'"), ТекстОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция МакетыСоставаРазделителей()
	
	Макеты = Новый Структура;
	Макеты.Вставить("ОбластьДанныхОсновныеДанные", Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать);
	Макеты.Вставить("ОбластьДанныхВспомогательныеДанные", Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать);
	Для Каждого СвойстваРазделителя Из Макеты Цикл
		Макеты[СвойстваРазделителя.Ключ] = ЗначенияРазделителя(СвойстваРазделителя.Ключ, СвойстваРазделителя.Значение);
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

Функция ЗначенияРазделителя(ИмяРазделителя, ДобавляемоеЗначение)
	
	ЗначенияРазделителя = Новый Массив;
	
	Для Каждого ЭлементСостава Из Метаданные.ОбщиеРеквизиты[ИмяРазделителя].Состав Цикл
		Если ЭтоОбъектБСП(ЭлементСостава.Метаданные) И ЭлементСостава.Использование = ДобавляемоеЗначение Тогда
			ЗначенияРазделителя.Добавить(ЭлементСостава.Метаданные.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(ЗначенияРазделителя);
	
КонецФункции

Процедура ПроверитьСоставСтандартныхРолей()
	
	// Если это базовая версия и состав роли ПолныеПрава устанавливается вручную, то проверку не выполняем.
	Если  СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		И ПравоДоступа("Администрирование", Метаданные, Метаданные.Роли.ПолныеПрава) Тогда
		Возврат;
	КонецЕсли;
	
	// В ролях ПолныеПрава И АдминистраторСистемы запрещено устанавливать права:
	// Интерактивное удаление.
	// Интерактивное удаление предопределенных данных.
	// Интерактивная пометка удаления предопределенных данных.
	// Интерактивное снятие пометки удаления предопределенных данных.
	// Интерактивное удаление помеченных предопределенных данных.
	
	// Список разделенных метаданных, которые необходимо пропускать при проверке прав.
	Исключения = Новый Соответствие;
	Исключения.Вставить("Constant.КлючОбластиДанных", Истина);
	Исключения.Вставить("Constant.ПрефиксОбластиДанных", Истина);
	Исключения.Вставить("Constant.ЧасовойПоясОбластиДанных", Истина);
	Исключения.Вставить("Constant.ПредставлениеОбластиДанных", Истина);
	Исключения.Вставить("Constant.ВыполнитьРезервноеКопированиеОбластиДанных", Истина);
	Исключения.Вставить("Constant.ПрефиксОбластиДанных", Истина);
	Исключения.Вставить("Constant.ДатаПоследнегоСтартаКлиентскогоСеанса", Истина);
	Исключения.Вставить("InformationRegister.РежимыПодключенияВнешнихМодулейОбластейДанных", Истина);
	Исключения.Вставить("InformationRegister.ОчередьИзвлеченияТекста", Истина);
	Исключения.Вставить("InformationRegister.ОбластиДанных", Истина);
	Исключения.Вставить("InformationRegister.РейтингАктивностиОбластейДанных", Истина);
	
	СтруктураПредставлений = Новый Соответствие;
	СтруктураПредставлений.Вставить("Константа", "Constant");
	СтруктураПредставлений.Вставить("РегистрРасчета", "CalculationRegister");
	СтруктураПредставлений.Вставить("РегистрСведений", "InformationRegister");
	СтруктураПредставлений.Вставить("РегистрНакопления", "AccumulationRegister");
	СтруктураПредставлений.Вставить("РегистрБухгалтерии", "AccountingRegister");
	СтруктураПредставлений.Вставить("ПланОбмена", "ExchangePlan");
	СтруктураПредставлений.Вставить("Справочник", "Catalog");
	СтруктураПредставлений.Вставить("ПланВидовХарактеристик", "ChartOfCharacteristicTypes");
	СтруктураПредставлений.Вставить("ПланСчетов", "ChartOfAccounts");
	СтруктураПредставлений.Вставить("ПланВидовРасчета", "ChartOfCalculationTypes");
	СтруктураПредставлений.Вставить("Документ", "Document");
	СтруктураПредставлений.Вставить("БизнесПроцесс", "BusinessProcess");
	СтруктураПредставлений.Вставить("Задача", "Task");
	СтруктураПредставлений.Вставить("Последовательность", "Sequence");
	СтруктураПредставлений.Вставить("ЖурналДокументов", "DocumentJournal");
	
	// Получаем список разделенных и неразделенных объектов метаданных.
	Использовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	НеИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать;
	
	РазделенныеОбъектыМетаданных = Новый Соответствие;
	НеразделенныеОбъектыМетаданных = Новый Соответствие;
	
	Для Каждого ЭлементСостава Из Метаданные.ОбщиеРеквизиты.Найти("ОбластьДанныхОсновныеДанные").Состав Цикл
		ПолноеИмя = ЭлементСостава.Метаданные.ПолноеИмя();
		ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
		ТипОбъекта = СтруктураПредставлений.Получить(ЧастиИмени[0]);
		Если ТипОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмя = ТипОбъекта + "." + ЧастиИмени[1];
		Если ЭлементСостава.Использование = НеИспользовать Тогда
			НеразделенныеОбъектыМетаданных.Вставить(ПолноеИмя, Ложь);
		Иначе
			Если Исключения.Получить(ПолноеИмя) = Неопределено Тогда
				РазделенныеОбъектыМетаданных.Вставить(ПолноеИмя, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСостава Из Метаданные.ОбщиеРеквизиты.Найти("ОбластьДанныхВспомогательныеДанные").Состав Цикл
		Если ЭлементСостава.Использование = Использовать Тогда
			ПолноеИмя = ЭлементСостава.Метаданные.ПолноеИмя();
			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			ТипОбъекта = СтруктураПредставлений.Получить(ЧастиИмени[0]);
			Если ТипОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПолноеИмя = ТипОбъекта + "." + ЧастиИмени[1];
			Если НеразделенныеОбъектыМетаданных.Получить(ПолноеИмя) = Ложь Тогда
				НеразделенныеОбъектыМетаданных.Удалить(ПолноеИмя);
			КонецЕсли;
			Если Исключения.Получить(ПолноеИмя) = Неопределено Тогда
				РазделенныеОбъектыМетаданных.Вставить(ПолноеИмя, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Последовательности. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенной.
	Для Каждого МетаданныеПоследовательности Из Метаданные.Последовательности Цикл
		ПолноеИмяПоследовательности = "Sequence." + МетаданныеПоследовательности.Имя;
		Если МетаданныеПоследовательности.Документы.Количество() = 0 Тогда
			РазделенныеОбъектыМетаданных.Вставить(ПолноеИмяПоследовательности, Ложь);
		Иначе
			Для Каждого МетаданныеДокумента Из МетаданныеПоследовательности.Документы Цикл
				ПолноеИмяДокумента = "Document." + МетаданныеДокумента.Имя;
				Если РазделенныеОбъектыМетаданных.Получить(ПолноеИмяДокумента) = Неопределено Тогда
					НеразделенныеОбъектыМетаданных.Вставить(ПолноеИмяПоследовательности, Ложь);
				Иначе
					РазделенныеОбъектыМетаданных.Вставить(ПолноеИмяПоследовательности, Ложь);
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Журналы. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенным.
	Для Каждого МетаданныеЖурналаДокументов Из Метаданные.ЖурналыДокументов Цикл
		ПолноеИмяЖурнала = "DocumentJournal." + МетаданныеЖурналаДокументов.Имя;
		Если МетаданныеЖурналаДокументов.РегистрируемыеДокументы.Количество() = 0 Тогда
			РазделенныеОбъектыМетаданных.Вставить(ПолноеИмяЖурнала, Ложь);
		Иначе
			Для Каждого МетаданныеДокумента Из МетаданныеЖурналаДокументов.РегистрируемыеДокументы Цикл
				ПолноеИмяДокумента = "Document." + МетаданныеДокумента.Имя;
				Если РазделенныеОбъектыМетаданных.Получить(ПолноеИмяДокумента) = Неопределено Тогда
					НеразделенныеОбъектыМетаданных.Вставить(ПолноеИмяЖурнала, Ложь);
				Иначе
					РазделенныеОбъектыМетаданных.Вставить(ПолноеИмяЖурнала, Ложь);
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	КопияНеразделенныеОбъектыМетаданных = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(НеразделенныеОбъектыМетаданных);
	СоставРолиАдминистраторСистемы(РазделенныеОбъектыМетаданных, КопияНеразделенныеОбъектыМетаданных, Исключения);
	СоставРолиПолныеПрава(РазделенныеОбъектыМетаданных, НеразделенныеОбъектыМетаданных, Исключения);
	
КонецПроцедуры

Процедура СоставРолиАдминистраторСистемы(РазделенныеОбъектыМетаданных, НеразделенныеОбъектыМетаданных, Исключения)
	
	ФайлРолиАдминистраторСистемы = КаталогВыгрузки + "Roles\АдминистраторСистемы\Ext\Rights.xml";
	РольАдминистраторСистемы = Метаданные.Роли.АдминистраторСистемы;
	
	// Получаем XDTO объект роли.
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлРолиАдминистраторСистемы);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	// Проверяем базовые свойства роли.
	Если Не БазовыеСвойстваРолиУстановленыКорректно(ОбъектXDTO, РольАдминистраторСистемы, Ложь) Тогда
		Возврат; // Критическая ошибка. Автоисправление не целесообразно. Прекращаем проверку.
	КонецЕсли;
	
	// Проверяем права роли.
	ТипПраваXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.2/roles", "RightType");
	РазрешенныеОбъекты = ДопустимыеПрава(Ложь);
	ВнесеныИзменения = Ложь;
	
	Для Каждого Объект Из ОбъектXDTO.object Цикл
		
		ПолноеИмяОбъекта = Объект.name;
		
		Если Исключения.Получить(ПолноеИмяОбъекта)= Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(ПолноеИмяОбъекта, ".");
		ТипОбъекта = ЧастиИмени[0];
		
		Если Не РазрешенныеОбъекты.Свойство(ТипОбъекта) Тогда
			// Проверяются только объекты, которые входят в состав разделителей.
			Продолжить;
		КонецЕсли;
		
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		
		Если ЧастиИмени.Количество() > 2 Тогда
			Если ЧастиИмени[2] = "Command" Тогда
				Продолжить; // Права на команды не изменяем.
			КонецЕсли;
			// Лишние права на подчиненные реквизиты. Их нужно удалить.
			Если ИсправлятьОшибки Тогда
				Для Каждого Право Из Объект.right Цикл
					Право.value = Истина;
				КонецЦикла;
				ВнесеныИзменения = Истина;
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В роли АдминистраторСистемы для %1 не установлены права на реквизит %2'"),
					ИмяДляОшибки, ЧастиИмени[3]);
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
				ДобавитьОшибку(ОбъектМетаданных,
					НСтр("ru = 'Установлены избыточные права на реквизиты'"), ТекстОшибки);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если РазделенныеОбъектыМетаданных.Получить(ПолноеИмяОбъекта) = Ложь Тогда
			// На разделенные объекты прав быть не должно. Их надо удалить.
			Если ИсправлятьОшибки Тогда
				Для Каждого Право Из Объект.right Цикл
					Право.value = Ложь;
				КонецЦикла;
				ВнесеныИзменения = Истина;
			Иначе
				Если ЭтоДемоБСП() Тогда
					ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы избыточно установлены права на %1.
						|Возможно некорректно установлены значения разделителей.'");
				Иначе
					ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы избыточно установлены права на %1'");
				КонецЕсли;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяДляОшибки);
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
				ДобавитьОшибку(ОбъектМетаданных,
					НСтр("ru = 'Избыточно установлены права на разделенный объект'"), ТекстОшибки);
			КонецЕсли;
		ИначеЕсли НеразделенныеОбъектыМетаданных.Получить(ПолноеИмяОбъекта) = Ложь Тогда
			ДопустимыеПрава = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РазрешенныеОбъекты[ТипОбъекта]);
			// Проверка на неразрешенные права для объектов (Интерактивное удаление и т.п.).
			Для Каждого Право Из Объект.right Цикл
				Если ДопустимыеПрава.Свойство(Право.name) Тогда
					ДопустимыеПрава[Право.name] = Истина;
				Иначе
					Если ИсправлятьОшибки Тогда
						Право.value = Ложь; // Неразрешенное право на объект. Нужно удалить.
						ВнесеныИзменения = Истина;
					Иначе
						Если ЭтоДемоБСП() Тогда
							ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 установлено запрещенное право %2.
								|Возможно некорректно установлены значения разделителей.'");
						Иначе
							ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 установлено запрещенное право %2'");
						КонецЕсли;
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ИмяДляОшибки, СоответствиеТерминов[Право.name]);
						ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
						ДобавитьОшибку(ОбъектМетаданных,
							НСтр("ru = 'Установлены запрещенные права на объект'"), ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого Право Из ДопустимыеПрава Цикл
				Если ТипЗнч(Право.Значение) = Тип("Строка") Тогда
					Если ИсправлятьОшибки Тогда
						// Отсутствуют необходимые права. Нужно добавить.
						ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
						ДобавляемоеПраво.name = Право.Ключ;
						ДобавляемоеПраво.value = Истина;
						Объект.right.Добавить(ДобавляемоеПраво);
						ВнесеныИзменения = Истина;
					Иначе
						Если ЭтоДемоБСП() Тогда
							ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 не установлено необходимое право %2.
								|Возможно некорректно установлены значения разделителей.'");
						Иначе
							ШаблонОшибки = НСтр("ru = 'В роли АдминистраторСистемы для %1 не установлено необходимое право %2'");
						КонецЕсли;
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ИмяДляОшибки, Право.Значение);
						ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
						ДобавитьОшибку(ОбъектМетаданных,
							НСтр("ru = 'Не установлены необходимые права на объект'"), ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НеразделенныеОбъектыМетаданных.Удалить(ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	// Если какие-то объекты не нашли, то их надо добавить.
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.2/roles", "ObjectType");
	Для Каждого Объект Из НеразделенныеОбъектыМетаданных Цикл
		
		ЧастиИмени = СтрРазделить(Объект.Ключ, ".");
		ТипОбъекта = ЧастиИмени[0];
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		
		Если ИсправлятьОшибки Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
			ДобавляемыйОбъект.name = Объект.Ключ;
			ДопустимыеПрава = РазрешенныеОбъекты[ТипОбъекта];
			Для Каждого Право Из ДопустимыеПрава Цикл
				ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
				ДобавляемоеПраво.name = Право.Ключ;
				ДобавляемоеПраво.value = Истина;
				ДобавляемыйОбъект.right.Добавить(ДобавляемоеПраво);
			КонецЦикла;
			ОбъектXDTO.object.Добавить(ДобавляемыйОбъект);
			ВнесеныИзменения = Истина;
		Иначе
			Если ЭтоДемоБСП() Тогда
				ШаблонОшибки = НСтр("ru = 'Для %1 должны быть установлены все права в роли АдминистраторСистемы, кроме запрещенных.
					|Возможно некорректно установлены значения разделителей.'");
			Иначе
				ШаблонОшибки = НСтр("ru = 'Для %1 должны быть установлены все права в роли АдминистраторСистемы, кроме запрещенных'");
			КонецЕсли;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяДляОшибки);
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
			ДобавитьОшибку(ОбъектМетаданных, НСтр("ru = 'Не установлены необходимые права на объект'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	// Если включено автоматическое исправление ошибок, то сохраняем изменения в файл роли.
	Если ВнесеныИзменения Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ФайлРолиАдминистраторСистемы, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO,, "http://v8.1c.ru/8.2/roles",, НазначениеТипаXML.Явное);
		ЗаписьXML.Закрыть();
		ДобавитьОшибку(РольАдминистраторСистемы, НСтр("ru = 'Права для роли не соответствуют ожидаемым'"),
			НСтр("ru = 'Исправлено. Права для роли установлены согласно значению разделителей'"));
		ЗагружаемыеФайлы.Добавить(ФайлРолиАдминистраторСистемы);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоставРолиПолныеПрава(РазделенныеОбъектыМетаданных, НеразделенныеОбъектыМетаданных, Исключения)
	
	// На неразделенные объекты права не проверяем.
	// Объекты, не входящие в состав разделителей (кроме журналов и последовательностей) пропускаем.
	
	ФайлРолиПолныеПрава = КаталогВыгрузки + "Roles\ПолныеПрава\Ext\Rights.xml";
	РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
	
	// Получаем XDTO объект роли.
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлРолиПолныеПрава);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	// Проверяем базовые свойства роли.
	Если Не БазовыеСвойстваРолиУстановленыКорректно(ОбъектXDTO, РольПолныеПрава, Истина) Тогда
		Возврат; // Критическая ошибка. Автоисправление не целесообразно. Прекращаем проверку.
	КонецЕсли;
	
	// Проверяем права роли.
	ТипПраваXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.2/roles", "RightType");
	РазрешенныеОбъекты = ДопустимыеПрава(Истина);
	ВнесеныИзменения = Ложь;
	
	РазрешенныеПраваНаНеразделенные = Новый Структура;
	РазрешенныеПраваНаНеразделенные.Вставить("Read");
	РазрешенныеПраваНаНеразделенные.Вставить("View");
	РазрешенныеПраваНаНеразделенные.Вставить("InputByString");
	
	РазрешенныеПраваНаРазделенные = Новый Структура;
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveDelete", НСтр("ru = 'Интерактивное удаление'"));
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveDeletePredefinedData", НСтр("ru = 'Интерактивное удаление предопределенных'"));
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveSetDeletionMarkPredefinedData", НСтр("ru = 'Интерактивная пометка на удаление предопределенных'"));
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveClearDeletionMarkPredefinedData", НСтр("ru = 'Интерактивное снятие пометки удаления предопределенных'"));
	РазрешенныеПраваНаРазделенные.Вставить("InteractiveDeleteMarkedPredefinedData", НСтр("ru = 'Интерактивное удаление помеченных предопределенных'"));
	
	Для Каждого Объект Из ОбъектXDTO.object Цикл
		
		ПолноеИмяОбъекта = Объект.name;
		
		Если Исключения.Получить(ПолноеИмяОбъекта)= Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(ПолноеИмяОбъекта, ".");
		ТипОбъекта = ЧастиИмени[0];
		
		Если Не РазрешенныеОбъекты.Свойство(ТипОбъекта) Тогда
			// Проверяются только объекты, которые входят в состав разделителей.
			Продолжить;
		КонецЕсли;
		
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		
		Если ЧастиИмени.Количество() > 2 Тогда
			Если ЧастиИмени[2] = "Command" Тогда
				Продолжить; // Права на команды не изменяем.
			КонецЕсли;
			// Лишние права на подчиненные реквизиты. Их нужно удалить.
			Если ИсправлятьОшибки Тогда
				Для Каждого Право Из Объект.right Цикл
					Право.value = Истина;
				КонецЦикла;
				ВнесеныИзменения = Истина;
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В роли ПолныеПрава для %1 избыточно установлены права на реквизит %2'"),
					ИмяДляОшибки, ЧастиИмени[3]);
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
				ДобавитьОшибку(ОбъектМетаданных,
					НСтр("ru = 'Установлены избыточные права на реквизиты'"), ТекстОшибки);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// На неразделенные объекты допустимы только права Чтение, Просмотр, Ввод по строке.
		Если НеразделенныеОбъектыМетаданных.Получить(ПолноеИмяОбъекта) = Ложь Тогда
			// Заполняем текущие права объекта.
			УстановленныеПрава = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РазрешенныеОбъекты[ТипОбъекта]);
			Для Каждого Право Из Объект.right Цикл
				УстановленныеПрава[Право.name] = Истина;
			КонецЦикла;
			Для Каждого Право Из УстановленныеПрава Цикл
				Если РазрешенныеПраваНаНеразделенные.Свойство(Право.Ключ) Тогда
					Продолжить; // Разрешенные права не проверяем.
				КонецЕсли;
				Если ТипЗнч(Право.Значение) = Тип("Строка") Тогда
					Если ИсправлятьОшибки Тогда
						// Отсутствуют необходимые права. Нужно добавить.
						ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
						ДобавляемоеПраво.name = Право.Ключ;
						ДобавляемоеПраво.value = Ложь;
						Объект.right.Добавить(ДобавляемоеПраво);
						ВнесеныИзменения = Истина;
					Иначе
						Если ЭтоДемоБСП() Тогда
							ШаблонОшибки = НСтр("ru = 'Для %1 установлено запрещенное право %2.
								|Возможно некорректно установлены значения разделителей.'");
						Иначе
							ШаблонОшибки = НСтр("ru = 'Для %1 установлено запрещенное право %2'");
						КонецЕсли;
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонОшибки, ИмяДляОшибки, Право.Значение);
						ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
						ДобавитьОшибку(ОбъектМетаданных,
							НСтр("ru = 'Установлены запрещенные права на объект'"), ТекстОшибки);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НеразделенныеОбъектыМетаданных.Удалить(ПолноеИмяОбъекта);
		ИначеЕсли РазделенныеОбъектыМетаданных.Получить(ПолноеИмяОбъекта) = Ложь Тогда
			ДопустимыеПрава = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РазрешенныеОбъекты[ТипОбъекта]);
			// Проверка на неразрешенные права для объектов (Интерактивное удаление и т.п.).
			Для Каждого Право Из Объект.right Цикл
				ДопустимыеПрава[Право.name] = Истина;
				Если РазрешенныеПраваНаРазделенные.Свойство(Право.name) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ИсправлятьОшибки Тогда
					Право.value = Истина; // Необходимо устанавливать все права, кроме запрещенных.
					ВнесеныИзменения = Истина;
				Иначе
					Если ЭтоДемоБСП() Тогда
						ШаблонОшибки = НСтр("ru = 'Для %1 не установлено необходимое право %2.
							|Возможно некорректно установлены значения разделителей.'");
					Иначе
						ШаблонОшибки = НСтр("ru = 'Для %1 не установлено необходимое право %2'");
					КонецЕсли;
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонОшибки, ИмяДляОшибки, РазрешенныеОбъекты[ТипОбъекта][Право.name]);
					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
					ДобавитьОшибку(ОбъектМетаданных,
						НСтр("ru = 'Не установлены необходимые права на объект'"), ТекстОшибки);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Право Из ДопустимыеПрава Цикл
				Если ТипЗнч(Право.Значение) = Тип("Строка") Тогда
					Если РазрешенныеПраваНаРазделенные.Свойство(Право.Ключ) Тогда
						Если ИсправлятьОшибки Тогда
							// Отсутствуют необходимые права. Нужно добавить.
							ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
							ДобавляемоеПраво.name = Право.Ключ;
							ДобавляемоеПраво.value = Ложь;
							Объект.right.Добавить(ДобавляемоеПраво);
							ВнесеныИзменения = Истина;
						Иначе
							Если ЭтоДемоБСП() Тогда
								ШаблонОшибки = НСтр("ru = 'Для %1 установлено запрещенное право %2.
								|Возможно некорректно установлены значения разделителей.'");
							Иначе
								ШаблонОшибки = НСтр("ru = 'Для %1 установлено запрещенное право %2'");
							КонецЕсли;
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонОшибки, ИмяДляОшибки, Право.Значение);
							ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
							ДобавитьОшибку(ОбъектМетаданных,
								НСтр("ru = 'Установлены запрещенные права на объект'"), ТекстОшибки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			РазделенныеОбъектыМетаданных.Удалить(ПолноеИмяОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	// Если в файле роли нет данных о неразделенном объекте, то для него установлены все права.
	// Нужно снять все запрещенные права, разрешенные оставляем.
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.2/roles", "ObjectType");
	Для Каждого Объект Из НеразделенныеОбъектыМетаданных Цикл
		
		ЧастиИмени = СтрРазделить(Объект.Ключ, ".");
		ТипОбъекта = ЧастиИмени[0];
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		
		Если ИсправлятьОшибки Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
			ДобавляемыйОбъект.name = Объект.Ключ;
			ДопустимыеПрава = РазрешенныеОбъекты[ТипОбъекта];
			Для Каждого Право Из ДопустимыеПрава Цикл
				Если РазрешенныеПраваНаНеразделенные.Свойство(Право.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
				ДобавляемоеПраво.name = Право.Ключ;
				ДобавляемоеПраво.value = Ложь;
				ДобавляемыйОбъект.right.Добавить(ДобавляемоеПраво);
			КонецЦикла;
			ОбъектXDTO.object.Добавить(ДобавляемыйОбъект);
			ВнесеныИзменения = Истина;
		Иначе
			Если ЭтоДемоБСП() Тогда
				ШаблонОшибки = НСтр("ru = 'Для %1 не должны быть установлены права.
				|Возможно некорректно установлены значения разделителей.'");
			Иначе
				ШаблонОшибки = НСтр("ru = 'Для %1 не должны быть установлены права'");
			КонецЕсли;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяДляОшибки);
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
			ДобавитьОшибку(ОбъектМетаданных,
				НСтр("ru = 'Не установлены необходимые права на объект'"), ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	// Если в файле роли нет данных о разделенном объекте, то для него установлены все права.
	// Нужно снять все запрещенные права.
	Для Каждого Объект Из РазделенныеОбъектыМетаданных Цикл
		
		Если Исключения.Получить(Объект.Ключ)= Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ЧастиИмени = СтрРазделить(Объект.Ключ, ".");
		ТипОбъекта = ЧастиИмени[0];
		ИмяДляОшибки = СоответствиеТерминов[ТипОбъекта] + "." + ЧастиИмени[1];
		ДобавленыПрава = Ложь;
		
		Если ИсправлятьОшибки Тогда
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипОбъектаXDTO);
			ДобавляемыйОбъект.name = Объект.Ключ;
		КонецЕсли;
		ДопустимыеПрава = РазрешенныеОбъекты[ТипОбъекта];
		Для Каждого Право Из ДопустимыеПрава Цикл
			Если РазрешенныеПраваНаРазделенные.Свойство(Право.Ключ) Тогда
				
				Если ИсправлятьОшибки Тогда
					ДобавляемоеПраво = ФабрикаXDTO.Создать(ТипПраваXDTO);
					ДобавляемоеПраво.name = Право.Ключ;
					ДобавляемоеПраво.value = Ложь;
					ДобавляемыйОбъект.right.Добавить(ДобавляемоеПраво);
					ДобавленыПрава = Истина;
				Иначе
					Если ЭтоДемоБСП() Тогда
						ШаблонОшибки = НСтр("ru = 'Для %1 не должно быть установлено право %2.
						|Возможно некорректно установлены значения разделителей.'");
					Иначе
						ШаблонОшибки = НСтр("ru = 'Для %1 не должно быть установлено право %2'");
					КонецЕсли;
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонОшибки, ИмяДляОшибки, ДопустимыеПрава[Право.Ключ]);
					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяДляОшибки);
					ДобавитьОшибку(ОбъектМетаданных,
						НСтр("ru = 'Установлены запрещенные права на объект'"), ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ДобавленыПрава Тогда
			ОбъектXDTO.object.Добавить(ДобавляемыйОбъект);
			ВнесеныИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Если включено автоматическое исправление ошибок, то сохраняем изменения в файл роли.
	Если ВнесеныИзменения Тогда
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ФайлРолиПолныеПрава, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO,, "http://v8.1c.ru/8.2/roles",, НазначениеТипаXML.Явное);
		ЗаписьXML.Закрыть();
		ДобавитьОшибку(РольПолныеПрава, НСтр("ru = 'Права для роли не соответствуют ожидаемым'"),
			НСтр("ru = 'Исправлено. Права для роли установлены согласно значению разделителей'"));
		ЗагружаемыеФайлы.Добавить(ФайлРолиПолныеПрава);
	КонецЕсли;
	
КонецПроцедуры

Функция БазовыеСвойстваРолиУстановленыКорректно(ОбъектXDTO, МетаданныеРоли, УстанавливатьПраваДляНовыхОбъектов)
	
	БазовыеСвойства = Новый СписокЗначений;
	БазовыеСвойства.Добавить("setForNewObjects", НСтр("ru = 'Устанавливать права для новых объектов'"), УстанавливатьПраваДляНовыхОбъектов);
	БазовыеСвойства.Добавить("setForAttributesByDefault", НСтр("ru = 'Устанавливать права для реквизитов и табличных частей по умолчанию'"), Истина);
	БазовыеСвойства.Добавить("independentRightsOfChildObjects", НСтр("ru = 'Независимые права подчиненных объектов'"), Ложь);
	
	Для Каждого БазовоеСвойство Из БазовыеСвойства Цикл
		Если ОбъектXDTO[БазовоеСвойство.Значение] <> БазовоеСвойство.Пометка Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Значение свойства %1 установлено в значение %2. Ожидаемое значение %3'"),
				БазовоеСвойство.Представление, Формат(ОбъектXDTO[БазовоеСвойство.Значение], "БЛ=Ложь; БИ=Истина"),
				Формат(БазовоеСвойство.Пометка, "БЛ=Ложь; БИ=Истина"));
			ДобавитьОшибку(МетаданныеРоли,
				НСтр("ru = 'Значение базового свойства роли отличается от поставляемого'"), ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ДопустимыеПрава(ВключаяЗапрещенные)
	
	ДопустимыеПрава = Новый Структура;
	
	СтруктураПрав = СтруктураПрав(, ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Constant", СтруктураПрав);
	ДопустимыеПрава.Вставить("CalculationRegister", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("УправлениеИтогами", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("InformationRegister", СтруктураПрав);
	ДопустимыеПрава.Вставить("AccumulationRegister", СтруктураПрав);
	ДопустимыеПрава.Вставить("AccountingRegister", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,ВводПоСтроке", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("ExchangePlan", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,Предопределенные,ВводПоСтроке", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Catalog", СтруктураПрав);
	ДопустимыеПрава.Вставить("ChartOfCharacteristicTypes", СтруктураПрав);
	ДопустимыеПрава.Вставить("ChartOfAccounts", СтруктураПрав);
	ДопустимыеПрава.Вставить("ChartOfCalculationTypes", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,ВводПоСтроке,Документы", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Document", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,ВводПоСтроке,БизнесПроцессы", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("BusinessProcess", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("ДобавлениеУдаление,ВводПоСтроке,Задачи", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Task", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("Последовательности", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("Sequence", СтруктураПрав);
	
	СтруктураПрав = СтруктураПрав("ЖурналыДокументов", ВключаяЗапрещенные);
	ДопустимыеПрава.Вставить("DocumentJournal", СтруктураПрав);
	
	Возврат ДопустимыеПрава;
	
КонецФункции

Функция СтруктураПрав(НеобходимыеПрава = "", ВключаяЗапрещенные = Ложь)
	
	// Для всех объектов запрещены права
	// InteractiveDelete
	// InteractiveDeletePredefinedData
	// InteractiveSetDeletionMarkPredefinedData
	// InteractiveClearDeletionMarkPredefinedData
	// InteractiveDeleteMarkedPredefinedData.
	
	СтруктураПрав = Новый Структура;
	
	Если СтрНайти(НеобходимыеПрава, "Последовательности") <> 0 Тогда
		СтруктураПрав.Вставить("Read", НСтр("ru = 'Чтение'"));
		СтруктураПрав.Вставить("Update", НСтр("ru = 'Изменение'"));
		Возврат СтруктураПрав;
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "ЖурналыДокументов") <> 0 Тогда
		СтруктураПрав.Вставить("Read", НСтр("ru = 'Чтение'"));
		СтруктураПрав.Вставить("View", НСтр("ru = 'Просмотр'"));
		Возврат СтруктураПрав;
	КонецЕсли;
	
	// Базовые права для всех типов кроме журналов и последовательностей.
	СтруктураПрав.Вставить("Read", НСтр("ru = 'Чтение'"));
	СтруктураПрав.Вставить("Update", НСтр("ru = 'Изменение'"));
	СтруктураПрав.Вставить("View", НСтр("ru = 'Просмотр'"));
	СтруктураПрав.Вставить("Edit", НСтр("ru = 'Редактирование'"));
	
	Если СтрНайти(НеобходимыеПрава, "УправлениеИтогами") <> 0 Тогда
		СтруктураПрав.Вставить("TotalsControl", НСтр("ru = 'Управление итогами'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "ДобавлениеУдаление") <> 0 Тогда
		СтруктураПрав.Вставить("Insert", НСтр("ru = 'Добавление'"));
		СтруктураПрав.Вставить("Delete", НСтр("ru = 'Удаление'"));
		СтруктураПрав.Вставить("InteractiveInsert", НСтр("ru = 'Интерактивное добавление'"));
		Если ВключаяЗапрещенные Тогда
			СтруктураПрав.Вставить("InteractiveDelete", НСтр("ru = 'Интерактивное удаление'"));
		КонецЕсли;
		СтруктураПрав.Вставить("InteractiveSetDeletionMark", НСтр("ru = 'Интерактивная пометка удаления'"));
		СтруктураПрав.Вставить("InteractiveClearDeletionMark", НСтр("ru = 'Интерактивное снятие пометки удаления'"));
		СтруктураПрав.Вставить("InteractiveDeleteMarked", НСтр("ru = 'Интерактивное удаление помеченных'"));
	КонецЕсли;
	
	Если ВключаяЗапрещенные И СтрНайти(НеобходимыеПрава, "Предопределенные") <> 0 Тогда
		СтруктураПрав.Вставить("InteractiveDeletePredefinedData", НСтр("ru = 'Интерактивное удаление предопределенных'"));
		СтруктураПрав.Вставить("InteractiveSetDeletionMarkPredefinedData", НСтр("ru = 'Интерактивная пометка на удаление предопределенных'"));
		СтруктураПрав.Вставить("InteractiveClearDeletionMarkPredefinedData", НСтр("ru = 'Интерактивное снятие пометки удаления предопределенных'"));
		СтруктураПрав.Вставить("InteractiveDeleteMarkedPredefinedData", НСтр("ru = 'Интерактивное удаление помеченных предопределенных'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "ВводПоСтроке") <> 0 Тогда
		СтруктураПрав.Вставить("InputByString", НСтр("ru = 'Ввод по строке'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "Документы") <> 0 Тогда
		СтруктураПрав.Вставить("Posting", НСтр("ru = 'Проведение'"));
		СтруктураПрав.Вставить("UndoPosting", НСтр("ru = 'Отмена проведения'"));
		СтруктураПрав.Вставить("InteractivePosting", НСтр("ru = 'Интерактивное проведение'"));
		СтруктураПрав.Вставить("InteractivePostingRegular", НСтр("ru = 'Интерактивное проведение неоперативное'"));
		СтруктураПрав.Вставить("InteractiveUndoPosting", НСтр("ru = 'Интерактивная отмена проведения'"));
		СтруктураПрав.Вставить("InteractiveChangeOfPosted", НСтр("ru = 'Интерактивное изменение проведенных'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "БизнесПроцессы") <> 0 Тогда
		СтруктураПрав.Вставить("InteractiveActivate", НСтр("ru = 'Интерактивная активация'"));
		СтруктураПрав.Вставить("Start", НСтр("ru = 'Старт'"));
		СтруктураПрав.Вставить("InteractiveStart", НСтр("ru = 'Интерактивный старт'"));
	КонецЕсли;
	
	Если СтрНайти(НеобходимыеПрава, "Задачи") <> 0 Тогда
		СтруктураПрав.Вставить("InteractiveActivate", НСтр("ru = 'Интерактивная активация'"));
		СтруктураПрав.Вставить("Execute", НСтр("ru = 'Выполнение'"));
		СтруктураПрав.Вставить("InteractiveExecute", НСтр("ru = 'Интерактивное выполнение'"));
	КонецЕсли;
	
	Возврат СтруктураПрав;
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Процедура ПроверкаКорректностиСтандартныхШаблонов()
	
	ИмяЭталоннойРоли = "ИзменениеУчастниковГруппДоступа";
	
	// Получаем стандартные тексты шаблонов.
	ПутьКФайлуРоли = КаталогВыгрузки + "Roles\" + ИмяЭталоннойРоли + "\Ext\Rights.xml";
	СтандартныеШаблоны = ШаблоныОграничений(ПутьКФайлуРоли);
	// Сравниваем шаблоны ограничений конфигурации со стандартными.
	ФайлыРолей = НайтиФайлы(КаталогВыгрузки + "Roles", "Rights.xml", Истина);
	Для Каждого ФайлРоли Из ФайлыРолей Цикл
		ЧастиИмени = СтрРазделить(ФайлРоли.Путь, "\", Ложь);
		ИмяРоли = ЧастиИмени[ЧастиИмени.Количество() - 2];
		
		Если ИмяРоли = ИмяЭталоннойРоли Тогда
			Продолжить;
		КонецЕсли;
		
		ВнесеныИзменения = Ложь;
		
		ДокументDOM = ДокументDOM(ФайлРоли.ПолноеИмя);
		РезультатXPath = ВычислитьВыражениеXPath("//xmlns:restrictionTemplate", ДокументDOM);
		ШаблонОграничения = РезультатXPath.ПолучитьСледующий();
		Пока ШаблонОграничения <> Неопределено Цикл
			Для Каждого Узел Из ШаблонОграничения.ДочерниеУзлы Цикл
				Если Узел.ИмяУзла = "name" Тогда
					ИмяШаблона = Узел.ТекстовоеСодержимое;
				ИначеЕсли Узел.ИмяУзла = "condition" Тогда
					ТекстШаблона = Узел.ТекстовоеСодержимое;
				КонецЕсли;
			КонецЦикла;
			
			СтандартныйШаблон = СтандартныеШаблоны.Получить(ИмяШаблона);
			Если СтандартныйШаблон <> Неопределено И ТекстШаблона <> СтандартныйШаблон Тогда
				Роль = Метаданные.Роли.Найти(ИмяРоли);
				ТекстОшибки = СокрЛ(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 Необходимо скопировать шаблон ограничения %2 из роли %3'"),
					?(ИсправлятьОшибки, НСтр("ru = 'Исправлено.'"), ""), ИмяШаблона, ИмяЭталоннойРоли));
				ДобавитьОшибку(Роль, НСтр("ru = 'Шаблон ограничения не соответствует эталону'"), ТекстОшибки);
				Если ИсправлятьОшибки Тогда
					Для Каждого Узел Из ШаблонОграничения.ДочерниеУзлы Цикл
						Если Узел.ИмяУзла = "condition" Тогда
							Узел.ТекстовоеСодержимое = СтандартныйШаблон;
						КонецЕсли;
					КонецЦикла;
					ВнесеныИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
			ШаблонОграничения = РезультатXPath.ПолучитьСледующий();
		КонецЦикла;
		Если ВнесеныИзменения Тогда
			ЗаписатьДокументDOMВФайл(ДокументDOM, ФайлРоли.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ШаблоныОграничений(ПутьКФайлуРоли)
	
	ШаблоныОграничений = Новый Соответствие;
	
	ДокументDOM = ДокументDOM(ПутьКФайлуРоли);
	РезультатXPath = ВычислитьВыражениеXPath("//xmlns:restrictionTemplate", ДокументDOM);
	ШаблонОграничения = РезультатXPath.ПолучитьСледующий();
	Пока ШаблонОграничения <> Неопределено Цикл
		Для Каждого Узел Из ШаблонОграничения.ДочерниеУзлы Цикл
			Если Узел.ИмяУзла = "name" Тогда
				ИмяШаблона = Узел.ТекстовоеСодержимое;
			ИначеЕсли Узел.ИмяУзла = "condition" Тогда
				ТекстШаблона = Узел.ТекстовоеСодержимое;
			КонецЕсли;
		КонецЦикла;
		ШаблоныОграничений.Вставить(ИмяШаблона, ТекстШаблона);
		ШаблонОграничения = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	Возврат ШаблоныОграничений;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли